{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Language Server Protocol Support for Emacs # homepage \u2022 installation \u2022 languages \u2022 settings \u2022 extensions \u2022 troubleshooting \u2022 screenshots \u2022 FAQ Why? # Community Driven Fully featured - supports all features in Language Server Protocol v3.14. Fast - see performance section . Flexible - choose between full-blown IDE with flashy UI or minimal distraction free. Easy to configure - works out of the box and automatically upgrades if additional packages are present. Overview # Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company , flycheck and projectile . Non-blocking asynchronous calls Real-time Diagnostics/linting via flycheck (recommended) or flymake when Emacs > 26 (requires flymake>=1.0.5) Code completion - company-capf / completion-at-point (note that company-lsp is no longer supported). Hovers - using lsp-ui Code actions - via lsp-execute-code-action , modeline (recommended) or lsp-ui sideline. Code outline - using builtin imenu or helm-imenu Code navigation - using builtin xref , lsp-treemacs tree views or lsp-ui peek functions. Code lens Symbol highlights Formatting Project errors on modeline Debugger - dap-mode Breadcrumb on headerline Helm integration - helm-lsp Ivy integration - lsp-ivy Treemacs integration - lsp-treemacs Semantic tokens as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer) which-key integration for better discovery Presentations/demos # System Crafters channel Emacs IDE Videos skybert 's emacsconf presentation (Java) thatwist 's ScalaUA Conference presentation (Scala) See also # lsp-docker - provide docker image with preconfigured language servers with corresponding emacs configuration. company-box - company frontend with icons. dap-mode - Debugger integration for lsp-mode . eglot - An alternative minimal LSP implementation. which-key - Emacs package that displays available keybindings in popup projectile - Project Interaction Library for Emacs emacs-tree-sitter - Faster, fine-grained code highlighting via tree-sitter . gccemacs - modified Emacs capable of compiling and running Emacs Lisp as native code. Contributions # Contributions are very much welcome. Support the project # The emacs-lsp organization has more than 20.000 lines of code , to keep all of this working, we need to implement new features and help the community on a lot of issues. You can help us keep going and improving it by supporting the project Members # Here it is a list of the current lsp-mode members and what they are primary working on/responsible for. totbwf F# brotzeit Rust dsyzling Scala kurnevsky Scala | Rust seagle0128 Go | Python MS sebastiansturm lsp-mode core | C++ vibhavp lsp-mode core yyoncho lsp-mode core | Java ericdallo Dart | Flutter | docs danielmartin C++ | Swift kiennq completions | pwsh nbfalcon lsp-mode core","title":"Overview"},{"location":"#language-server-protocol-support-for-emacs","text":"homepage \u2022 installation \u2022 languages \u2022 settings \u2022 extensions \u2022 troubleshooting \u2022 screenshots \u2022 FAQ","title":"Language Server Protocol Support for Emacs"},{"location":"#why","text":"Community Driven Fully featured - supports all features in Language Server Protocol v3.14. Fast - see performance section . Flexible - choose between full-blown IDE with flashy UI or minimal distraction free. Easy to configure - works out of the box and automatically upgrades if additional packages are present.","title":"Why?"},{"location":"#overview","text":"Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company , flycheck and projectile . Non-blocking asynchronous calls Real-time Diagnostics/linting via flycheck (recommended) or flymake when Emacs > 26 (requires flymake>=1.0.5) Code completion - company-capf / completion-at-point (note that company-lsp is no longer supported). Hovers - using lsp-ui Code actions - via lsp-execute-code-action , modeline (recommended) or lsp-ui sideline. Code outline - using builtin imenu or helm-imenu Code navigation - using builtin xref , lsp-treemacs tree views or lsp-ui peek functions. Code lens Symbol highlights Formatting Project errors on modeline Debugger - dap-mode Breadcrumb on headerline Helm integration - helm-lsp Ivy integration - lsp-ivy Treemacs integration - lsp-treemacs Semantic tokens as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer) which-key integration for better discovery","title":"Overview"},{"location":"#presentationsdemos","text":"System Crafters channel Emacs IDE Videos skybert 's emacsconf presentation (Java) thatwist 's ScalaUA Conference presentation (Scala)","title":"Presentations/demos"},{"location":"#see-also","text":"lsp-docker - provide docker image with preconfigured language servers with corresponding emacs configuration. company-box - company frontend with icons. dap-mode - Debugger integration for lsp-mode . eglot - An alternative minimal LSP implementation. which-key - Emacs package that displays available keybindings in popup projectile - Project Interaction Library for Emacs emacs-tree-sitter - Faster, fine-grained code highlighting via tree-sitter . gccemacs - modified Emacs capable of compiling and running Emacs Lisp as native code.","title":"See also"},{"location":"#contributions","text":"Contributions are very much welcome.","title":"Contributions"},{"location":"#support-the-project","text":"The emacs-lsp organization has more than 20.000 lines of code , to keep all of this working, we need to implement new features and help the community on a lot of issues. You can help us keep going and improving it by supporting the project","title":"Support the project"},{"location":"#members","text":"Here it is a list of the current lsp-mode members and what they are primary working on/responsible for. totbwf F# brotzeit Rust dsyzling Scala kurnevsky Scala | Rust seagle0128 Go | Python MS sebastiansturm lsp-mode core | C++ vibhavp lsp-mode core yyoncho lsp-mode core | Java ericdallo Dart | Flutter | docs danielmartin C++ | Swift kiennq completions | pwsh nbfalcon lsp-mode core","title":"Members"},{"location":"blog/2020/7.0-release/","text":"7.0 Release # I am pleased to announce lsp-mode 7.0! Here are the most important features/news in 7.0 release lsp-mode/the team/the ecosystem # lsp-mode team and the activity in the repo has vastly increased. lsp-mode is no longer one man project but it is a product of Emacs LSP team and emacs community. This has allowed us to implement some very time consuming changes/refactoring(more about them bellow) which an year ago were unthinkable due to the lack manpower. emacs-lsp repo has become a nice place to start contributing to open source or learn elisp and now there are 244 contributors in the main repo. Even more some of the current maintainers had zero elisp knowledge before doing their first lsp-mode contributions. We started moving out some of the server specific packages(e. g. lsp-dart maintained by ericdallo and lsp-metals maintained by kurnevsky , lsp-python-ms by seagle0128 , etc) in order to provide focused support by a an expert in the language at hand. Considering where we were few months ago the level of integrated experience provided by those packages has increased and often it is comparable with backed by paid full time developers editors like VScode . Here it is a gif illustrating that: lsp-dart . LSP in its nature should be language agnostic but in order to be comparable with VScode lsp-mode should support language server extensions as well which is much more work than the work on protocol itself and requires a constant monitoring of the server repo since there is no contract and the server team might change the contract whenever they want. On the bright side lsp-mode has attracted several server side developers or lsp-mode team members(e. g. mpanarin ) has become server side contributors and often we are ahead of changes or we directly address issues in the server when they arise. We are still looking for maintainer(s) for JS/TS suite( typescript-language-server , eslint , angular ) though. Major features # 3.16 spec support # We provided full support for 3.14 features one year after the version has been released. Now, we have support for all major features of 3.16 protocol even before it has been released (except for result streaming which apparently hasn't been implemented by any language server). New website # It is created ericdallo - here it is the website . Check it out and eventually provide feedback. Semantic highlights # This is part of 3.16 spec. It is implemented by sebastiansturm and it can be enabled by setting lsp-enable-semantic-highlighting . We have dropped the Theia protocol support for semantic highlighting since it is not going to make to the official spec. ATM it is supported by Rust Analyzer , Clangd (from master branch) and lua language server. org-mode integration(preview) # org-mode mode is the Emacs flagman and this integration brings up the literate programming to a new level. The integration is pretty raw but usable - you basically can run lsp-mode language intelligence over org-mode source block directly in the org-mode document. We have achieved that by creating virtual buffer abstraction which allows us to fake the server that the client has actually opened the real file. Check gif and the docs . I think that the ability to implement such features is why Emacs is editor in a league of its own . And implementing such features is one of the signs that we are slowly moving from the phase catching up into getting ahead (or maybe I am overly optimistic). Language Server Protocol bindings, upcoming changes # We generated json schema from the protocol and from that schema we generated dash destructoring, getters, setters, validators, constructors, indication for optional/required fields, etc. which allow us to perform compile time validation of the protocol usage. This was huge change because we had to walk through almost all methods and replace explicit access to the elisp data structure with protocol usage. At the same time, emacs-lsp organization has more than 20k lines of code. This was coordinated effort and a lot of individuals contributed to that. The benefits are that we now can switch the underlying data structure from hashmap to plists which will yield better performance and also that the overall quality of the codebase has increased. Example Before: ( defun lsp--position-to-point ( params ) \"Convert Position object in PARAMS to a point.\" ( lsp--line-character-to-point ( gethash \"line\" params ) ( gethash \"character\" params ))) After: ( lsp-defun lsp--position-to-point (( &Position :line :character )) \"Convert `Position' object in PARAMS to a point.\" ( lsp--line-character-to-point line character )) In this example :line and :character are validated as fields of Position structure. Also, we do some handy conversions, if the field is optional it will end up with ? like :foo? . To reduce boiler plate code we convert camelCase to :camel-case when we are destructoring it. Performance optimizations(flycheck, code completion) # We have rewritten the flycheck integration - the new integration provides the same UE as the old one but it is much more effective in reporting the errors to flycheck and lsp checker is much closer to the traditional flycheck checkers which are initiated/controlled from Emacs . Completion integration code is now much simpler/faster thanks to kiennq . What's next # Upcoming breaking changes Dropping Emacs 25 support. This will allow us utilize Emacs multi-threading to improve lsp-mode responsibility Switching from hashtables to plists - once this change goes in users must recompile all lsp-mode extensions. Drop company-lsp support(not ported to use lsp-protocol.el ) Implementing lsp-mode configuration wizard to improve beginners experience - check this issue for more details. The overall goal is let user pick settings for all features that are opinionated (e. g. lsp-ui ) and improve the discoverability of lsp-mode features/extensions/settings. We will try to switch to monthly/weakly release cycles and to different person for writing the announcements. We might eventually encourage melpa-stable usage.","title":"7.0 Release"},{"location":"blog/2020/7.0-release/#70-release","text":"I am pleased to announce lsp-mode 7.0! Here are the most important features/news in 7.0 release","title":"7.0 Release"},{"location":"blog/2020/7.0-release/#lsp-modethe-teamthe-ecosystem","text":"lsp-mode team and the activity in the repo has vastly increased. lsp-mode is no longer one man project but it is a product of Emacs LSP team and emacs community. This has allowed us to implement some very time consuming changes/refactoring(more about them bellow) which an year ago were unthinkable due to the lack manpower. emacs-lsp repo has become a nice place to start contributing to open source or learn elisp and now there are 244 contributors in the main repo. Even more some of the current maintainers had zero elisp knowledge before doing their first lsp-mode contributions. We started moving out some of the server specific packages(e. g. lsp-dart maintained by ericdallo and lsp-metals maintained by kurnevsky , lsp-python-ms by seagle0128 , etc) in order to provide focused support by a an expert in the language at hand. Considering where we were few months ago the level of integrated experience provided by those packages has increased and often it is comparable with backed by paid full time developers editors like VScode . Here it is a gif illustrating that: lsp-dart . LSP in its nature should be language agnostic but in order to be comparable with VScode lsp-mode should support language server extensions as well which is much more work than the work on protocol itself and requires a constant monitoring of the server repo since there is no contract and the server team might change the contract whenever they want. On the bright side lsp-mode has attracted several server side developers or lsp-mode team members(e. g. mpanarin ) has become server side contributors and often we are ahead of changes or we directly address issues in the server when they arise. We are still looking for maintainer(s) for JS/TS suite( typescript-language-server , eslint , angular ) though.","title":"lsp-mode/the team/the ecosystem"},{"location":"blog/2020/7.0-release/#major-features","text":"","title":"Major features"},{"location":"blog/2020/7.0-release/#316-spec-support","text":"We provided full support for 3.14 features one year after the version has been released. Now, we have support for all major features of 3.16 protocol even before it has been released (except for result streaming which apparently hasn't been implemented by any language server).","title":"3.16 spec support"},{"location":"blog/2020/7.0-release/#new-website","text":"It is created ericdallo - here it is the website . Check it out and eventually provide feedback.","title":"New website"},{"location":"blog/2020/7.0-release/#semantic-highlights","text":"This is part of 3.16 spec. It is implemented by sebastiansturm and it can be enabled by setting lsp-enable-semantic-highlighting . We have dropped the Theia protocol support for semantic highlighting since it is not going to make to the official spec. ATM it is supported by Rust Analyzer , Clangd (from master branch) and lua language server.","title":"Semantic highlights"},{"location":"blog/2020/7.0-release/#org-mode-integrationpreview","text":"org-mode mode is the Emacs flagman and this integration brings up the literate programming to a new level. The integration is pretty raw but usable - you basically can run lsp-mode language intelligence over org-mode source block directly in the org-mode document. We have achieved that by creating virtual buffer abstraction which allows us to fake the server that the client has actually opened the real file. Check gif and the docs . I think that the ability to implement such features is why Emacs is editor in a league of its own . And implementing such features is one of the signs that we are slowly moving from the phase catching up into getting ahead (or maybe I am overly optimistic).","title":"org-mode integration(preview)"},{"location":"blog/2020/7.0-release/#language-server-protocol-bindings-upcoming-changes","text":"We generated json schema from the protocol and from that schema we generated dash destructoring, getters, setters, validators, constructors, indication for optional/required fields, etc. which allow us to perform compile time validation of the protocol usage. This was huge change because we had to walk through almost all methods and replace explicit access to the elisp data structure with protocol usage. At the same time, emacs-lsp organization has more than 20k lines of code. This was coordinated effort and a lot of individuals contributed to that. The benefits are that we now can switch the underlying data structure from hashmap to plists which will yield better performance and also that the overall quality of the codebase has increased. Example Before: ( defun lsp--position-to-point ( params ) \"Convert Position object in PARAMS to a point.\" ( lsp--line-character-to-point ( gethash \"line\" params ) ( gethash \"character\" params ))) After: ( lsp-defun lsp--position-to-point (( &Position :line :character )) \"Convert `Position' object in PARAMS to a point.\" ( lsp--line-character-to-point line character )) In this example :line and :character are validated as fields of Position structure. Also, we do some handy conversions, if the field is optional it will end up with ? like :foo? . To reduce boiler plate code we convert camelCase to :camel-case when we are destructoring it.","title":"Language Server Protocol bindings, upcoming changes"},{"location":"blog/2020/7.0-release/#performance-optimizationsflycheck-code-completion","text":"We have rewritten the flycheck integration - the new integration provides the same UE as the old one but it is much more effective in reporting the errors to flycheck and lsp checker is much closer to the traditional flycheck checkers which are initiated/controlled from Emacs . Completion integration code is now much simpler/faster thanks to kiennq .","title":"Performance optimizations(flycheck, code completion)"},{"location":"blog/2020/7.0-release/#whats-next","text":"Upcoming breaking changes Dropping Emacs 25 support. This will allow us utilize Emacs multi-threading to improve lsp-mode responsibility Switching from hashtables to plists - once this change goes in users must recompile all lsp-mode extensions. Drop company-lsp support(not ported to use lsp-protocol.el ) Implementing lsp-mode configuration wizard to improve beginners experience - check this issue for more details. The overall goal is let user pick settings for all features that are opinionated (e. g. lsp-ui ) and improve the discoverability of lsp-mode features/extensions/settings. We will try to switch to monthly/weakly release cycles and to different person for writing the announcements. We might eventually encourage melpa-stable usage.","title":"What's next"},{"location":"manual-language-docs/lsp-latex/","text":"Available functions # lsp-latex-build # Build .tex files with texlab. It use latexmk by default, so add .latexmkrc if you want to customize latex commands or options. You can change build command and option to other such as make , by changing lsp-latex-build-executable and lsp-latex-build-args . This command builds asynchronously by default, while it build synchronously with prefix argument(C-u). lsp-latex-forward-search # Move to current position on pdf viewer. To use, you should set lsp-latex-forward-search-executable and lsp-latex-forward-search-args according to your pdf viewer. See also document of texlab . Note # In this package, you can use even texlab v0.4.2 or older, written with Java, though it is not recommended. If you want to use them, you can write like: ;; Path to Java executable. If it is added to environmental PATH, ;; you don't have to write this. ( setq lsp-latex-java-executable \"/path/to/java\" ) ;; \"texlab.jar\" must be located at a directory contained in `exec-path' ;; \"texlab\" must be located at a directory contained in `exec-path'. ( setq lsp-latex-texlab-jar-file 'search-from-exec-path ) ;; If you want to put \"texlab.jar\" somewhere else, ;; you can specify the path to \"texlab.jar\" as follows: ;; (setq lsp-latex-texlab-jar-file \"/path/to/texlab.jar\")","title":"Lsp latex"},{"location":"manual-language-docs/lsp-latex/#available-functions","text":"","title":"Available functions"},{"location":"manual-language-docs/lsp-latex/#lsp-latex-build","text":"Build .tex files with texlab. It use latexmk by default, so add .latexmkrc if you want to customize latex commands or options. You can change build command and option to other such as make , by changing lsp-latex-build-executable and lsp-latex-build-args . This command builds asynchronously by default, while it build synchronously with prefix argument(C-u).","title":"lsp-latex-build"},{"location":"manual-language-docs/lsp-latex/#lsp-latex-forward-search","text":"Move to current position on pdf viewer. To use, you should set lsp-latex-forward-search-executable and lsp-latex-forward-search-args according to your pdf viewer. See also document of texlab .","title":"lsp-latex-forward-search"},{"location":"manual-language-docs/lsp-latex/#note","text":"In this package, you can use even texlab v0.4.2 or older, written with Java, though it is not recommended. If you want to use them, you can write like: ;; Path to Java executable. If it is added to environmental PATH, ;; you don't have to write this. ( setq lsp-latex-java-executable \"/path/to/java\" ) ;; \"texlab.jar\" must be located at a directory contained in `exec-path' ;; \"texlab\" must be located at a directory contained in `exec-path'. ( setq lsp-latex-texlab-jar-file 'search-from-exec-path ) ;; If you want to put \"texlab.jar\" somewhere else, ;; you can specify the path to \"texlab.jar\" as follows: ;; (setq lsp-latex-texlab-jar-file \"/path/to/texlab.jar\")","title":"Note"},{"location":"manual-language-docs/lsp-org/","text":"Literate programming using LSP and org-mode(alpha) # lsp-mode provides experimental support for running the language servers inside of org-mode source blocks. lsp-mode is achieving this by obtaining the information about the source block from the source block header(language + :tangle ) then translating the point to the LSP positions back and forth so the language server thinks that Emacs has opened the original file. In order that to work the files has to be present on the disk as well because the server expects to find them. Here it is a sample source block: #+BEGIN_SRC python :tangle \"python.py\" print \"Hello!\" #+END_SRC Demo # Commands # lsp-org start lsp-mode in source buffer. Must be executed with cursor being source block. lsp-virtual-buffer-disconnect turn off lsp-mode . What works # lsp-mode core features (finding references, going to definitions, completion, lenses, highlighting, etc) company-mode flycheck lsp-treemacs-symbols lsp-treemacs-errors-list Known limitations # Incremental updates are performed by sending the whole buffer each time(they simulate full updates). Deleting content that spans across the source block and the content of the org document is not handled. Opening and editing the actual file from the disk might cause undefined behaviour because the server expects file to be open only once. What does not work # dap-mode lsp-ui flymake (?) What's next # Finishing the virtual buffers API . lsp-ui support dap-mode support markdown-mode integration","title":"Literate programming using LSP and org-mode(alpha)"},{"location":"manual-language-docs/lsp-org/#literate-programming-using-lsp-and-org-modealpha","text":"lsp-mode provides experimental support for running the language servers inside of org-mode source blocks. lsp-mode is achieving this by obtaining the information about the source block from the source block header(language + :tangle ) then translating the point to the LSP positions back and forth so the language server thinks that Emacs has opened the original file. In order that to work the files has to be present on the disk as well because the server expects to find them. Here it is a sample source block: #+BEGIN_SRC python :tangle \"python.py\" print \"Hello!\" #+END_SRC","title":"Literate programming using LSP and org-mode(alpha)"},{"location":"manual-language-docs/lsp-org/#demo","text":"","title":"Demo"},{"location":"manual-language-docs/lsp-org/#commands","text":"lsp-org start lsp-mode in source buffer. Must be executed with cursor being source block. lsp-virtual-buffer-disconnect turn off lsp-mode .","title":"Commands"},{"location":"manual-language-docs/lsp-org/#what-works","text":"lsp-mode core features (finding references, going to definitions, completion, lenses, highlighting, etc) company-mode flycheck lsp-treemacs-symbols lsp-treemacs-errors-list","title":"What works"},{"location":"manual-language-docs/lsp-org/#known-limitations","text":"Incremental updates are performed by sending the whole buffer each time(they simulate full updates). Deleting content that spans across the source block and the content of the org document is not handled. Opening and editing the actual file from the disk might cause undefined behaviour because the server expects file to be open only once.","title":"Known limitations"},{"location":"manual-language-docs/lsp-org/#what-does-not-work","text":"dap-mode lsp-ui flymake (?)","title":"What does not work"},{"location":"manual-language-docs/lsp-org/#whats-next","text":"Finishing the virtual buffers API . lsp-ui support dap-mode support markdown-mode integration","title":"What's next"},{"location":"manual-language-docs/lsp-rust/","text":"Server note # NOTE: If you are using rustic-mode , you have to change rustic-lsp-server instead of lsp-rust-server , since it also supports eglot as a lightweight alternative to lsp-mode. lsp-rust-server Choose LSP server (default is RLS) lsp-rust-switch-server Switch priorities of lsp servers RLS # Customization # This is an incomplete list of the available options lsp-rust-rls-server-command change command to start RLS lsp-rust-show-hover-context turn off hover tooltips rustfmt # Code formatting with rustfmt can be configured with: lsp-rust-rustfmt-path change default path for rustfmt executable To enable automatic code format on save, add this to your init.el ( rust-mode is assumed to be installed): (add-hook 'before-save-hook (lambda () (when (eq 'rust-mode major-mode) (lsp-format-buffer)))) rust-analyzer # Commands # lsp-rust-analyzer-syntax-tree # Display syntax tree for current buffer lsp-rust-analyzer-status # Display status information for rust-analyzer lsp-rust-analyzer-join-lines # Join selected lines into one, smartly fixing up whitespace and trailing commas before: after: inlay-hints # lsp-rust-analyzer-inlay-hints-mode enables displaying of inlay hints NOTE: the inlay hints interact badly with the lsp-ui sideline, because it doesn't seem to consider the overlays in its width calculation, which often leads to lines wrapping around. Macro expansion # lsp-rust-analyzer-expand-macro expand macro call at point recursively Use your own function for displaying macro expansion by customizing lsp-rust-analyzer-macro-expansion-method Formatted and highlighted result with the default function of rustic. auto-import # Get a list of possible auto import candidates with lsp-execute-code-action Caveats # Rust Analyzer does not support disabling snippets - https://github.com/rust-analyzer/rust-analyzer/issues/2518 extract signature # This unmerged PR contains an example method that allows modifying the signature that is displayed by eldoc.","title":"Lsp rust"},{"location":"manual-language-docs/lsp-rust/#server-note","text":"NOTE: If you are using rustic-mode , you have to change rustic-lsp-server instead of lsp-rust-server , since it also supports eglot as a lightweight alternative to lsp-mode. lsp-rust-server Choose LSP server (default is RLS) lsp-rust-switch-server Switch priorities of lsp servers","title":"Server note"},{"location":"manual-language-docs/lsp-rust/#rls","text":"","title":"RLS"},{"location":"manual-language-docs/lsp-rust/#customization","text":"This is an incomplete list of the available options lsp-rust-rls-server-command change command to start RLS lsp-rust-show-hover-context turn off hover tooltips","title":"Customization"},{"location":"manual-language-docs/lsp-rust/#rustfmt","text":"Code formatting with rustfmt can be configured with: lsp-rust-rustfmt-path change default path for rustfmt executable To enable automatic code format on save, add this to your init.el ( rust-mode is assumed to be installed): (add-hook 'before-save-hook (lambda () (when (eq 'rust-mode major-mode) (lsp-format-buffer))))","title":"rustfmt"},{"location":"manual-language-docs/lsp-rust/#rust-analyzer","text":"","title":"rust-analyzer"},{"location":"manual-language-docs/lsp-rust/#commands","text":"","title":"Commands"},{"location":"manual-language-docs/lsp-rust/#lsp-rust-analyzer-syntax-tree","text":"Display syntax tree for current buffer","title":"lsp-rust-analyzer-syntax-tree"},{"location":"manual-language-docs/lsp-rust/#lsp-rust-analyzer-status","text":"Display status information for rust-analyzer","title":"lsp-rust-analyzer-status"},{"location":"manual-language-docs/lsp-rust/#lsp-rust-analyzer-join-lines","text":"Join selected lines into one, smartly fixing up whitespace and trailing commas before: after:","title":"lsp-rust-analyzer-join-lines"},{"location":"manual-language-docs/lsp-rust/#inlay-hints","text":"lsp-rust-analyzer-inlay-hints-mode enables displaying of inlay hints NOTE: the inlay hints interact badly with the lsp-ui sideline, because it doesn't seem to consider the overlays in its width calculation, which often leads to lines wrapping around.","title":"inlay-hints"},{"location":"manual-language-docs/lsp-rust/#macro-expansion","text":"lsp-rust-analyzer-expand-macro expand macro call at point recursively Use your own function for displaying macro expansion by customizing lsp-rust-analyzer-macro-expansion-method Formatted and highlighted result with the default function of rustic.","title":"Macro expansion"},{"location":"manual-language-docs/lsp-rust/#auto-import","text":"Get a list of possible auto import candidates with lsp-execute-code-action","title":"auto-import"},{"location":"manual-language-docs/lsp-rust/#caveats","text":"Rust Analyzer does not support disabling snippets - https://github.com/rust-analyzer/rust-analyzer/issues/2518","title":"Caveats"},{"location":"manual-language-docs/lsp-rust/#extract-signature","text":"This unmerged PR contains an example method that allows modifying the signature that is displayed by eldoc.","title":"extract signature"},{"location":"page/CHANGELOG/","text":"Changelog # Release 7.1 # Add lsp-auto-save-changed-buffers which save the changed buffers after any text edit operation by lsp-mode. Safe renamed lsp-diagnose to lsp-doctor . Add lsp-modeline-code-actions-segments for a better customization. Add Lua Language Server , Lua-LSP and improve EmmyLua. Add configuration settings for elixir-ls. Add Nix support. Add Racket support. Provided automatic installers for `lsp-clojure` (`clojure-lsp`). Added lsp-modeline-workspace-status-mode and option to disable it via lsp-modeline-workspace-status-enable . Automatically download XML language server Lemminx Add Vala support. Add Sorbet Language Server for typechecking Ruby code. Add Elixir test lenses support. Enable headerline breadcrumb by default Add Steep Language Server for typechecking Ruby code. Rename semantic highlighting -> semantic tokens. Add Phpactor Language server Release 7.0.1 # Introduced lsp-diagnostics-mode . Safe renamed lsp-flycheck-default-level -> lsp-diagnostics-flycheck-default-level Safe renamed lsp-diagnostic-package -> lsp-diagnostics-provider Dropped support for company-lsp , the suggested provider is company-capf . Moved completion features to lsp-completion.el Safe renamed lsp-prefer-capf -> lsp-completion-provider Safe renamed lsp-enable-completion-at-point -> lsp-completion-enable Release 7.0 # Support for new language server - Shttps://github.com/lighttiger2505/sqls (thanks to @v2okimochi) Provided automatic installers for elp/css/bash/purescript(thanks to @kiennq) Configurable Rust Analyzer inlay face via lsp-rust-analyzer-inlay-face . Add lsp-headerline-breadcrumb-mode which shows a breadcrumb with the document symbols on headerline when enabled. Add lsp-modeline-code-actions-mode which shows code actions on modeline when enabled. Support for Theia-based semantic highlighting has been removed in favor of the semanticTokens protocol specified by LSP 3.16. To enable it, set lsp-enable-semantic-highlighting to t . lsp-metals moved into a separate repo https://github.com/emacs-lsp/lsp-metals Breaking change: use alist instead of hast-tables for lsp-gopls-env and lsp-yaml-schemas . Add lsp-gopls-codelens defcustom to configure codelenses used for golang. Added lsp-diagnose to help users verify their performance related settings Created new website https://emacs-lsp.github.io/lsp-mode/ (thanks to @ericdallo) Implemented special handling of Clangd echo area. Added setting to disable additional text edits ( lsp-completion-enable-additional-text-edit ). Added setting to disable text detail ( lsplsp-completion-show-detail ). Add serenata language server support (thanks to @Sasanidas) Various capf improments - better handling of partial results, support for try-completions, improved responsibility, optimized filtering/sorting, etc. Remove Elixir JakeBecker support (no longer supported) Support semantic tokens protocol (thanks to @sebastiansturm) Improved flycheck integration for better performance. Implemented client side bindings for the protocol. Fixup Ignore timeouts from willSaveWaitUntil Implemented org-mode support (see https://github.com/emacs-lsp/lsp-mode/blob/master/docs/page/lsp-org.md ) Removed support for Theia semantic highlighting protocol Performed several fixes to make sure lsp-mode is working fine with Emacs 28 native compilation. Add modeline code actions support (thanks to @ericdallo). Enabled by default, use lsp-modeline-code-actions-enable to disable it. Migrated to github actions from travis. Add breadcrumb on headerline (thanks to @ericdallo). Disabled by default, can be enabled via lsp-headerline-breadcrumb-enable Migrated lsp-mode to use plists(thanks to @yyoncho, @kiennq and @ericdallo). lsp-diagnostics-modeline: perf improvement (thanks to @kiennq) Release 6.3 # Implemented company-capf integration. company-lsp is no longer supported. Dropped support for dart language server in favour of dart SDK(breaking) Added verilog support for LSP using hdl-checker Implemented call hierarchy support (available in lsp-treemacs ) Implemented support for ESLint language server. ocmalmerlin-lsp moved to ocaml-lsp-server(breaking) Added New VHDL language server https://github.com/kraigher/rust_hdl#configuration Add Nim language server integration Implement automatic downloading facilities and implemented auto-download for typescript-language-server , javascript-typescript-stdio and json-language-server . Implement metals decoration protocol Send metals/didFocusTextDocument notification on buffer change Add default keybindings and which-key integration Add support for Dhall language server Implemented debug adapter protocol support for metals Add CMake language server integration Add rust-analyzer runnables support Implemented rust-analyzer inlay hints Support pyenv for pyls Add clang-tidy specific Flycheck error explainer for the lsp checker Improve lsp-mode completion performance by suppressing non completion related features when completion is active. lsp-json: Enable formatter provider Accommodate the new :end-column and :end-column from flycheck Implement status bar for diagnostics lsp-diagnostics-modeline-mode Auto install of the html-language-server Flycheck support for diagnostic tags (3.15 spec). Adding support for GDScript language server used view mode for metals doctor buffer add texlab as tex LSP server Started new set of integration tests without using ecukes Support \"only\" param when requesting code actions Add Perl-LanguageServer support add support robot-framework language server. Implement deferred semantic highlighting Change default transport for erlang ls to stdio dart language server moved into separate repo https://github.com/emacs-lsp/lsp-dart Activate flow language server if there is flow tag in file or .flowconfig in project Add purescript-language-server (#1596) Process the $/progress messages from LSP 3.15 Display the first line of MarkupContent in eldoc (#1607) Perform willSaveWaitUntil synchronously and with shorter timeout Display images when rendering markdown(useful for latex language servers). Increase lsp-idle-delay to 0.5 Support bash language server glob pattern option (#1594) Use pagebreaks for lsp-describe-thing-at-point lsp-mode: Eliminate quadratic-time index-building for imenu. (#1616) Release 6.2 # Support dynamic rename registration Add basic support for style semantic highlighting Added Haxe language server integration Add C#-support via Roslyn. Add emmy lua support Enable plugins in typescript language server. 1079 Provide support for Ada Language server Implement right click support in lsp-mode buffers. Added built-in support for Rust Analyzer . Added support for HDL Checker server to lsp-vhdl Added support for Terraform language server. Added support for R language server (#1182) Added support for passing environment variables to language servers (#1184) Speedup lsp-mode's JSONRPC processing (\\~2 times) Add cancel-token to lsp-request-async Implement unified way to handle recurring lsp features Added support for powershell language server. Implemented inlay hints for Rust Analyzer (thanks to brotzeit ). Implemented automatic installation for C# language server. Reimplemented textDocument/signatureHelp - now the signature is displayed in lv buffer. Cancel sync requests when presssing C-g during the request. Use c-basic-offset when in cc-mode . Add support for Crystal via scry (#1218). Implement textDocument/documentColor support. Release 6.1 # Support for new languages/language servers: # Kotlin Language Server (Thanks to Jon Carr) gopls Language Server for Go XML Language Server (lsp4xml) Hack (using HHVM ) Intelephense for PHP clojure-lsp for Clojure/ClojureScipt (Thanks to Dario Benedek Fazekas) elmLS for Elm (Thanks to Daniel-V) FsAutoComplete for F# (Thanks to Reed Mullanix) Added Erlang support via erlang ls Added Dockerfile support via dockerfile-language-server-nodejs New logging options # lsp-mode now logs to buffer *lsp-log* , instead of *Messages* . This can be controlled with the variable lsp-log-max (Thanks to Thomas Fini Hansen). If lsp-print-performance is non-nil, lsp-mode will log a corresponding performance trace to *lsp-log* for every message to and from the server. The variable lsp-print-io , when non-nil will cause lsp-mode to log all messages to and from the server to a unique *lsp-io* buffer for every project root. These logs can be saved to a file and viewed using the LSP Inspector . LSP Methods # Add support for textDocument/prepareRename . If supported by the language server, all renaming operations will be tested for validity. Add support for file watches . Add support for CodeAction literals . Add API level support for folding ranges . Folding support for origami.el support is implemented by package lsp-origami . Support document links . This can be controlled using the variable lsp-enable-links . Support resource operations (edits sent from the language server can now create/modify/remove files and directories). Add support for workspace/configuration . Add new function lsp-disconnect . Added lsp-find-definition-mouse and bound to C-<down-mouse-1> Added lsp-extend-selection as a frontend of new LSP method textDocument/extendSelection Other changes # Add project logo (thanks to Jon Carr). Created an integration test suite for lsp-mode (See directory features ). If available, using the native JSON API introduced in Emacs 27.1. Tramp implementation now uses TRAMP process instead of TCP sockets (Thanks to Karsten Patzwaldt). LSP autoconfiguration adds company-lsp to the list of company backends instead of overriding it. Add lsp-mode-map . Add menu bar entries for lsp-mode . Perform before save operations ( textDocument/willSaveWaitUntil ) asynchronously. imenu support is now handled asynchronously (Thanks to Dario Gjorgjevski). Added option :none for lsp-prefer-flymake , which disabled both Flymake and Flycheck support. Changed flymake to report the errors immediately after they arrive instead of waiting flymake to call lsp-mode . Add debounce when server does not support incremental updates. Add hook lsp-after-uninitialized-hook , which stores the list of functions called after a language server has been uninitialized. Add variable lsp-symbol-highlighting-skip-current , which lets the user skip the current symbol when a given symbol is being highlighted. Add variable lsp-enabled-clients , which lets users set which defined clients are allowed to be used. Support multiple signatures while displaying eldoc text. Add variable lsp-signature-render-all , which when non-nil forces lsp-mode to only show the current active signature. Expose configuration settings for various language servers. Language servers can now be disabled with the variable lsp-disabled-clients . Improved applying changes speed. Fixed xref support for emacs 27+ Implemented automatic installation for F# language server. Added Emacs 26.x to CI Fixed handling of stderr when running over TRAMP . Implemented support for running the language server in Docker container over local files. Release 6.0 # lsp-mode now have single entry point lsp for all language and based on the major mode starts the corresponding language servers. Added flymake integration. lsp automatically enables and configures company-lsp , lsp-ui , yasnippet , or flymake if they are present so no additional configuration is needed except installing the packages. That behavior could be disabled by setting lsp-auto-configure to nil . lsp-mode ships with several predefined servers located in lsp-clients.el which does not require additional package. For the more complex Language Servers like Eclipse JDT , ccls , cquery and haskell we still require separate package due to relatively high code base. lsp-mode handles automatically server failures by asking the user whether he/she wants to restart the server. introduced new command lsp-describe-session which replaces the existing one lsp-capabilities . The command lists the folders that are part of the workspace and the servers that are associated with the corresponding folder. lsp-mode displays information about the running server and it's status in the modeline. lsp-define-stdio-client and lsp-define-tcp-client are replaced with lsp-register-client lsp rely on projectile or project.el now only for suggesting project root. Once you open new file in a project and start lsp it will provide several options(import project, blacklist project, select other directory root). Once you select a root it will be persisted and used for the next sessions. support for multiple language servers per single file and workspace. changed lsp-mode settings to more sensible defaults. Removed all synchronous calls from the server startup. Improved multi-folder support. added backends for: Bash, C++, CSS, Dart, Elixir, Fortran, Go, Groovy, HTML, Javascript/Typescript, Javascript/Typescript, Ocaml, PHP, Python, Ruby, Rust, Vue, Flow","title":"Changelog"},{"location":"page/CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"page/CHANGELOG/#release-71","text":"Add lsp-auto-save-changed-buffers which save the changed buffers after any text edit operation by lsp-mode. Safe renamed lsp-diagnose to lsp-doctor . Add lsp-modeline-code-actions-segments for a better customization. Add Lua Language Server , Lua-LSP and improve EmmyLua. Add configuration settings for elixir-ls. Add Nix support. Add Racket support. Provided automatic installers for `lsp-clojure` (`clojure-lsp`). Added lsp-modeline-workspace-status-mode and option to disable it via lsp-modeline-workspace-status-enable . Automatically download XML language server Lemminx Add Vala support. Add Sorbet Language Server for typechecking Ruby code. Add Elixir test lenses support. Enable headerline breadcrumb by default Add Steep Language Server for typechecking Ruby code. Rename semantic highlighting -> semantic tokens. Add Phpactor Language server","title":"Release 7.1"},{"location":"page/CHANGELOG/#release-701","text":"Introduced lsp-diagnostics-mode . Safe renamed lsp-flycheck-default-level -> lsp-diagnostics-flycheck-default-level Safe renamed lsp-diagnostic-package -> lsp-diagnostics-provider Dropped support for company-lsp , the suggested provider is company-capf . Moved completion features to lsp-completion.el Safe renamed lsp-prefer-capf -> lsp-completion-provider Safe renamed lsp-enable-completion-at-point -> lsp-completion-enable","title":"Release 7.0.1"},{"location":"page/CHANGELOG/#release-70","text":"Support for new language server - Shttps://github.com/lighttiger2505/sqls (thanks to @v2okimochi) Provided automatic installers for elp/css/bash/purescript(thanks to @kiennq) Configurable Rust Analyzer inlay face via lsp-rust-analyzer-inlay-face . Add lsp-headerline-breadcrumb-mode which shows a breadcrumb with the document symbols on headerline when enabled. Add lsp-modeline-code-actions-mode which shows code actions on modeline when enabled. Support for Theia-based semantic highlighting has been removed in favor of the semanticTokens protocol specified by LSP 3.16. To enable it, set lsp-enable-semantic-highlighting to t . lsp-metals moved into a separate repo https://github.com/emacs-lsp/lsp-metals Breaking change: use alist instead of hast-tables for lsp-gopls-env and lsp-yaml-schemas . Add lsp-gopls-codelens defcustom to configure codelenses used for golang. Added lsp-diagnose to help users verify their performance related settings Created new website https://emacs-lsp.github.io/lsp-mode/ (thanks to @ericdallo) Implemented special handling of Clangd echo area. Added setting to disable additional text edits ( lsp-completion-enable-additional-text-edit ). Added setting to disable text detail ( lsplsp-completion-show-detail ). Add serenata language server support (thanks to @Sasanidas) Various capf improments - better handling of partial results, support for try-completions, improved responsibility, optimized filtering/sorting, etc. Remove Elixir JakeBecker support (no longer supported) Support semantic tokens protocol (thanks to @sebastiansturm) Improved flycheck integration for better performance. Implemented client side bindings for the protocol. Fixup Ignore timeouts from willSaveWaitUntil Implemented org-mode support (see https://github.com/emacs-lsp/lsp-mode/blob/master/docs/page/lsp-org.md ) Removed support for Theia semantic highlighting protocol Performed several fixes to make sure lsp-mode is working fine with Emacs 28 native compilation. Add modeline code actions support (thanks to @ericdallo). Enabled by default, use lsp-modeline-code-actions-enable to disable it. Migrated to github actions from travis. Add breadcrumb on headerline (thanks to @ericdallo). Disabled by default, can be enabled via lsp-headerline-breadcrumb-enable Migrated lsp-mode to use plists(thanks to @yyoncho, @kiennq and @ericdallo). lsp-diagnostics-modeline: perf improvement (thanks to @kiennq)","title":"Release 7.0"},{"location":"page/CHANGELOG/#release-63","text":"Implemented company-capf integration. company-lsp is no longer supported. Dropped support for dart language server in favour of dart SDK(breaking) Added verilog support for LSP using hdl-checker Implemented call hierarchy support (available in lsp-treemacs ) Implemented support for ESLint language server. ocmalmerlin-lsp moved to ocaml-lsp-server(breaking) Added New VHDL language server https://github.com/kraigher/rust_hdl#configuration Add Nim language server integration Implement automatic downloading facilities and implemented auto-download for typescript-language-server , javascript-typescript-stdio and json-language-server . Implement metals decoration protocol Send metals/didFocusTextDocument notification on buffer change Add default keybindings and which-key integration Add support for Dhall language server Implemented debug adapter protocol support for metals Add CMake language server integration Add rust-analyzer runnables support Implemented rust-analyzer inlay hints Support pyenv for pyls Add clang-tidy specific Flycheck error explainer for the lsp checker Improve lsp-mode completion performance by suppressing non completion related features when completion is active. lsp-json: Enable formatter provider Accommodate the new :end-column and :end-column from flycheck Implement status bar for diagnostics lsp-diagnostics-modeline-mode Auto install of the html-language-server Flycheck support for diagnostic tags (3.15 spec). Adding support for GDScript language server used view mode for metals doctor buffer add texlab as tex LSP server Started new set of integration tests without using ecukes Support \"only\" param when requesting code actions Add Perl-LanguageServer support add support robot-framework language server. Implement deferred semantic highlighting Change default transport for erlang ls to stdio dart language server moved into separate repo https://github.com/emacs-lsp/lsp-dart Activate flow language server if there is flow tag in file or .flowconfig in project Add purescript-language-server (#1596) Process the $/progress messages from LSP 3.15 Display the first line of MarkupContent in eldoc (#1607) Perform willSaveWaitUntil synchronously and with shorter timeout Display images when rendering markdown(useful for latex language servers). Increase lsp-idle-delay to 0.5 Support bash language server glob pattern option (#1594) Use pagebreaks for lsp-describe-thing-at-point lsp-mode: Eliminate quadratic-time index-building for imenu. (#1616)","title":"Release 6.3"},{"location":"page/CHANGELOG/#release-62","text":"Support dynamic rename registration Add basic support for style semantic highlighting Added Haxe language server integration Add C#-support via Roslyn. Add emmy lua support Enable plugins in typescript language server. 1079 Provide support for Ada Language server Implement right click support in lsp-mode buffers. Added built-in support for Rust Analyzer . Added support for HDL Checker server to lsp-vhdl Added support for Terraform language server. Added support for R language server (#1182) Added support for passing environment variables to language servers (#1184) Speedup lsp-mode's JSONRPC processing (\\~2 times) Add cancel-token to lsp-request-async Implement unified way to handle recurring lsp features Added support for powershell language server. Implemented inlay hints for Rust Analyzer (thanks to brotzeit ). Implemented automatic installation for C# language server. Reimplemented textDocument/signatureHelp - now the signature is displayed in lv buffer. Cancel sync requests when presssing C-g during the request. Use c-basic-offset when in cc-mode . Add support for Crystal via scry (#1218). Implement textDocument/documentColor support.","title":"Release 6.2"},{"location":"page/CHANGELOG/#release-61","text":"","title":"Release 6.1"},{"location":"page/CHANGELOG/#support-for-new-languageslanguage-servers","text":"Kotlin Language Server (Thanks to Jon Carr) gopls Language Server for Go XML Language Server (lsp4xml) Hack (using HHVM ) Intelephense for PHP clojure-lsp for Clojure/ClojureScipt (Thanks to Dario Benedek Fazekas) elmLS for Elm (Thanks to Daniel-V) FsAutoComplete for F# (Thanks to Reed Mullanix) Added Erlang support via erlang ls Added Dockerfile support via dockerfile-language-server-nodejs","title":"Support for new languages/language servers:"},{"location":"page/CHANGELOG/#new-logging-options","text":"lsp-mode now logs to buffer *lsp-log* , instead of *Messages* . This can be controlled with the variable lsp-log-max (Thanks to Thomas Fini Hansen). If lsp-print-performance is non-nil, lsp-mode will log a corresponding performance trace to *lsp-log* for every message to and from the server. The variable lsp-print-io , when non-nil will cause lsp-mode to log all messages to and from the server to a unique *lsp-io* buffer for every project root. These logs can be saved to a file and viewed using the LSP Inspector .","title":"New logging options"},{"location":"page/CHANGELOG/#lsp-methods","text":"Add support for textDocument/prepareRename . If supported by the language server, all renaming operations will be tested for validity. Add support for file watches . Add support for CodeAction literals . Add API level support for folding ranges . Folding support for origami.el support is implemented by package lsp-origami . Support document links . This can be controlled using the variable lsp-enable-links . Support resource operations (edits sent from the language server can now create/modify/remove files and directories). Add support for workspace/configuration . Add new function lsp-disconnect . Added lsp-find-definition-mouse and bound to C-<down-mouse-1> Added lsp-extend-selection as a frontend of new LSP method textDocument/extendSelection","title":"LSP Methods"},{"location":"page/CHANGELOG/#other-changes","text":"Add project logo (thanks to Jon Carr). Created an integration test suite for lsp-mode (See directory features ). If available, using the native JSON API introduced in Emacs 27.1. Tramp implementation now uses TRAMP process instead of TCP sockets (Thanks to Karsten Patzwaldt). LSP autoconfiguration adds company-lsp to the list of company backends instead of overriding it. Add lsp-mode-map . Add menu bar entries for lsp-mode . Perform before save operations ( textDocument/willSaveWaitUntil ) asynchronously. imenu support is now handled asynchronously (Thanks to Dario Gjorgjevski). Added option :none for lsp-prefer-flymake , which disabled both Flymake and Flycheck support. Changed flymake to report the errors immediately after they arrive instead of waiting flymake to call lsp-mode . Add debounce when server does not support incremental updates. Add hook lsp-after-uninitialized-hook , which stores the list of functions called after a language server has been uninitialized. Add variable lsp-symbol-highlighting-skip-current , which lets the user skip the current symbol when a given symbol is being highlighted. Add variable lsp-enabled-clients , which lets users set which defined clients are allowed to be used. Support multiple signatures while displaying eldoc text. Add variable lsp-signature-render-all , which when non-nil forces lsp-mode to only show the current active signature. Expose configuration settings for various language servers. Language servers can now be disabled with the variable lsp-disabled-clients . Improved applying changes speed. Fixed xref support for emacs 27+ Implemented automatic installation for F# language server. Added Emacs 26.x to CI Fixed handling of stderr when running over TRAMP . Implemented support for running the language server in Docker container over local files.","title":"Other changes"},{"location":"page/CHANGELOG/#release-60","text":"lsp-mode now have single entry point lsp for all language and based on the major mode starts the corresponding language servers. Added flymake integration. lsp automatically enables and configures company-lsp , lsp-ui , yasnippet , or flymake if they are present so no additional configuration is needed except installing the packages. That behavior could be disabled by setting lsp-auto-configure to nil . lsp-mode ships with several predefined servers located in lsp-clients.el which does not require additional package. For the more complex Language Servers like Eclipse JDT , ccls , cquery and haskell we still require separate package due to relatively high code base. lsp-mode handles automatically server failures by asking the user whether he/she wants to restart the server. introduced new command lsp-describe-session which replaces the existing one lsp-capabilities . The command lists the folders that are part of the workspace and the servers that are associated with the corresponding folder. lsp-mode displays information about the running server and it's status in the modeline. lsp-define-stdio-client and lsp-define-tcp-client are replaced with lsp-register-client lsp rely on projectile or project.el now only for suggesting project root. Once you open new file in a project and start lsp it will provide several options(import project, blacklist project, select other directory root). Once you select a root it will be persisted and used for the next sessions. support for multiple language servers per single file and workspace. changed lsp-mode settings to more sensible defaults. Removed all synchronous calls from the server startup. Improved multi-folder support. added backends for: Bash, C++, CSS, Dart, Elixir, Fortran, Go, Groovy, HTML, Javascript/Typescript, Javascript/Typescript, Ocaml, PHP, Python, Ruby, Rust, Vue, Flow","title":"Release 6.0"},{"location":"page/adding-new-language/","text":"Adding support for languages # Registering server # Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of lsp-mode.el for the additional settings supported on registration time. lsp-language-id-configuration must be updated to contain the corresponding mode -> language id - in this case (python-mode . \"python\") ( defvar lsp-language-id-configuration ' ( ... ( python-mode . \"python\" ) ... )) ;; if you are adding the support for your language server in separate repo use ;; (add-to-list 'lsp-language-id-configuration '(python-mode . \"python\")) ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection \"pyls\" ) :major-modes ' ( python-mode ) :server-id 'pyls )) If the language server supports environment variables to control additional behavior, you can register that by using the :environment-fn function, like the Bash language client does: ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection ' ( \"bash-language-server\" \"start\" )) :major-modes ' ( sh-mode ) :priority -1 :environment-fn ( lambda () ' (( \"EXPLAINSHELL_ENDPOINT\" . lsp-bash-explainshell-endpoint ) ( \"HIGHLIGHT_PARSING_ERRORS\" . lsp-bash-highlight-parsing-errors ))) :server-id 'bash-ls )) lsp-bash-explainshell-endpoint and lsp-bash-highlight-parsing-errors are language client defcustom that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with lsp-restart-workspace for the changes to be applied. Sections # lsp-mode provides tools to bridge emacs defcustom as a language configuration sections properties(see specification workspace/configuration ). In addition you may use lsp-generate-settings from Generate Settings script to generate defcustom from package.json VScode plugin manifest. Example: ( defcustom lsp-foo-language-server-property \"bar\" \"Demo property.\" :group 'foo-ls :risky t ) ( lsp-register-custom-settings ' (( \"foo.section.property\" lsp-foo-language-server-property ))) ( lsp-configuration-section \"foo\" ) ;; => ((\"foo\" (\"settings\" (\"property\" . \"bar\")))) Documentation # Add the new language server to the lsp-clients.json file sorted by the full-name key alphabetically. Create a new navigation entry in mkdocs.yml file.","title":"Adding new language"},{"location":"page/adding-new-language/#adding-support-for-languages","text":"","title":"Adding support for languages"},{"location":"page/adding-new-language/#registering-server","text":"Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of lsp-mode.el for the additional settings supported on registration time. lsp-language-id-configuration must be updated to contain the corresponding mode -> language id - in this case (python-mode . \"python\") ( defvar lsp-language-id-configuration ' ( ... ( python-mode . \"python\" ) ... )) ;; if you are adding the support for your language server in separate repo use ;; (add-to-list 'lsp-language-id-configuration '(python-mode . \"python\")) ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection \"pyls\" ) :major-modes ' ( python-mode ) :server-id 'pyls )) If the language server supports environment variables to control additional behavior, you can register that by using the :environment-fn function, like the Bash language client does: ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection ' ( \"bash-language-server\" \"start\" )) :major-modes ' ( sh-mode ) :priority -1 :environment-fn ( lambda () ' (( \"EXPLAINSHELL_ENDPOINT\" . lsp-bash-explainshell-endpoint ) ( \"HIGHLIGHT_PARSING_ERRORS\" . lsp-bash-highlight-parsing-errors ))) :server-id 'bash-ls )) lsp-bash-explainshell-endpoint and lsp-bash-highlight-parsing-errors are language client defcustom that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with lsp-restart-workspace for the changes to be applied.","title":"Registering server"},{"location":"page/adding-new-language/#sections","text":"lsp-mode provides tools to bridge emacs defcustom as a language configuration sections properties(see specification workspace/configuration ). In addition you may use lsp-generate-settings from Generate Settings script to generate defcustom from package.json VScode plugin manifest. Example: ( defcustom lsp-foo-language-server-property \"bar\" \"Demo property.\" :group 'foo-ls :risky t ) ( lsp-register-custom-settings ' (( \"foo.section.property\" lsp-foo-language-server-property ))) ( lsp-configuration-section \"foo\" ) ;; => ((\"foo\" (\"settings\" (\"property\" . \"bar\"))))","title":"Sections"},{"location":"page/adding-new-language/#documentation","text":"Add the new language server to the lsp-clients.json file sorted by the full-name key alphabetically. Create a new navigation entry in mkdocs.yml file.","title":"Documentation"},{"location":"page/faq/","text":"FAQ # How do I troubleshoot \"Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)\" ? This message indicates that the language server has crashed for some reason. You may check the server stderr which is *FOO-LS::stderr* . If you get this try to run the exact command that lsp-mode is running in the terminal. You may find it in *lsp-log* buffer. How to configure a server with local variables? Add lsp server call to hack-local-variables-hook which runs right after the local variables are loaded. ( add-hook 'hack-local-variables-hook ( lambda () ( when ( derived-mode-p 'XXX-mode ) ( lsp )))) I have multiple language servers registered for language FOO. Which one will be used when opening a project? The one with highest priority wins. lsp-clients.el predefined servers have priority -1, lower than external packages (priority 0 if unspecified). If a server is registered with :add-on? flag set to t it will be started in parallel to the other servers that are registered for the current mode. I have multiple language servers for language FOO and I want to select the server per project, what can I do? You may create dir-local for each of the projects and specify list of lsp-enabled-clients . This will narrow the list of the clients that are going to be tested for the project. The completion does not work fine and inserts arguments and placeholders, what I am doing wrong? make sure you have installed yasnippet and you have yasnippet minor mode enabled. I am getting \"Package \u2018spinner-1.7.3\u2019 is unavailable\" when trying to install lsp-mode . This is caused by GPG keys used by the ELPA package manager not being up to date. You may fix by installing: gnu-elpa-keyring-update The flycheck does not work in typescript , html and javascript blocks in vue-mode . How to fix that? This is caused by the fact that vue-mode uses multiple major modes in single file and the lsp-ui checker may not associated with the major mode at point. You could fix that by adding the following lines to your config. ( with-eval-after-load 'lsp-mode ( mapc #' lsp-flycheck-add-mode ' ( typescript-mode js-mode css-mode vue-html-mode ))) I have disabled snippets and Rust Analyzer server inserts redundant $0 when performing completion? Rust Analyzer does not support disabling snippets - see https://github.com/rust-analyzer/rust-analyzer/issues/2518 How do I force lsp-mode to forget the workspace folders for multi root servers so the workspace folders are added on demand? Use the following snippet: ( advice-add 'lsp :before ( lambda ( &rest _args ) ( eval ' ( setf ( lsp-session-server-id->folders ( lsp-session )) ( ht )))))","title":"FAQ"},{"location":"page/faq/#faq","text":"How do I troubleshoot \"Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)\" ? This message indicates that the language server has crashed for some reason. You may check the server stderr which is *FOO-LS::stderr* . If you get this try to run the exact command that lsp-mode is running in the terminal. You may find it in *lsp-log* buffer. How to configure a server with local variables? Add lsp server call to hack-local-variables-hook which runs right after the local variables are loaded. ( add-hook 'hack-local-variables-hook ( lambda () ( when ( derived-mode-p 'XXX-mode ) ( lsp )))) I have multiple language servers registered for language FOO. Which one will be used when opening a project? The one with highest priority wins. lsp-clients.el predefined servers have priority -1, lower than external packages (priority 0 if unspecified). If a server is registered with :add-on? flag set to t it will be started in parallel to the other servers that are registered for the current mode. I have multiple language servers for language FOO and I want to select the server per project, what can I do? You may create dir-local for each of the projects and specify list of lsp-enabled-clients . This will narrow the list of the clients that are going to be tested for the project. The completion does not work fine and inserts arguments and placeholders, what I am doing wrong? make sure you have installed yasnippet and you have yasnippet minor mode enabled. I am getting \"Package \u2018spinner-1.7.3\u2019 is unavailable\" when trying to install lsp-mode . This is caused by GPG keys used by the ELPA package manager not being up to date. You may fix by installing: gnu-elpa-keyring-update The flycheck does not work in typescript , html and javascript blocks in vue-mode . How to fix that? This is caused by the fact that vue-mode uses multiple major modes in single file and the lsp-ui checker may not associated with the major mode at point. You could fix that by adding the following lines to your config. ( with-eval-after-load 'lsp-mode ( mapc #' lsp-flycheck-add-mode ' ( typescript-mode js-mode css-mode vue-html-mode ))) I have disabled snippets and Rust Analyzer server inserts redundant $0 when performing completion? Rust Analyzer does not support disabling snippets - see https://github.com/rust-analyzer/rust-analyzer/issues/2518 How do I force lsp-mode to forget the workspace folders for multi root servers so the workspace folders are added on demand? Use the following snippet: ( advice-add 'lsp :before ( lambda ( &rest _args ) ( eval ' ( setf ( lsp-session-server-id->folders ( lsp-session )) ( ht )))))","title":"FAQ"},{"location":"page/gallery/","text":"Gallery # RUST Completion # Typescript references using lsp-ui # Debugging Python using dap-mode # Call hierarchy via ccls # Metals Doctor # Flutter debugging # Semantic highlighting # As provided by clangd, built from unreleased 10.0 branch, in this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as ~auto~): clang-tidy error explanations # From the clangd language server:","title":"Gallery"},{"location":"page/gallery/#gallery","text":"","title":"Gallery"},{"location":"page/gallery/#rust-completion","text":"","title":"RUST Completion"},{"location":"page/gallery/#typescript-references-using-lsp-ui","text":"","title":"Typescript references using lsp-ui"},{"location":"page/gallery/#debugging-python-using-dap-mode","text":"","title":"Debugging Python using dap-mode"},{"location":"page/gallery/#call-hierarchy-via-ccls","text":"","title":"Call hierarchy via ccls"},{"location":"page/gallery/#metals-doctor","text":"","title":"Metals Doctor"},{"location":"page/gallery/#flutter-debugging","text":"","title":"Flutter debugging"},{"location":"page/gallery/#semantic-highlighting","text":"As provided by clangd, built from unreleased 10.0 branch, in this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as ~auto~):","title":"Semantic highlighting"},{"location":"page/gallery/#clang-tidy-error-explanations","text":"From the clangd language server:","title":"clang-tidy error explanations"},{"location":"page/installation/","text":"Installation # You need first lsp-mode , that is a Emacs client for an LSP server. Then you need to install the specific LSP server for your language. Client # lsp-mode has multiple ways to install it. Manually via MELPA # The recommended way to install lsp-mode is via package.el - the built-in package manager in Emacs. lsp-mode is available on the two major package.el community maintained repos - MELPA Stable and MELPA . M-x package-install RET lsp-mode RET When updating your packages with package.el , we recommend the following procedure: 1. Delete your LSP-related packages 2. Restart Emacs 3. Install the new versions of the packages. Doom Emacs # Doom Emacs has a module to install and configure lsp-mode automatically, you just need to add lsp below :tools in your init.el . To add lsp-mode support to some language, you can add the +lsp flag to the language you want. Example: init.el ... :lang ( clojure +lsp ) ( dart +lsp ) ( java +lsp ) ... For Doom Emacs module flags and more information, check the doom-emacs lsp module documentation . Spacemacs # lsp-mode is included in spacemacs develop branch. Add lsp to dotspacemacs-configuration-layers and configure the language that you want to use to be backed by lsp backend. Vanilla Emacs # You could go minimal and use lsp-mode as it is without external packages with the built-in flymake and completion-at-point or you could install the following extensions for better experience: lsp-ui for fancy sideline, popup documentation, VScode-like peek UI, etc. flycheck if you prefer the more popular flycheck over renewed flymake . lsp-mode will automatically pick it up. company-mode for completion popups. lsp-treemacs for various tree based UI controls (symbols, errors overview, call hierarchy, etc.) helm-lsp provides on type completion alternative of xref-apropos using helm . lsp-ivy provides on type completion alternative of xref-apropos using ivy . dap-mode if your language is supported by the debugger. ;; if you want to change prefix for lsp-mode keybindings. ( setq lsp-keymap-prefix \"s-l\" ) ( require 'lsp-mode ) ( add-hook 'XXX-mode-hook #' lsp ) Where XXX could be major mode like python , java , c++ . Alternatively, if you want to minimize your configuration you may use prog-mode-hook . In case you do that, lsp will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, lsp-mode will automatically detect and configure lsp-ui and company-mode . To turn off that behavior you could set lsp-auto-configure to nil . To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( add-hook 'XXX-mode-hook #' lsp-deferred ) use-package # Replace (require 'lsp-mode) with the following if you use use-package. ;; set prefix for lsp-command-keymap (few alternatives - \"C-l\", \"C-c l\") ( setq lsp-keymap-prefix \"s-l\" ) ( use-package lsp-mode :hook ( ;; replace XXX-mode with concrete major-mode(e. g. python-mode) ( XXX-mode . lsp ) ;; if you want which-key integration ( lsp-mode . lsp-enable-which-key-integration )) :commands lsp ) ;; optionally ( use-package lsp-ui :commands lsp-ui-mode ) ;; if you are helm user ( use-package helm-lsp :commands helm-lsp-workspace-symbol ) ;; if you are ivy user ( use-package lsp-ivy :commands lsp-ivy-workspace-symbol ) ( use-package lsp-treemacs :commands lsp-treemacs-errors-list ) ;; optionally if you want to use debugger ( use-package dap-mode ) ;; (use-package dap-LANGUAGE) to load the dap adapter for your language ;; optional if you want which-key integration ( use-package which-key :config ( which-key-mode )) To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( use-package lsp-mode :hook ( XXX-mode . lsp-deferred ) :commands ( lsp lsp-deferred )) Install a language server # For instructions on how to install a server for your language, check the available supported servers .","title":"Installation"},{"location":"page/installation/#installation","text":"You need first lsp-mode , that is a Emacs client for an LSP server. Then you need to install the specific LSP server for your language.","title":"Installation"},{"location":"page/installation/#client","text":"lsp-mode has multiple ways to install it.","title":"Client"},{"location":"page/installation/#manually-via-melpa","text":"The recommended way to install lsp-mode is via package.el - the built-in package manager in Emacs. lsp-mode is available on the two major package.el community maintained repos - MELPA Stable and MELPA . M-x package-install RET lsp-mode RET When updating your packages with package.el , we recommend the following procedure: 1. Delete your LSP-related packages 2. Restart Emacs 3. Install the new versions of the packages.","title":"Manually via MELPA"},{"location":"page/installation/#doom-emacs","text":"Doom Emacs has a module to install and configure lsp-mode automatically, you just need to add lsp below :tools in your init.el . To add lsp-mode support to some language, you can add the +lsp flag to the language you want. Example: init.el ... :lang ( clojure +lsp ) ( dart +lsp ) ( java +lsp ) ... For Doom Emacs module flags and more information, check the doom-emacs lsp module documentation .","title":"Doom Emacs"},{"location":"page/installation/#spacemacs","text":"lsp-mode is included in spacemacs develop branch. Add lsp to dotspacemacs-configuration-layers and configure the language that you want to use to be backed by lsp backend.","title":"Spacemacs"},{"location":"page/installation/#vanilla-emacs","text":"You could go minimal and use lsp-mode as it is without external packages with the built-in flymake and completion-at-point or you could install the following extensions for better experience: lsp-ui for fancy sideline, popup documentation, VScode-like peek UI, etc. flycheck if you prefer the more popular flycheck over renewed flymake . lsp-mode will automatically pick it up. company-mode for completion popups. lsp-treemacs for various tree based UI controls (symbols, errors overview, call hierarchy, etc.) helm-lsp provides on type completion alternative of xref-apropos using helm . lsp-ivy provides on type completion alternative of xref-apropos using ivy . dap-mode if your language is supported by the debugger. ;; if you want to change prefix for lsp-mode keybindings. ( setq lsp-keymap-prefix \"s-l\" ) ( require 'lsp-mode ) ( add-hook 'XXX-mode-hook #' lsp ) Where XXX could be major mode like python , java , c++ . Alternatively, if you want to minimize your configuration you may use prog-mode-hook . In case you do that, lsp will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, lsp-mode will automatically detect and configure lsp-ui and company-mode . To turn off that behavior you could set lsp-auto-configure to nil . To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( add-hook 'XXX-mode-hook #' lsp-deferred )","title":"Vanilla Emacs"},{"location":"page/installation/#use-package","text":"Replace (require 'lsp-mode) with the following if you use use-package. ;; set prefix for lsp-command-keymap (few alternatives - \"C-l\", \"C-c l\") ( setq lsp-keymap-prefix \"s-l\" ) ( use-package lsp-mode :hook ( ;; replace XXX-mode with concrete major-mode(e. g. python-mode) ( XXX-mode . lsp ) ;; if you want which-key integration ( lsp-mode . lsp-enable-which-key-integration )) :commands lsp ) ;; optionally ( use-package lsp-ui :commands lsp-ui-mode ) ;; if you are helm user ( use-package helm-lsp :commands helm-lsp-workspace-symbol ) ;; if you are ivy user ( use-package lsp-ivy :commands lsp-ivy-workspace-symbol ) ( use-package lsp-treemacs :commands lsp-treemacs-errors-list ) ;; optionally if you want to use debugger ( use-package dap-mode ) ;; (use-package dap-LANGUAGE) to load the dap adapter for your language ;; optional if you want which-key integration ( use-package which-key :config ( which-key-mode )) To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( use-package lsp-mode :hook ( XXX-mode . lsp-deferred ) :commands ( lsp lsp-deferred ))","title":"use-package"},{"location":"page/installation/#install-a-language-server","text":"For instructions on how to install a server for your language, check the available supported servers .","title":"Install a language server"},{"location":"page/keybindings/","text":"Keybindings # When using lsp-mode most of the features depend on server capabilities. lsp-mode provides default bindings which are dynamically enabled/disabled based on the server functionality. All the commands are configured lsp-command-map which is bound to lsp-keymap-prefix (default s-l ). Keybinding Description s-l s s Entry point for the server startup. s-l s r Restart language server s-l s q Shutdown language server s-l s d Describes current session s-l s D Disconnect the buffer from the language server keeping the server running. s-l = = Ask the server to format this document. s-l = r Ask the server to format the region, or if none is selected, the current line. s-l F a Add new project root to the list of workspace folders. s-l F r Remove project root from the list of workspace folders. s-l F b Remove project root from the workspace blacklist. s-l T l Toggle code-lens overlays. s-l T L Toggle client-server protocol logging. s-l T h Toggle symbol highlighting. s-l T S Toggle minor mode for showing information for current line in sideline. (requires lsp-ui ) s-l T d Toggle minor mode for showing hover information in child frame. (requires lsp-ui ) s-l T s Toggle signature auto activate. s-l T f Toggle on type formatting. s-l T T Toggle global minor mode for synchronizing lsp-mode workspace folders and treemacs projects. (requires lsp-treemacs ) s-l g g Find definitions of the symbol under point. s-l g r Find references of the symbol under point. s-l g i Find implementations of the symbol under point. s-l g t Find type definitions of the symbol under point. s-l g d Find declarations of the symbol under point. s-l g h Show the incoming call hierarchy for the symbol at point. (requires lsp-treemacs ) s-l g a Find all meaningful symbols that match pattern. s-l h h Display the type signature and documentation of the thing at s-l h s Activate signature help. s-l h g Trigger display hover information popup and hide it on next typing. s-l r r Rename the symbol (and all references to it). s-l r o Perform the source.organizeImports code action, if available. s-l a a Execute code action. s-l a l Click lsp lens using \u2018avy\u2019 package. s-l a h Highlight symbol at point. s-l G g Peek definitions to the identifier at point. (requires lsp-ui ) s-l G r Peek references to the identifier at point. (requires lsp-ui ) s-l G i Peek implementation locations of the symbol at point. (requires lsp-ui ) s-l G s Peek symbols in the workspace. (requires lsp-ui ) which-key integration # To enable which-key integration in the active major mode for lsp-mode-map you will need to call the lsp-enable-which-key-integration function. This could be done when lsp-mode starts with the following: ( with-eval-after-load 'lsp-mode ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration )) You can also enable which-key integration for all major modes by passing t as a parameter. This is useful for buffers that can use multiple major modes like those using vue-mode .","title":"Keybindings"},{"location":"page/keybindings/#keybindings","text":"When using lsp-mode most of the features depend on server capabilities. lsp-mode provides default bindings which are dynamically enabled/disabled based on the server functionality. All the commands are configured lsp-command-map which is bound to lsp-keymap-prefix (default s-l ). Keybinding Description s-l s s Entry point for the server startup. s-l s r Restart language server s-l s q Shutdown language server s-l s d Describes current session s-l s D Disconnect the buffer from the language server keeping the server running. s-l = = Ask the server to format this document. s-l = r Ask the server to format the region, or if none is selected, the current line. s-l F a Add new project root to the list of workspace folders. s-l F r Remove project root from the list of workspace folders. s-l F b Remove project root from the workspace blacklist. s-l T l Toggle code-lens overlays. s-l T L Toggle client-server protocol logging. s-l T h Toggle symbol highlighting. s-l T S Toggle minor mode for showing information for current line in sideline. (requires lsp-ui ) s-l T d Toggle minor mode for showing hover information in child frame. (requires lsp-ui ) s-l T s Toggle signature auto activate. s-l T f Toggle on type formatting. s-l T T Toggle global minor mode for synchronizing lsp-mode workspace folders and treemacs projects. (requires lsp-treemacs ) s-l g g Find definitions of the symbol under point. s-l g r Find references of the symbol under point. s-l g i Find implementations of the symbol under point. s-l g t Find type definitions of the symbol under point. s-l g d Find declarations of the symbol under point. s-l g h Show the incoming call hierarchy for the symbol at point. (requires lsp-treemacs ) s-l g a Find all meaningful symbols that match pattern. s-l h h Display the type signature and documentation of the thing at s-l h s Activate signature help. s-l h g Trigger display hover information popup and hide it on next typing. s-l r r Rename the symbol (and all references to it). s-l r o Perform the source.organizeImports code action, if available. s-l a a Execute code action. s-l a l Click lsp lens using \u2018avy\u2019 package. s-l a h Highlight symbol at point. s-l G g Peek definitions to the identifier at point. (requires lsp-ui ) s-l G r Peek references to the identifier at point. (requires lsp-ui ) s-l G i Peek implementation locations of the symbol at point. (requires lsp-ui ) s-l G s Peek symbols in the workspace. (requires lsp-ui )","title":"Keybindings"},{"location":"page/keybindings/#which-key-integration","text":"To enable which-key integration in the active major mode for lsp-mode-map you will need to call the lsp-enable-which-key-integration function. This could be done when lsp-mode starts with the following: ( with-eval-after-load 'lsp-mode ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration )) You can also enable which-key integration for all major modes by passing t as a parameter. This is useful for buffers that can use multiple major modes like those using vue-mode .","title":"which-key integration"},{"location":"page/languages/","text":"Languages # On left, you can find all currently supported languages. Some languages have to be installed manually. Others can be installed with M-x lsp-install-server . See the language's page for the supported installation method.","title":"Languages"},{"location":"page/languages/#languages","text":"On left, you can find all currently supported languages. Some languages have to be installed manually. Others can be installed with M-x lsp-install-server . See the language's page for the supported installation method.","title":"Languages"},{"location":"page/limitations/","text":"Limitations # File watches # When some of the workspaces that are active in the current project requests file notifications via workspace/didChangeWatchedFiles , lsp-mode will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via lsp-enable-file-watchers (you may use dir-locals).","title":"Limitations"},{"location":"page/limitations/#limitations","text":"","title":"Limitations"},{"location":"page/limitations/#file-watches","text":"When some of the workspaces that are active in the current project requests file notifications via workspace/didChangeWatchedFiles , lsp-mode will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via lsp-enable-file-watchers (you may use dir-locals).","title":"File watches"},{"location":"page/lsp-ada/","text":"Ada # Server # For more information about the LSP server, check ada_language_server . Installation # For more instructions on how to install manually, check here . Debugger: Yes (gdb) # Available configurations # lsp-ada-project-file # Default: default.gpr Set the project file full path to configure the language server with. The ~ prefix (for the user home directory) is supported. See https://github.com/AdaCore/ada_language_server for a per-project configuration example. lsp-ada-option-charset # Default: UTF-8 The charset to use by the Ada Language server. Defaults to \u2019UTF-8\u2019. lsp-ada-enable-diagnostics # Default: t A boolean to disable diagnostics. Defaults to true.","title":"Ada"},{"location":"page/lsp-ada/#ada","text":"","title":"Ada"},{"location":"page/lsp-ada/#server","text":"For more information about the LSP server, check ada_language_server .","title":"Server"},{"location":"page/lsp-ada/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-ada/#debugger-yes-gdb","text":"","title":"Debugger: Yes (gdb)"},{"location":"page/lsp-ada/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-ada/#lsp-ada-project-file","text":"Default: default.gpr Set the project file full path to configure the language server with. The ~ prefix (for the user home directory) is supported. See https://github.com/AdaCore/ada_language_server for a per-project configuration example.","title":"lsp-ada-project-file"},{"location":"page/lsp-ada/#lsp-ada-option-charset","text":"Default: UTF-8 The charset to use by the Ada Language server. Defaults to \u2019UTF-8\u2019.","title":"lsp-ada-option-charset"},{"location":"page/lsp-ada/#lsp-ada-enable-diagnostics","text":"Default: t A boolean to disable diagnostics. Defaults to true.","title":"lsp-ada-enable-diagnostics"},{"location":"page/lsp-angular/","text":"Angular # Server # For more information about the LSP server, check vscode-ng-language-service . Installation # npm install -g @angular/language-service@next typescript @angular/language-server For more instructions on how to install manually, check here . Debugger: Not relevant # Available configurations # lsp-clients-angular-language-server-command # Default: (node /usr/lib/node_modules/@angular/language-server --ngProbeLocations /usr/lib/node_modules --tsProbeLocations /usr/lib/node_modules --stdio) The command that starts the angular language server.","title":"Angular"},{"location":"page/lsp-angular/#angular","text":"","title":"Angular"},{"location":"page/lsp-angular/#server","text":"For more information about the LSP server, check vscode-ng-language-service .","title":"Server"},{"location":"page/lsp-angular/#installation","text":"npm install -g @angular/language-service@next typescript @angular/language-server For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-angular/#debugger-not-relevant","text":"","title":"Debugger: Not relevant"},{"location":"page/lsp-angular/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-angular/#lsp-clients-angular-language-server-command","text":"Default: (node /usr/lib/node_modules/@angular/language-server --ngProbeLocations /usr/lib/node_modules --tsProbeLocations /usr/lib/node_modules --stdio) The command that starts the angular language server.","title":"lsp-clients-angular-language-server-command"},{"location":"page/lsp-bash/","text":"Bash # Server # For more information about the LSP server, check bash-language-server . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET bash RET . npm i -g bash-language-server Debugger: Not available # Available configurations # lsp-bash-explainshell-endpoint # Default: nil The endpoint to use explainshell.com to answer \u2019onHover\u2019 queries. See instructions at https://marketplace.visualstudio.com/items?itemName=mads-hartmann.bash-ide-vscode lsp-bash-highlight-parsing-errors # Default: nil Consider parsing errors in scripts as \u2019problems\u2019. lsp-bash-glob-pattern # Default: nil Glob pattern used to find shell script files to parse.","title":"Bash"},{"location":"page/lsp-bash/#bash","text":"","title":"Bash"},{"location":"page/lsp-bash/#server","text":"For more information about the LSP server, check bash-language-server .","title":"Server"},{"location":"page/lsp-bash/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET bash RET . npm i -g bash-language-server","title":"Installation"},{"location":"page/lsp-bash/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-bash/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-bash/#lsp-bash-explainshell-endpoint","text":"Default: nil The endpoint to use explainshell.com to answer \u2019onHover\u2019 queries. See instructions at https://marketplace.visualstudio.com/items?itemName=mads-hartmann.bash-ide-vscode","title":"lsp-bash-explainshell-endpoint"},{"location":"page/lsp-bash/#lsp-bash-highlight-parsing-errors","text":"Default: nil Consider parsing errors in scripts as \u2019problems\u2019.","title":"lsp-bash-highlight-parsing-errors"},{"location":"page/lsp-bash/#lsp-bash-glob-pattern","text":"Default: nil Glob pattern used to find shell script files to parse.","title":"lsp-bash-glob-pattern"},{"location":"page/lsp-ccls/","text":"C++ # Server # For more information about the LSP server, check ccls . Installation # For more instructions on how to install manually, check here . Debugger: Yes (gdb or lldb) # Available configurations #","title":"C++ (ccls)"},{"location":"page/lsp-ccls/#c","text":"","title":"C++"},{"location":"page/lsp-ccls/#server","text":"For more information about the LSP server, check ccls .","title":"Server"},{"location":"page/lsp-ccls/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-ccls/#debugger-yes-gdb-or-lldb","text":"","title":"Debugger: Yes (gdb or lldb)"},{"location":"page/lsp-ccls/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-clangd/","text":"C++ # Server # For more information about the LSP server, check clangd . Installation # For more instructions on how to install manually, check here . Debugger: Yes (gdb or lldb) # Available configurations # lsp-clients-clangd-executable # Default: nil The clangd executable to use. When \u2018\u2019non-nil\u2019 use the name of the clangd executable file available in your path to use. Otherwise the system will try to find a suitable one. Set this variable before loading lsp. lsp-clients-clangd-args # Default: nil Extra arguments for the clangd executable.","title":"C++ (clangd)"},{"location":"page/lsp-clangd/#c","text":"","title":"C++"},{"location":"page/lsp-clangd/#server","text":"For more information about the LSP server, check clangd .","title":"Server"},{"location":"page/lsp-clangd/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-clangd/#debugger-yes-gdb-or-lldb","text":"","title":"Debugger: Yes (gdb or lldb)"},{"location":"page/lsp-clangd/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-clangd/#lsp-clients-clangd-executable","text":"Default: nil The clangd executable to use. When \u2018\u2019non-nil\u2019 use the name of the clangd executable file available in your path to use. Otherwise the system will try to find a suitable one. Set this variable before loading lsp.","title":"lsp-clients-clangd-executable"},{"location":"page/lsp-clangd/#lsp-clients-clangd-args","text":"Default: nil Extra arguments for the clangd executable.","title":"lsp-clients-clangd-args"},{"location":"page/lsp-clojure/","text":"Clojure # Server # For more information about the LSP server, check clojure-lsp . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET clojure-lsp RET . For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-clojure-custom-server-command # Default: nil The clojure-lisp server command. lsp-clojure-server-download-url # Default: https://github.com/snoe/clojure-lsp/releases/latest/download/clojure-lsp Automatic download url for lsp-clojure. lsp-clojure-server-store-path # Default: ~/.emacs.d/.cache/lsp/clojure/clojure-lsp The path to the file in which \u2018clojure-lsp\u2019 will be stored.","title":"Clojure"},{"location":"page/lsp-clojure/#clojure","text":"","title":"Clojure"},{"location":"page/lsp-clojure/#server","text":"For more information about the LSP server, check clojure-lsp .","title":"Server"},{"location":"page/lsp-clojure/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET clojure-lsp RET . For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-clojure/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-clojure/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-clojure/#lsp-clojure-custom-server-command","text":"Default: nil The clojure-lisp server command.","title":"lsp-clojure-custom-server-command"},{"location":"page/lsp-clojure/#lsp-clojure-server-download-url","text":"Default: https://github.com/snoe/clojure-lsp/releases/latest/download/clojure-lsp Automatic download url for lsp-clojure.","title":"lsp-clojure-server-download-url"},{"location":"page/lsp-clojure/#lsp-clojure-server-store-path","text":"Default: ~/.emacs.d/.cache/lsp/clojure/clojure-lsp The path to the file in which \u2018clojure-lsp\u2019 will be stored.","title":"lsp-clojure-server-store-path"},{"location":"page/lsp-cmake/","text":"CMake # Server # For more information about the LSP server, check cmake-language-server . Installation # pip install cmake-language-server For more instructions on how to install manually, check here . Debugger: Not relevant # Available configurations #","title":"CMake"},{"location":"page/lsp-cmake/#cmake","text":"","title":"CMake"},{"location":"page/lsp-cmake/#server","text":"For more information about the LSP server, check cmake-language-server .","title":"Server"},{"location":"page/lsp-cmake/#installation","text":"pip install cmake-language-server For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-cmake/#debugger-not-relevant","text":"","title":"Debugger: Not relevant"},{"location":"page/lsp-cmake/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-crystal/","text":"Crystal # Server # For more information about the LSP server, check scry . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations #","title":"Crystal"},{"location":"page/lsp-crystal/#crystal","text":"","title":"Crystal"},{"location":"page/lsp-crystal/#server","text":"For more information about the LSP server, check scry .","title":"Server"},{"location":"page/lsp-crystal/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-crystal/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-crystal/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-csharp/","text":"C# # Server # For more information about the LSP server, check OmniSharp-Roslyn . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET csharp RET . Supports automatic installation. Use M-x lsp-csharp-update-server to update to latest. Debugger: Not available # Available configurations # lsp-csharp-server-install-dir # Default: ~/.emacs.d/.cache/lsp/omnisharp-roslyn/ Installation directory for OmniSharp Roslyn server. lsp-csharp-server-path # Default: nil The path to the OmniSharp Roslyn language-server binary. Set this if you have the binary installed or have it built yourself.","title":"C#"},{"location":"page/lsp-csharp/#c","text":"","title":"C#"},{"location":"page/lsp-csharp/#server","text":"For more information about the LSP server, check OmniSharp-Roslyn .","title":"Server"},{"location":"page/lsp-csharp/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET csharp RET . Supports automatic installation. Use M-x lsp-csharp-update-server to update to latest.","title":"Installation"},{"location":"page/lsp-csharp/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-csharp/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-csharp/#lsp-csharp-server-install-dir","text":"Default: ~/.emacs.d/.cache/lsp/omnisharp-roslyn/ Installation directory for OmniSharp Roslyn server.","title":"lsp-csharp-server-install-dir"},{"location":"page/lsp-csharp/#lsp-csharp-server-path","text":"Default: nil The path to the OmniSharp Roslyn language-server binary. Set this if you have the binary installed or have it built yourself.","title":"lsp-csharp-server-path"},{"location":"page/lsp-css/","text":"CSS/LessCSS/SASS/SCSS # Server # For more information about the LSP server, check css . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET css-ls RET . npm install -g vscode-css-languageserver-bin Debugger: Not available # Available configurations # lsp-css-experimental-custom-data # Default: nil A list of JSON file paths that define custom CSS data that loads custom properties, at directives, pseudo classes / elements. lsp-css-completion-trigger-property-value-completion # Default: t By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior. lsp-css-validate # Default: t Enables or disables all validations. lsp-css-lint-compatible-vendor-prefixes # Default: ignore When using a vendor-specific prefix make sure to also include all other vendor-specific properties. lsp-css-lint-vendor-prefix # Default: warning When using a vendor-specific prefix, also include the standard property. lsp-css-lint-duplicate-properties # Default: ignore Do not use duplicate style definitions. lsp-css-lint-empty-rules # Default: warning Do not use empty rulesets. lsp-css-lint-import-statement # Default: ignore Import statements do not load in parallel. lsp-css-lint-box-model # Default: ignore lsp-css-lint-universal-selector # Default: ignore lsp-css-lint-zero-units # Default: ignore No unit for zero needed. lsp-css-lint-font-face-properties # Default: warning lsp-css-lint-hex-color-length # Default: error Hex colors must consist of three or six hex numbers. lsp-css-lint-arguments-in-color-function # Default: error Invalid number of parameters. lsp-css-lint-unknown-properties # Default: warning Unknown property. lsp-css-lint-valid-properties # Default: nil A list of properties that are not validated against the \u2018unknownProperties\u2018 rule. lsp-css-lint-ie-hack # Default: ignore IE hacks are only necessary when supporting IE7 and older. lsp-css-lint-unknown-vendor-specific-properties # Default: ignore Unknown vendor specific property. lsp-css-lint-property-ignored-due-to-display # Default: warning lsp-css-lint-important # Default: ignore lsp-css-lint-float # Default: ignore lsp-css-lint-id-selector # Default: ignore Selectors should not contain IDs because these rules are too tightly coupled with the HTML. lsp-css-lint-unknown-at-rules # Default: warning Unknown at-rule. lsp-css-trace-server # Default: off Traces the communication between VS Code and the CSS language server.","title":"CSS/LessCSS/SASS/SCSS"},{"location":"page/lsp-css/#csslesscsssassscss","text":"","title":"CSS/LessCSS/SASS/SCSS"},{"location":"page/lsp-css/#server","text":"For more information about the LSP server, check css .","title":"Server"},{"location":"page/lsp-css/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET css-ls RET . npm install -g vscode-css-languageserver-bin","title":"Installation"},{"location":"page/lsp-css/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-css/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-css/#lsp-css-experimental-custom-data","text":"Default: nil A list of JSON file paths that define custom CSS data that loads custom properties, at directives, pseudo classes / elements.","title":"lsp-css-experimental-custom-data"},{"location":"page/lsp-css/#lsp-css-completion-trigger-property-value-completion","text":"Default: t By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.","title":"lsp-css-completion-trigger-property-value-completion"},{"location":"page/lsp-css/#lsp-css-validate","text":"Default: t Enables or disables all validations.","title":"lsp-css-validate"},{"location":"page/lsp-css/#lsp-css-lint-compatible-vendor-prefixes","text":"Default: ignore When using a vendor-specific prefix make sure to also include all other vendor-specific properties.","title":"lsp-css-lint-compatible-vendor-prefixes"},{"location":"page/lsp-css/#lsp-css-lint-vendor-prefix","text":"Default: warning When using a vendor-specific prefix, also include the standard property.","title":"lsp-css-lint-vendor-prefix"},{"location":"page/lsp-css/#lsp-css-lint-duplicate-properties","text":"Default: ignore Do not use duplicate style definitions.","title":"lsp-css-lint-duplicate-properties"},{"location":"page/lsp-css/#lsp-css-lint-empty-rules","text":"Default: warning Do not use empty rulesets.","title":"lsp-css-lint-empty-rules"},{"location":"page/lsp-css/#lsp-css-lint-import-statement","text":"Default: ignore Import statements do not load in parallel.","title":"lsp-css-lint-import-statement"},{"location":"page/lsp-css/#lsp-css-lint-box-model","text":"Default: ignore","title":"lsp-css-lint-box-model"},{"location":"page/lsp-css/#lsp-css-lint-universal-selector","text":"Default: ignore","title":"lsp-css-lint-universal-selector"},{"location":"page/lsp-css/#lsp-css-lint-zero-units","text":"Default: ignore No unit for zero needed.","title":"lsp-css-lint-zero-units"},{"location":"page/lsp-css/#lsp-css-lint-font-face-properties","text":"Default: warning","title":"lsp-css-lint-font-face-properties"},{"location":"page/lsp-css/#lsp-css-lint-hex-color-length","text":"Default: error Hex colors must consist of three or six hex numbers.","title":"lsp-css-lint-hex-color-length"},{"location":"page/lsp-css/#lsp-css-lint-arguments-in-color-function","text":"Default: error Invalid number of parameters.","title":"lsp-css-lint-arguments-in-color-function"},{"location":"page/lsp-css/#lsp-css-lint-unknown-properties","text":"Default: warning Unknown property.","title":"lsp-css-lint-unknown-properties"},{"location":"page/lsp-css/#lsp-css-lint-valid-properties","text":"Default: nil A list of properties that are not validated against the \u2018unknownProperties\u2018 rule.","title":"lsp-css-lint-valid-properties"},{"location":"page/lsp-css/#lsp-css-lint-ie-hack","text":"Default: ignore IE hacks are only necessary when supporting IE7 and older.","title":"lsp-css-lint-ie-hack"},{"location":"page/lsp-css/#lsp-css-lint-unknown-vendor-specific-properties","text":"Default: ignore Unknown vendor specific property.","title":"lsp-css-lint-unknown-vendor-specific-properties"},{"location":"page/lsp-css/#lsp-css-lint-property-ignored-due-to-display","text":"Default: warning","title":"lsp-css-lint-property-ignored-due-to-display"},{"location":"page/lsp-css/#lsp-css-lint-important","text":"Default: ignore","title":"lsp-css-lint-important"},{"location":"page/lsp-css/#lsp-css-lint-float","text":"Default: ignore","title":"lsp-css-lint-float"},{"location":"page/lsp-css/#lsp-css-lint-id-selector","text":"Default: ignore Selectors should not contain IDs because these rules are too tightly coupled with the HTML.","title":"lsp-css-lint-id-selector"},{"location":"page/lsp-css/#lsp-css-lint-unknown-at-rules","text":"Default: warning Unknown at-rule.","title":"lsp-css-lint-unknown-at-rules"},{"location":"page/lsp-css/#lsp-css-trace-server","text":"Default: off Traces the communication between VS Code and the CSS language server.","title":"lsp-css-trace-server"},{"location":"page/lsp-dhall/","text":"Dhall # Server # For more information about the LSP server, check dhall-lsp-server . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations #","title":"Dhall"},{"location":"page/lsp-dhall/#dhall","text":"","title":"Dhall"},{"location":"page/lsp-dhall/#server","text":"For more information about the LSP server, check dhall-lsp-server .","title":"Server"},{"location":"page/lsp-dhall/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-dhall/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-dhall/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-dockerfile/","text":"Dockerfile # Server # For more information about the LSP server, check dockerfile-language-server-nodejs . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET dockerfile-ls RET . npm install -g dockerfile-language-server-nodejs Debugger: Not available # Available configurations # lsp-dockerfile-language-server-command # Default: (docker-langserver --stdio) The command that starts the docker language server.","title":"Dockerfile"},{"location":"page/lsp-dockerfile/#dockerfile","text":"","title":"Dockerfile"},{"location":"page/lsp-dockerfile/#server","text":"For more information about the LSP server, check dockerfile-language-server-nodejs .","title":"Server"},{"location":"page/lsp-dockerfile/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET dockerfile-ls RET . npm install -g dockerfile-language-server-nodejs","title":"Installation"},{"location":"page/lsp-dockerfile/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-dockerfile/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-dockerfile/#lsp-dockerfile-language-server-command","text":"Default: (docker-langserver --stdio) The command that starts the docker language server.","title":"lsp-dockerfile-language-server-command"},{"location":"page/lsp-elixir/","text":"Elixir # Server # For more information about the LSP server, check elixir-lsp/elixir-ls . Installation # For more instructions on how to install manually, check here . Debugger: Yes # Available configurations # lsp-elixir-dialyzer-enabled # Default: t Run ElixirLS\u2019s rapid Dialyzer when code is saved. lsp-elixir-dialyzer-warn-opts # Default: nil Dialyzer options to enable or disable warnings. See Dialyzer\u2019s documentation for options. Note that the \"race_conditions\" option is unsupported lsp-elixir-dialyzer-format # Default: dialyxir_long Formatter to use for Dialyzer warnings. lsp-elixir-mix-env # Default: test Mix environment to use for compilation. lsp-elixir-mix-target # Default: nil Mix target to use for compilation (requires Elixir >= 1.8). lsp-elixir-project-dir # Default: nil Subdirectory containing Mix project if not in the project root. If value is \u2018\"\"\u2018 then defaults to the workspace rootUri. lsp-elixir-fetch-deps # Default: t Automatically fetch project dependencies when compiling. lsp-elixir-suggest-specs # Default: t Suggest @spec annotations inline using Dialyzer\u2019s inferred success typings (Requires Dialyzer). lsp-elixir-signature-after-complete # Default: t Show signature help after confirming autocomplete. lsp-clients-elixir-server-executable # Default: language_server.sh The elixir-language-server executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019. lsp-elixir-enable-test-lenses # Default: t Suggest Tests.","title":"Elixir"},{"location":"page/lsp-elixir/#elixir","text":"","title":"Elixir"},{"location":"page/lsp-elixir/#server","text":"For more information about the LSP server, check elixir-lsp/elixir-ls .","title":"Server"},{"location":"page/lsp-elixir/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-elixir/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-elixir/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-elixir/#lsp-elixir-dialyzer-enabled","text":"Default: t Run ElixirLS\u2019s rapid Dialyzer when code is saved.","title":"lsp-elixir-dialyzer-enabled"},{"location":"page/lsp-elixir/#lsp-elixir-dialyzer-warn-opts","text":"Default: nil Dialyzer options to enable or disable warnings. See Dialyzer\u2019s documentation for options. Note that the \"race_conditions\" option is unsupported","title":"lsp-elixir-dialyzer-warn-opts"},{"location":"page/lsp-elixir/#lsp-elixir-dialyzer-format","text":"Default: dialyxir_long Formatter to use for Dialyzer warnings.","title":"lsp-elixir-dialyzer-format"},{"location":"page/lsp-elixir/#lsp-elixir-mix-env","text":"Default: test Mix environment to use for compilation.","title":"lsp-elixir-mix-env"},{"location":"page/lsp-elixir/#lsp-elixir-mix-target","text":"Default: nil Mix target to use for compilation (requires Elixir >= 1.8).","title":"lsp-elixir-mix-target"},{"location":"page/lsp-elixir/#lsp-elixir-project-dir","text":"Default: nil Subdirectory containing Mix project if not in the project root. If value is \u2018\"\"\u2018 then defaults to the workspace rootUri.","title":"lsp-elixir-project-dir"},{"location":"page/lsp-elixir/#lsp-elixir-fetch-deps","text":"Default: t Automatically fetch project dependencies when compiling.","title":"lsp-elixir-fetch-deps"},{"location":"page/lsp-elixir/#lsp-elixir-suggest-specs","text":"Default: t Suggest @spec annotations inline using Dialyzer\u2019s inferred success typings (Requires Dialyzer).","title":"lsp-elixir-suggest-specs"},{"location":"page/lsp-elixir/#lsp-elixir-signature-after-complete","text":"Default: t Show signature help after confirming autocomplete.","title":"lsp-elixir-signature-after-complete"},{"location":"page/lsp-elixir/#lsp-clients-elixir-server-executable","text":"Default: language_server.sh The elixir-language-server executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019.","title":"lsp-clients-elixir-server-executable"},{"location":"page/lsp-elixir/#lsp-elixir-enable-test-lenses","text":"Default: t Suggest Tests.","title":"lsp-elixir-enable-test-lenses"},{"location":"page/lsp-elm/","text":"Elm # Server # For more information about the LSP server, check elmLS . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET elm-ls RET . npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions Debugger: Not available # Available configurations # lsp-elm-elm-language-server-path # Default: nil Path for elm-language-server. Can be installed globally with: npm i -g @elm-tooling/elm-language-server, or manually by cloning the repo and following the installing instructions. lsp-elm-trace-server # Default: nil Enable/disable trace logging of client and server communication. lsp-elm-elm-path # Default: `` The path to your elm executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. lsp-elm-elm-format-path # Default: `` The path to your elm-format executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. lsp-elm-elm-test-path # Default: `` The path to your elm-test executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. lsp-elm-elm-analyse-trigger # Default: change Elm-analyse executed on \u2019change\u2019, \u2019save\u2019 or \u2019never\u2019 (default: \u2019change\u2019). lsp-elm-server-args # Default: (--stdio) Arguments to pass to the server.","title":"Elm"},{"location":"page/lsp-elm/#elm","text":"","title":"Elm"},{"location":"page/lsp-elm/#server","text":"For more information about the LSP server, check elmLS .","title":"Server"},{"location":"page/lsp-elm/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET elm-ls RET . npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions","title":"Installation"},{"location":"page/lsp-elm/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-elm/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-elm/#lsp-elm-elm-language-server-path","text":"Default: nil Path for elm-language-server. Can be installed globally with: npm i -g @elm-tooling/elm-language-server, or manually by cloning the repo and following the installing instructions.","title":"lsp-elm-elm-language-server-path"},{"location":"page/lsp-elm/#lsp-elm-trace-server","text":"Default: nil Enable/disable trace logging of client and server communication.","title":"lsp-elm-trace-server"},{"location":"page/lsp-elm/#lsp-elm-elm-path","text":"Default: `` The path to your elm executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"lsp-elm-elm-path"},{"location":"page/lsp-elm/#lsp-elm-elm-format-path","text":"Default: `` The path to your elm-format executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"lsp-elm-elm-format-path"},{"location":"page/lsp-elm/#lsp-elm-elm-test-path","text":"Default: `` The path to your elm-test executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"lsp-elm-elm-test-path"},{"location":"page/lsp-elm/#lsp-elm-elm-analyse-trigger","text":"Default: change Elm-analyse executed on \u2019change\u2019, \u2019save\u2019 or \u2019never\u2019 (default: \u2019change\u2019).","title":"lsp-elm-elm-analyse-trigger"},{"location":"page/lsp-elm/#lsp-elm-server-args","text":"Default: (--stdio) Arguments to pass to the server.","title":"lsp-elm-server-args"},{"location":"page/lsp-emmy-lua/","text":"Lua # Server # For more information about the LSP server, check EmmyLua . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-clients-emmy-lua-java-path # Default: java Java Runtime binary location. lsp-clients-emmy-lua-jar-path # Default: ~/.emacs.d/.cache/lsp/EmmyLua-LS-all.jar Emmy Lua language server jar file. lsp-clients-emmy-lua-args # Default: (-jar) Arguments to the Lua Language server. lsp-clients-emmy-lua-command # Default: nil Final command to call the Lua Language server.","title":"Lua (EmmyLua)"},{"location":"page/lsp-emmy-lua/#lua","text":"","title":"Lua"},{"location":"page/lsp-emmy-lua/#server","text":"For more information about the LSP server, check EmmyLua .","title":"Server"},{"location":"page/lsp-emmy-lua/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-emmy-lua/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-emmy-lua/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-emmy-lua/#lsp-clients-emmy-lua-java-path","text":"Default: java Java Runtime binary location.","title":"lsp-clients-emmy-lua-java-path"},{"location":"page/lsp-emmy-lua/#lsp-clients-emmy-lua-jar-path","text":"Default: ~/.emacs.d/.cache/lsp/EmmyLua-LS-all.jar Emmy Lua language server jar file.","title":"lsp-clients-emmy-lua-jar-path"},{"location":"page/lsp-emmy-lua/#lsp-clients-emmy-lua-args","text":"Default: (-jar) Arguments to the Lua Language server.","title":"lsp-clients-emmy-lua-args"},{"location":"page/lsp-emmy-lua/#lsp-clients-emmy-lua-command","text":"Default: nil Final command to call the Lua Language server.","title":"lsp-clients-emmy-lua-command"},{"location":"page/lsp-erlang/","text":"Erlang # Server # For more information about the LSP server, check erlang_ls . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-erlang-server-path # Default: erlang_ls Path to the Erlang Language Server binary. lsp-erlang-server-connection-type # Default: stdio Type of connection to use with the Erlang Language Server: tcp or stdio","title":"Erlang"},{"location":"page/lsp-erlang/#erlang","text":"","title":"Erlang"},{"location":"page/lsp-erlang/#server","text":"For more information about the LSP server, check erlang_ls .","title":"Server"},{"location":"page/lsp-erlang/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-erlang/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-erlang/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-erlang/#lsp-erlang-server-path","text":"Default: erlang_ls Path to the Erlang Language Server binary.","title":"lsp-erlang-server-path"},{"location":"page/lsp-erlang/#lsp-erlang-server-connection-type","text":"Default: stdio Type of connection to use with the Erlang Language Server: tcp or stdio","title":"lsp-erlang-server-connection-type"},{"location":"page/lsp-eslint/","text":"ESlint # Server # For more information about the LSP server, check eslint . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET eslint RET . Debugger: N/A # Available configurations # lsp-eslint-unzipped-path # Default: ~/.emacs.d/.cache/lsp/eslint/unzipped The path to the file in which \u2018eslint\u2019 will be stored. lsp-eslint-server-command # Default: (node ~/server/out/eslintServer.js --stdio) Command to start eslint server. lsp-eslint-enable # Default: t Controls whether eslint is enabled for JavaScript files or not. lsp-eslint-package-manager # Default: npm The package manager you use to install node modules. lsp-eslint-format # Default: t Whether to perform format. lsp-eslint-node-path # Default: nil A path added to NODE_PATH when resolving the eslint module. lsp-eslint-node # Default: node Path to nodejs. lsp-eslint-options # Default: nil The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine). lsp-eslint-trace-server # Default: off Traces the communication between VSCode and the eslint linter service. lsp-eslint-run # Default: onType Run the linter on save (onSave) or on type (onType) lsp-eslint-auto-fix-on-save # Default: nil Turns auto fix on save on or off. lsp-eslint-fix-all-problem-type # Default: all Determines which problems are fixed when running the source.fixAll code action. lsp-eslint-quiet # Default: nil Turns on quiet mode, which ignores warnings. lsp-eslint-working-directories # Default: [] lsp-eslint-validate # Default: [javascript javascriptreact] An array of language ids which should be validated by ESLint lsp-eslint-provide-lint-task # Default: nil Controls whether a task for linting the whole workspace will be available. lsp-eslint-lint-task-enable # Default: nil Controls whether a task for linting the whole workspace will be available. lsp-eslint-lint-task-options # Default: . Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface). lsp-eslint-runtime # Default: nil The location of the node binary to run ESLint under. lsp-eslint-code-action-disable-rule-comment # Default: ((enable . t) (location . separateLine)) lsp-eslint-code-action-show-documentation # Default: ((enable . t)) lsp-eslint-experimental-incremental-sync # Default: t Controls whether the new incremental text document synchronization should be used.","title":"Eslint"},{"location":"page/lsp-eslint/#eslint","text":"","title":"ESlint"},{"location":"page/lsp-eslint/#server","text":"For more information about the LSP server, check eslint .","title":"Server"},{"location":"page/lsp-eslint/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET eslint RET .","title":"Installation"},{"location":"page/lsp-eslint/#debugger-na","text":"","title":"Debugger: N/A"},{"location":"page/lsp-eslint/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-eslint/#lsp-eslint-unzipped-path","text":"Default: ~/.emacs.d/.cache/lsp/eslint/unzipped The path to the file in which \u2018eslint\u2019 will be stored.","title":"lsp-eslint-unzipped-path"},{"location":"page/lsp-eslint/#lsp-eslint-server-command","text":"Default: (node ~/server/out/eslintServer.js --stdio) Command to start eslint server.","title":"lsp-eslint-server-command"},{"location":"page/lsp-eslint/#lsp-eslint-enable","text":"Default: t Controls whether eslint is enabled for JavaScript files or not.","title":"lsp-eslint-enable"},{"location":"page/lsp-eslint/#lsp-eslint-package-manager","text":"Default: npm The package manager you use to install node modules.","title":"lsp-eslint-package-manager"},{"location":"page/lsp-eslint/#lsp-eslint-format","text":"Default: t Whether to perform format.","title":"lsp-eslint-format"},{"location":"page/lsp-eslint/#lsp-eslint-node-path","text":"Default: nil A path added to NODE_PATH when resolving the eslint module.","title":"lsp-eslint-node-path"},{"location":"page/lsp-eslint/#lsp-eslint-node","text":"Default: node Path to nodejs.","title":"lsp-eslint-node"},{"location":"page/lsp-eslint/#lsp-eslint-options","text":"Default: nil The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine).","title":"lsp-eslint-options"},{"location":"page/lsp-eslint/#lsp-eslint-trace-server","text":"Default: off Traces the communication between VSCode and the eslint linter service.","title":"lsp-eslint-trace-server"},{"location":"page/lsp-eslint/#lsp-eslint-run","text":"Default: onType Run the linter on save (onSave) or on type (onType)","title":"lsp-eslint-run"},{"location":"page/lsp-eslint/#lsp-eslint-auto-fix-on-save","text":"Default: nil Turns auto fix on save on or off.","title":"lsp-eslint-auto-fix-on-save"},{"location":"page/lsp-eslint/#lsp-eslint-fix-all-problem-type","text":"Default: all Determines which problems are fixed when running the source.fixAll code action.","title":"lsp-eslint-fix-all-problem-type"},{"location":"page/lsp-eslint/#lsp-eslint-quiet","text":"Default: nil Turns on quiet mode, which ignores warnings.","title":"lsp-eslint-quiet"},{"location":"page/lsp-eslint/#lsp-eslint-working-directories","text":"Default: []","title":"lsp-eslint-working-directories"},{"location":"page/lsp-eslint/#lsp-eslint-validate","text":"Default: [javascript javascriptreact] An array of language ids which should be validated by ESLint","title":"lsp-eslint-validate"},{"location":"page/lsp-eslint/#lsp-eslint-provide-lint-task","text":"Default: nil Controls whether a task for linting the whole workspace will be available.","title":"lsp-eslint-provide-lint-task"},{"location":"page/lsp-eslint/#lsp-eslint-lint-task-enable","text":"Default: nil Controls whether a task for linting the whole workspace will be available.","title":"lsp-eslint-lint-task-enable"},{"location":"page/lsp-eslint/#lsp-eslint-lint-task-options","text":"Default: . Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).","title":"lsp-eslint-lint-task-options"},{"location":"page/lsp-eslint/#lsp-eslint-runtime","text":"Default: nil The location of the node binary to run ESLint under.","title":"lsp-eslint-runtime"},{"location":"page/lsp-eslint/#lsp-eslint-code-action-disable-rule-comment","text":"Default: ((enable . t) (location . separateLine))","title":"lsp-eslint-code-action-disable-rule-comment"},{"location":"page/lsp-eslint/#lsp-eslint-code-action-show-documentation","text":"Default: ((enable . t))","title":"lsp-eslint-code-action-show-documentation"},{"location":"page/lsp-eslint/#lsp-eslint-experimental-incremental-sync","text":"Default: t Controls whether the new incremental text document synchronization should be used.","title":"lsp-eslint-experimental-incremental-sync"},{"location":"page/lsp-flow/","text":"JavaScript Flow # Server # For more information about the LSP server, check flow . Installation # For more instructions on how to install manually, check here . Debugger: Yes (Firefox/Chrome) # Available configurations # lsp-clients-flow-server # Default: flow The Flow executable to use. Leave as just the executable name to use the default behavior of finding the executable with variable \u2018exec-path\u2019. lsp-clients-flow-server-args # Default: (lsp) Extra arguments for starting the Flow language server.","title":"JavaScript Flow"},{"location":"page/lsp-flow/#javascript-flow","text":"","title":"JavaScript Flow"},{"location":"page/lsp-flow/#server","text":"For more information about the LSP server, check flow .","title":"Server"},{"location":"page/lsp-flow/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-flow/#debugger-yes-firefoxchrome","text":"","title":"Debugger: Yes (Firefox/Chrome)"},{"location":"page/lsp-flow/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-flow/#lsp-clients-flow-server","text":"Default: flow The Flow executable to use. Leave as just the executable name to use the default behavior of finding the executable with variable \u2018exec-path\u2019.","title":"lsp-clients-flow-server"},{"location":"page/lsp-flow/#lsp-clients-flow-server-args","text":"Default: (lsp) Extra arguments for starting the Flow language server.","title":"lsp-clients-flow-server-args"},{"location":"page/lsp-fortran/","text":"Fortran # Server # For more information about the LSP server, check fortran-language-server . Installation # pip install fortran-language-server Debugger: Yes # Available configurations # lsp-clients-fortls-executable # Default: fortls The fortls executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019. lsp-clients-fortls-args # Default: nil Extra arguments for the fortls executable","title":"Fortran"},{"location":"page/lsp-fortran/#fortran","text":"","title":"Fortran"},{"location":"page/lsp-fortran/#server","text":"For more information about the LSP server, check fortran-language-server .","title":"Server"},{"location":"page/lsp-fortran/#installation","text":"pip install fortran-language-server","title":"Installation"},{"location":"page/lsp-fortran/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-fortran/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-fortran/#lsp-clients-fortls-executable","text":"Default: fortls The fortls executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019.","title":"lsp-clients-fortls-executable"},{"location":"page/lsp-fortran/#lsp-clients-fortls-args","text":"Default: nil Extra arguments for the fortls executable","title":"lsp-clients-fortls-args"},{"location":"page/lsp-fsharp/","text":"F# # Server # For more information about the LSP server, check fsautocomplete . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET fsac RET . Automatic by lsp-mode Debugger: Not available # Available configurations # lsp-fsharp-server-runtime # Default: net-core The .NET runtime to use. lsp-fsharp-server-install-dir # Default: ~/.emacs.d/.cache/lsp/fsautocomplete/ Install directory for fsautocomplete server. The slash is expected at the end. lsp-fsharp-server-args # Default: nil Extra arguments for the F# language server. lsp-fsharp-keywords-autocomplete # Default: t Provides keywords in autocomplete list lsp-fsharp-external-autocomplete # Default: nil Provides autocompletion for symbols from not opened namespaces/modules; inserts open on accept lsp-fsharp-linter # Default: t Enables FSharpLint integration, provides additional warnings and code action fixes lsp-fsharp-union-case-stub-generation # Default: t Enablesa code action to generate pattern matching cases lsp-fsharp-union-case-stub-generation-body # Default: failwith \"Not Implemented\" defines dummy body used by pattern matching generator lsp-fsharp-record-stub-generation # Default: t Enables code action to generate record stub lsp-fsharp-record-stub-generation-body # Default: failwith \"Not Implemented\" defines dummy body used by record stub generator lsp-fsharp-interface-stub-generation # Default: t Enables code action to generate an interface stub lsp-fsharp-interface-stub-generation-object-identifier # Default: this Defines object identifier used by interface stub generator, e.g. \u2018this\u2019 or \u2018self\u2019 lsp-fsharp-interface-stub-generation-method-body # Default: failwith \"Not Implemented\" Defines dummy body used by interface stub generator lsp-fsharp-unused-opens-analyzer # Default: t Enables unused open detection lsp-fsharp-unused-declarations-analyzer # Default: t Enables unused symbol detection lsp-fsharp-simplify-name-analyzer # Default: nil Enables simplify name analyzer and remove redundant qualifier quick fix lsp-fsharp-resolve-namespaces # Default: t Enables resolve namespace quick fix; adds \u2018open\u2019 if symbol is from not yet opened module/namespace lsp-fsharp-enable-reference-code-lens # Default: t Enables reference count code lenses. It is recommended to disable if \u2018--backgorund-service-enabled\u2019 is not used lsp-fsharp-auto-workspace-init # Default: nil Enable automatic workspace initialization. Do note that this can cause unexpected or challenging behaviors, as solutions with test projects are not autoloaded by FSharpAutoComplete.","title":"F#"},{"location":"page/lsp-fsharp/#f","text":"","title":"F#"},{"location":"page/lsp-fsharp/#server","text":"For more information about the LSP server, check fsautocomplete .","title":"Server"},{"location":"page/lsp-fsharp/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET fsac RET . Automatic by lsp-mode","title":"Installation"},{"location":"page/lsp-fsharp/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-fsharp/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-fsharp/#lsp-fsharp-server-runtime","text":"Default: net-core The .NET runtime to use.","title":"lsp-fsharp-server-runtime"},{"location":"page/lsp-fsharp/#lsp-fsharp-server-install-dir","text":"Default: ~/.emacs.d/.cache/lsp/fsautocomplete/ Install directory for fsautocomplete server. The slash is expected at the end.","title":"lsp-fsharp-server-install-dir"},{"location":"page/lsp-fsharp/#lsp-fsharp-server-args","text":"Default: nil Extra arguments for the F# language server.","title":"lsp-fsharp-server-args"},{"location":"page/lsp-fsharp/#lsp-fsharp-keywords-autocomplete","text":"Default: t Provides keywords in autocomplete list","title":"lsp-fsharp-keywords-autocomplete"},{"location":"page/lsp-fsharp/#lsp-fsharp-external-autocomplete","text":"Default: nil Provides autocompletion for symbols from not opened namespaces/modules; inserts open on accept","title":"lsp-fsharp-external-autocomplete"},{"location":"page/lsp-fsharp/#lsp-fsharp-linter","text":"Default: t Enables FSharpLint integration, provides additional warnings and code action fixes","title":"lsp-fsharp-linter"},{"location":"page/lsp-fsharp/#lsp-fsharp-union-case-stub-generation","text":"Default: t Enablesa code action to generate pattern matching cases","title":"lsp-fsharp-union-case-stub-generation"},{"location":"page/lsp-fsharp/#lsp-fsharp-union-case-stub-generation-body","text":"Default: failwith \"Not Implemented\" defines dummy body used by pattern matching generator","title":"lsp-fsharp-union-case-stub-generation-body"},{"location":"page/lsp-fsharp/#lsp-fsharp-record-stub-generation","text":"Default: t Enables code action to generate record stub","title":"lsp-fsharp-record-stub-generation"},{"location":"page/lsp-fsharp/#lsp-fsharp-record-stub-generation-body","text":"Default: failwith \"Not Implemented\" defines dummy body used by record stub generator","title":"lsp-fsharp-record-stub-generation-body"},{"location":"page/lsp-fsharp/#lsp-fsharp-interface-stub-generation","text":"Default: t Enables code action to generate an interface stub","title":"lsp-fsharp-interface-stub-generation"},{"location":"page/lsp-fsharp/#lsp-fsharp-interface-stub-generation-object-identifier","text":"Default: this Defines object identifier used by interface stub generator, e.g. \u2018this\u2019 or \u2018self\u2019","title":"lsp-fsharp-interface-stub-generation-object-identifier"},{"location":"page/lsp-fsharp/#lsp-fsharp-interface-stub-generation-method-body","text":"Default: failwith \"Not Implemented\" Defines dummy body used by interface stub generator","title":"lsp-fsharp-interface-stub-generation-method-body"},{"location":"page/lsp-fsharp/#lsp-fsharp-unused-opens-analyzer","text":"Default: t Enables unused open detection","title":"lsp-fsharp-unused-opens-analyzer"},{"location":"page/lsp-fsharp/#lsp-fsharp-unused-declarations-analyzer","text":"Default: t Enables unused symbol detection","title":"lsp-fsharp-unused-declarations-analyzer"},{"location":"page/lsp-fsharp/#lsp-fsharp-simplify-name-analyzer","text":"Default: nil Enables simplify name analyzer and remove redundant qualifier quick fix","title":"lsp-fsharp-simplify-name-analyzer"},{"location":"page/lsp-fsharp/#lsp-fsharp-resolve-namespaces","text":"Default: t Enables resolve namespace quick fix; adds \u2018open\u2019 if symbol is from not yet opened module/namespace","title":"lsp-fsharp-resolve-namespaces"},{"location":"page/lsp-fsharp/#lsp-fsharp-enable-reference-code-lens","text":"Default: t Enables reference count code lenses. It is recommended to disable if \u2018--backgorund-service-enabled\u2019 is not used","title":"lsp-fsharp-enable-reference-code-lens"},{"location":"page/lsp-fsharp/#lsp-fsharp-auto-workspace-init","text":"Default: nil Enable automatic workspace initialization. Do note that this can cause unexpected or challenging behaviors, as solutions with test projects are not autoloaded by FSharpAutoComplete.","title":"lsp-fsharp-auto-workspace-init"},{"location":"page/lsp-gdscript/","text":"GDScript # Server # For more information about the LSP server, check godot . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-gdscript-port # Default: 6008 Port to connect server to","title":"GDScript"},{"location":"page/lsp-gdscript/#gdscript","text":"","title":"GDScript"},{"location":"page/lsp-gdscript/#server","text":"For more information about the LSP server, check godot .","title":"Server"},{"location":"page/lsp-gdscript/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-gdscript/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-gdscript/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-gdscript/#lsp-gdscript-port","text":"Default: 6008 Port to connect server to","title":"lsp-gdscript-port"},{"location":"page/lsp-gopls/","text":"Go # Server # For more information about the LSP server, check gopls . Installation # For more instructions on how to install manually, check here . Debugger: Yes # Available configurations #","title":"Go (gopls)"},{"location":"page/lsp-gopls/#go","text":"","title":"Go"},{"location":"page/lsp-gopls/#server","text":"For more information about the LSP server, check gopls .","title":"Server"},{"location":"page/lsp-gopls/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-gopls/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-gopls/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-groovy/","text":"Groovy # Server # For more information about the LSP server, check groovy-language-server . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-groovy-server-file # Default: ~/.emacs.d/.cache/lsp/groovy-language-server-all.jar JAR file path for groovy-language-server-all.jar. lsp-groovy-classpath # Default: [/usr/local/opt/groovy/libexec/lib] List of paths to Groovy JARs.","title":"Groovy"},{"location":"page/lsp-groovy/#groovy","text":"","title":"Groovy"},{"location":"page/lsp-groovy/#server","text":"For more information about the LSP server, check groovy-language-server .","title":"Server"},{"location":"page/lsp-groovy/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-groovy/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-groovy/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-groovy/#lsp-groovy-server-file","text":"Default: ~/.emacs.d/.cache/lsp/groovy-language-server-all.jar JAR file path for groovy-language-server-all.jar.","title":"lsp-groovy-server-file"},{"location":"page/lsp-groovy/#lsp-groovy-classpath","text":"Default: [/usr/local/opt/groovy/libexec/lib] List of paths to Groovy JARs.","title":"lsp-groovy-classpath"},{"location":"page/lsp-hack/","text":"Hack # Server # For more information about the LSP server, check hhvm . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-clients-hack-command # Default: (hh_client lsp --from emacs) Command to start hh_client.","title":"Hack"},{"location":"page/lsp-hack/#hack","text":"","title":"Hack"},{"location":"page/lsp-hack/#server","text":"For more information about the LSP server, check hhvm .","title":"Server"},{"location":"page/lsp-hack/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-hack/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-hack/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-hack/#lsp-clients-hack-command","text":"Default: (hh_client lsp --from emacs) Command to start hh_client.","title":"lsp-clients-hack-command"},{"location":"page/lsp-html/","text":"HTML # Server # For more information about the LSP server, check html . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET html-ls RET . npm install -g vscode-html-languageserver-bin Debugger: Not available # Available configurations # lsp-html-experimental-custom-data # Default: nil A list of JSON file paths that define custom tags, properties and other HTML syntax constructs. Only workspace folder setting will be read. lsp-html-format-enable # Default: t Enable/disable default HTML formatter. lsp-html-format-wrap-line-length # Default: 120 Maximum amount of characters per line (0 = disable). lsp-html-format-unformatted # Default: wbr lsp-html-format-content-unformatted # Default: pre,code,textarea lsp-html-format-indent-inner-html # Default: nil lsp-html-format-preserve-new-lines # Default: t Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text. lsp-html-format-max-preserve-new-lines # Default: nil lsp-html-format-indent-handlebars # Default: nil lsp-html-format-end-with-newline # Default: nil End with a newline. lsp-html-format-extra-liners # Default: head, body, /html lsp-html-format-wrap-attributes # Default: auto Wrap attributes. lsp-html-suggest-html5 # Default: t Controls whether the built-in HTML language support suggests HTML5 tags, properties and values. lsp-html-validate-scripts # Default: t Controls whether the built-in HTML language support validates embedded scripts. lsp-html-validate-styles # Default: t Controls whether the built-in HTML language support validates embedded styles. lsp-html-auto-closing-tags # Default: t Enable/disable autoclosing of HTML tags. lsp-html-trace-server # Default: off Traces the communication between VS Code and the HTML language server. lsp-html-server-command-args # Default: (--stdio) Command to start html-languageserver.","title":"HTML"},{"location":"page/lsp-html/#html","text":"","title":"HTML"},{"location":"page/lsp-html/#server","text":"For more information about the LSP server, check html .","title":"Server"},{"location":"page/lsp-html/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET html-ls RET . npm install -g vscode-html-languageserver-bin","title":"Installation"},{"location":"page/lsp-html/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-html/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-html/#lsp-html-experimental-custom-data","text":"Default: nil A list of JSON file paths that define custom tags, properties and other HTML syntax constructs. Only workspace folder setting will be read.","title":"lsp-html-experimental-custom-data"},{"location":"page/lsp-html/#lsp-html-format-enable","text":"Default: t Enable/disable default HTML formatter.","title":"lsp-html-format-enable"},{"location":"page/lsp-html/#lsp-html-format-wrap-line-length","text":"Default: 120 Maximum amount of characters per line (0 = disable).","title":"lsp-html-format-wrap-line-length"},{"location":"page/lsp-html/#lsp-html-format-unformatted","text":"Default: wbr","title":"lsp-html-format-unformatted"},{"location":"page/lsp-html/#lsp-html-format-content-unformatted","text":"Default: pre,code,textarea","title":"lsp-html-format-content-unformatted"},{"location":"page/lsp-html/#lsp-html-format-indent-inner-html","text":"Default: nil","title":"lsp-html-format-indent-inner-html"},{"location":"page/lsp-html/#lsp-html-format-preserve-new-lines","text":"Default: t Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.","title":"lsp-html-format-preserve-new-lines"},{"location":"page/lsp-html/#lsp-html-format-max-preserve-new-lines","text":"Default: nil","title":"lsp-html-format-max-preserve-new-lines"},{"location":"page/lsp-html/#lsp-html-format-indent-handlebars","text":"Default: nil","title":"lsp-html-format-indent-handlebars"},{"location":"page/lsp-html/#lsp-html-format-end-with-newline","text":"Default: nil End with a newline.","title":"lsp-html-format-end-with-newline"},{"location":"page/lsp-html/#lsp-html-format-extra-liners","text":"Default: head, body, /html","title":"lsp-html-format-extra-liners"},{"location":"page/lsp-html/#lsp-html-format-wrap-attributes","text":"Default: auto Wrap attributes.","title":"lsp-html-format-wrap-attributes"},{"location":"page/lsp-html/#lsp-html-suggest-html5","text":"Default: t Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.","title":"lsp-html-suggest-html5"},{"location":"page/lsp-html/#lsp-html-validate-scripts","text":"Default: t Controls whether the built-in HTML language support validates embedded scripts.","title":"lsp-html-validate-scripts"},{"location":"page/lsp-html/#lsp-html-validate-styles","text":"Default: t Controls whether the built-in HTML language support validates embedded styles.","title":"lsp-html-validate-styles"},{"location":"page/lsp-html/#lsp-html-auto-closing-tags","text":"Default: t Enable/disable autoclosing of HTML tags.","title":"lsp-html-auto-closing-tags"},{"location":"page/lsp-html/#lsp-html-trace-server","text":"Default: off Traces the communication between VS Code and the HTML language server.","title":"lsp-html-trace-server"},{"location":"page/lsp-html/#lsp-html-server-command-args","text":"Default: (--stdio) Command to start html-languageserver.","title":"lsp-html-server-command-args"},{"location":"page/lsp-intelephense/","text":"PHP(recommended) # Server # For more information about the LSP server, check intelephense . Installation # npm i intelephense -g Debugger: Yes # Available configurations # lsp-intelephense-files-max-size # Default: 1000000 Maximum file size in bytes. lsp-intelephense-files-associations # Default: [*.php *.phtml] Configure glob patterns to make files available for language server features. lsp-intelephense-files-exclude # Default: [**/.git/** **/.svn/** **/.hg/** **/CVS/** **/.DS_Store/** **/node_modules/** **/bower_components/** **/vendor/**/{Test,test,Tests,tests}/**] Configure glob patterns to exclude certain files and folders from all language server features. lsp-intelephense-stubs # Default: [apache bcmath bz2 calendar com_dotnet Core ctype curl date dba dom enchant exif fileinfo filter fpm ftp gd hash iconv imap interbase intl json ldap libxml mbstring mcrypt meta mssql mysqli oci8 odbc openssl pcntl pcre PDO pdo_ibm pdo_mysql pdo_pgsql pdo_sqlite pgsql Phar posix pspell readline recode Reflection regex session shmop SimpleXML snmp soap sockets sodium SPL sqlite3 standard superglobals sybase sysvmsg sysvsem sysvshm tidy tokenizer wddx xml xmlreader xmlrpc xmlwriter Zend OPcache zip zlib] Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions. lsp-intelephense-completion-insert-use-declaration # Default: t Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants. lsp-intelephense-completion-fully-qualify-global-constants-and-functions # Default: nil Global namespace constants and functions will be fully qualified (prefixed with a backslash). lsp-intelephense-completion-trigger-parameter-hints # Default: t Method and function completions will include parentheses and trigger parameter hints. lsp-intelephense-completion-max-items # Default: 100 The maximum number of completion items returned per request. lsp-intelephense-format-enable # Default: t Enables formatting. lsp-intelephense-licence-key # Default: nil Enter your intelephense licence key here to access premium features. lsp-intelephense-telemetry-enabled # Default: nil Anonymous usage and crash data will be sent to Azure Application Insights. lsp-intelephense-rename-exclude # Default: [**/vendor/**] Glob patterns to exclude files and folders from having symbols renamed. Rename operation will fail if references and/or definitions are found in excluded files/folders. lsp-intelephense-trace-server # Default: off Traces the communication between VSCode and the intelephense language server. lsp-intelephense-storage-path # Default: ~/.emacs.d/lsp-cache Optional absolute path to storage dir. lsp-intelephense-clear-cache # Default: nil Optional flag to clear server state. lsp-intelephense-multi-root # Default: t Flag to control if the server supports multi-root projects. lsp-intelephense-server-command # Default: (intelephense --stdio) Command to start Intelephense.","title":"PHP (intelephense)"},{"location":"page/lsp-intelephense/#phprecommended","text":"","title":"PHP(recommended)"},{"location":"page/lsp-intelephense/#server","text":"For more information about the LSP server, check intelephense .","title":"Server"},{"location":"page/lsp-intelephense/#installation","text":"npm i intelephense -g","title":"Installation"},{"location":"page/lsp-intelephense/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-intelephense/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-intelephense/#lsp-intelephense-files-max-size","text":"Default: 1000000 Maximum file size in bytes.","title":"lsp-intelephense-files-max-size"},{"location":"page/lsp-intelephense/#lsp-intelephense-files-associations","text":"Default: [*.php *.phtml] Configure glob patterns to make files available for language server features.","title":"lsp-intelephense-files-associations"},{"location":"page/lsp-intelephense/#lsp-intelephense-files-exclude","text":"Default: [**/.git/** **/.svn/** **/.hg/** **/CVS/** **/.DS_Store/** **/node_modules/** **/bower_components/** **/vendor/**/{Test,test,Tests,tests}/**] Configure glob patterns to exclude certain files and folders from all language server features.","title":"lsp-intelephense-files-exclude"},{"location":"page/lsp-intelephense/#lsp-intelephense-stubs","text":"Default: [apache bcmath bz2 calendar com_dotnet Core ctype curl date dba dom enchant exif fileinfo filter fpm ftp gd hash iconv imap interbase intl json ldap libxml mbstring mcrypt meta mssql mysqli oci8 odbc openssl pcntl pcre PDO pdo_ibm pdo_mysql pdo_pgsql pdo_sqlite pgsql Phar posix pspell readline recode Reflection regex session shmop SimpleXML snmp soap sockets sodium SPL sqlite3 standard superglobals sybase sysvmsg sysvsem sysvshm tidy tokenizer wddx xml xmlreader xmlrpc xmlwriter Zend OPcache zip zlib] Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.","title":"lsp-intelephense-stubs"},{"location":"page/lsp-intelephense/#lsp-intelephense-completion-insert-use-declaration","text":"Default: t Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.","title":"lsp-intelephense-completion-insert-use-declaration"},{"location":"page/lsp-intelephense/#lsp-intelephense-completion-fully-qualify-global-constants-and-functions","text":"Default: nil Global namespace constants and functions will be fully qualified (prefixed with a backslash).","title":"lsp-intelephense-completion-fully-qualify-global-constants-and-functions"},{"location":"page/lsp-intelephense/#lsp-intelephense-completion-trigger-parameter-hints","text":"Default: t Method and function completions will include parentheses and trigger parameter hints.","title":"lsp-intelephense-completion-trigger-parameter-hints"},{"location":"page/lsp-intelephense/#lsp-intelephense-completion-max-items","text":"Default: 100 The maximum number of completion items returned per request.","title":"lsp-intelephense-completion-max-items"},{"location":"page/lsp-intelephense/#lsp-intelephense-format-enable","text":"Default: t Enables formatting.","title":"lsp-intelephense-format-enable"},{"location":"page/lsp-intelephense/#lsp-intelephense-licence-key","text":"Default: nil Enter your intelephense licence key here to access premium features.","title":"lsp-intelephense-licence-key"},{"location":"page/lsp-intelephense/#lsp-intelephense-telemetry-enabled","text":"Default: nil Anonymous usage and crash data will be sent to Azure Application Insights.","title":"lsp-intelephense-telemetry-enabled"},{"location":"page/lsp-intelephense/#lsp-intelephense-rename-exclude","text":"Default: [**/vendor/**] Glob patterns to exclude files and folders from having symbols renamed. Rename operation will fail if references and/or definitions are found in excluded files/folders.","title":"lsp-intelephense-rename-exclude"},{"location":"page/lsp-intelephense/#lsp-intelephense-trace-server","text":"Default: off Traces the communication between VSCode and the intelephense language server.","title":"lsp-intelephense-trace-server"},{"location":"page/lsp-intelephense/#lsp-intelephense-storage-path","text":"Default: ~/.emacs.d/lsp-cache Optional absolute path to storage dir.","title":"lsp-intelephense-storage-path"},{"location":"page/lsp-intelephense/#lsp-intelephense-clear-cache","text":"Default: nil Optional flag to clear server state.","title":"lsp-intelephense-clear-cache"},{"location":"page/lsp-intelephense/#lsp-intelephense-multi-root","text":"Default: t Flag to control if the server supports multi-root projects.","title":"lsp-intelephense-multi-root"},{"location":"page/lsp-intelephense/#lsp-intelephense-server-command","text":"Default: (intelephense --stdio) Command to start Intelephense.","title":"lsp-intelephense-server-command"},{"location":"page/lsp-jedi/","text":"Python(Jedi-language-server) # Server # For more information about the LSP server, check jedi . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations #","title":"Python (Jedi Language Server)"},{"location":"page/lsp-jedi/#pythonjedi-language-server","text":"","title":"Python(Jedi-language-server)"},{"location":"page/lsp-jedi/#server","text":"For more information about the LSP server, check jedi .","title":"Server"},{"location":"page/lsp-jedi/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-jedi/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-jedi/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-json/","text":"Json # Server # For more information about the LSP server, check vscode-json-languageserver . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET json-ls RET . Automatic or manual by npm i -g vscode-json-languageserver Debugger: Not available # Available configurations # lsp-json-schemas # Default: nil Associate schemas to JSON files in the current project lsp-http-proxy # Default: nil The URL of the proxy server to use when fetching schema. lsp-http-proxyStrictSSL # Default: t The URL of the proxy server to use when fetching schema.","title":"Json"},{"location":"page/lsp-json/#json","text":"","title":"Json"},{"location":"page/lsp-json/#server","text":"For more information about the LSP server, check vscode-json-languageserver .","title":"Server"},{"location":"page/lsp-json/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET json-ls RET . Automatic or manual by npm i -g vscode-json-languageserver","title":"Installation"},{"location":"page/lsp-json/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-json/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-json/#lsp-json-schemas","text":"Default: nil Associate schemas to JSON files in the current project","title":"lsp-json-schemas"},{"location":"page/lsp-json/#lsp-http-proxy","text":"Default: nil The URL of the proxy server to use when fetching schema.","title":"lsp-http-proxy"},{"location":"page/lsp-json/#lsp-http-proxystrictssl","text":"Default: t The URL of the proxy server to use when fetching schema.","title":"lsp-http-proxyStrictSSL"},{"location":"page/lsp-julia/","text":"Julia # Server # For more information about the LSP server, check lsp-julia . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations #","title":"Julia"},{"location":"page/lsp-julia/#julia","text":"","title":"Julia"},{"location":"page/lsp-julia/#server","text":"For more information about the LSP server, check lsp-julia .","title":"Server"},{"location":"page/lsp-julia/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-julia/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-julia/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-kotlin/","text":"Kotlin # Server # For more information about the LSP server, check kotlin-language-server . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-clients-kotlin-server-executable # Default: kotlin-language-server The kotlin-language-server executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019. lsp-kotlin-trace-server # Default: off Traces the communication between VSCode and the Kotlin language server. lsp-kotlin-compiler-jvm-target # Default: 1.8 Specifies the JVM target, e.g. \"1.6\" or \"1.8\" lsp-kotlin-linting-debounce-time # Default: 250 [DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues. lsp-kotlin-completion-snippets-enabled # Default: t Specifies whether code completion should provide snippets (true) or plain-text items (false). lsp-kotlin-debug-adapter-enabled # Default: t [Recommended] Specifies whether the debug adapter should be used. When enabled a debugger for Kotlin will be available. lsp-kotlin-debug-adapter-path # Default: `` Optionally a custom path to the debug adapter executable. lsp-kotlin-external-sources-use-kls-scheme # Default: t [Recommended] Specifies whether URIs inside JARs should be represented using the \u2019kls\u2019-scheme. lsp-kotlin-external-sources-auto-convert-to-kotlin # Default: t Specifies whether decompiled/external classes should be auto-converted to Kotlin.","title":"Kotlin"},{"location":"page/lsp-kotlin/#kotlin","text":"","title":"Kotlin"},{"location":"page/lsp-kotlin/#server","text":"For more information about the LSP server, check kotlin-language-server .","title":"Server"},{"location":"page/lsp-kotlin/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-kotlin/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-kotlin/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-kotlin/#lsp-clients-kotlin-server-executable","text":"Default: kotlin-language-server The kotlin-language-server executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019.","title":"lsp-clients-kotlin-server-executable"},{"location":"page/lsp-kotlin/#lsp-kotlin-trace-server","text":"Default: off Traces the communication between VSCode and the Kotlin language server.","title":"lsp-kotlin-trace-server"},{"location":"page/lsp-kotlin/#lsp-kotlin-compiler-jvm-target","text":"Default: 1.8 Specifies the JVM target, e.g. \"1.6\" or \"1.8\"","title":"lsp-kotlin-compiler-jvm-target"},{"location":"page/lsp-kotlin/#lsp-kotlin-linting-debounce-time","text":"Default: 250 [DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues.","title":"lsp-kotlin-linting-debounce-time"},{"location":"page/lsp-kotlin/#lsp-kotlin-completion-snippets-enabled","text":"Default: t Specifies whether code completion should provide snippets (true) or plain-text items (false).","title":"lsp-kotlin-completion-snippets-enabled"},{"location":"page/lsp-kotlin/#lsp-kotlin-debug-adapter-enabled","text":"Default: t [Recommended] Specifies whether the debug adapter should be used. When enabled a debugger for Kotlin will be available.","title":"lsp-kotlin-debug-adapter-enabled"},{"location":"page/lsp-kotlin/#lsp-kotlin-debug-adapter-path","text":"Default: `` Optionally a custom path to the debug adapter executable.","title":"lsp-kotlin-debug-adapter-path"},{"location":"page/lsp-kotlin/#lsp-kotlin-external-sources-use-kls-scheme","text":"Default: t [Recommended] Specifies whether URIs inside JARs should be represented using the \u2019kls\u2019-scheme.","title":"lsp-kotlin-external-sources-use-kls-scheme"},{"location":"page/lsp-kotlin/#lsp-kotlin-external-sources-auto-convert-to-kotlin","text":"Default: t Specifies whether decompiled/external classes should be auto-converted to Kotlin.","title":"lsp-kotlin-external-sources-auto-convert-to-kotlin"},{"location":"page/lsp-latex/","text":"TeX, LaTeX, etc. # Server # For more information about the LSP server, check texlab . Installation # cargo install --git https://github.com/latex-lsp/texlab.git Debugger: Not available # Available functions # lsp-latex-build # Build .tex files with texlab. It use latexmk by default, so add .latexmkrc if you want to customize latex commands or options. You can change build command and option to other such as make , by changing lsp-latex-build-executable and lsp-latex-build-args . This command builds asynchronously by default, while it build synchronously with prefix argument(C-u). lsp-latex-forward-search # Move to current position on pdf viewer. To use, you should set lsp-latex-forward-search-executable and lsp-latex-forward-search-args according to your pdf viewer. See also document of texlab . Note # In this package, you can use even texlab v0.4.2 or older, written with Java, though it is not recommended. If you want to use them, you can write like: ;; Path to Java executable. If it is added to environmental PATH, ;; you don't have to write this. ( setq lsp-latex-java-executable \"/path/to/java\" ) ;; \"texlab.jar\" must be located at a directory contained in `exec-path' ;; \"texlab\" must be located at a directory contained in `exec-path'. ( setq lsp-latex-texlab-jar-file 'search-from-exec-path ) ;; If you want to put \"texlab.jar\" somewhere else, ;; you can specify the path to \"texlab.jar\" as follows: ;; (setq lsp-latex-texlab-jar-file \"/path/to/texlab.jar\") Available configurations #","title":"TeX, LaTeX, etc (texlab, external)"},{"location":"page/lsp-latex/#tex-latex-etc","text":"","title":"TeX, LaTeX, etc."},{"location":"page/lsp-latex/#server","text":"For more information about the LSP server, check texlab .","title":"Server"},{"location":"page/lsp-latex/#installation","text":"cargo install --git https://github.com/latex-lsp/texlab.git","title":"Installation"},{"location":"page/lsp-latex/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-latex/#available-functions","text":"","title":"Available functions"},{"location":"page/lsp-latex/#lsp-latex-build","text":"Build .tex files with texlab. It use latexmk by default, so add .latexmkrc if you want to customize latex commands or options. You can change build command and option to other such as make , by changing lsp-latex-build-executable and lsp-latex-build-args . This command builds asynchronously by default, while it build synchronously with prefix argument(C-u).","title":"lsp-latex-build"},{"location":"page/lsp-latex/#lsp-latex-forward-search","text":"Move to current position on pdf viewer. To use, you should set lsp-latex-forward-search-executable and lsp-latex-forward-search-args according to your pdf viewer. See also document of texlab .","title":"lsp-latex-forward-search"},{"location":"page/lsp-latex/#note","text":"In this package, you can use even texlab v0.4.2 or older, written with Java, though it is not recommended. If you want to use them, you can write like: ;; Path to Java executable. If it is added to environmental PATH, ;; you don't have to write this. ( setq lsp-latex-java-executable \"/path/to/java\" ) ;; \"texlab.jar\" must be located at a directory contained in `exec-path' ;; \"texlab\" must be located at a directory contained in `exec-path'. ( setq lsp-latex-texlab-jar-file 'search-from-exec-path ) ;; If you want to put \"texlab.jar\" somewhere else, ;; you can specify the path to \"texlab.jar\" as follows: ;; (setq lsp-latex-texlab-jar-file \"/path/to/texlab.jar\")","title":"Note"},{"location":"page/lsp-latex/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-lua-language-server/","text":"Lua # Server # For more information about the LSP server, check lua-language-server . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-clients-lua-language-server-install-dir # Default: ~/.emacs.d/.cache/lsp/lua-language-server/ Installation directory for Lua Language Server. lsp-clients-lua-language-server-bin # Default: ~/.emacs.d/.cache/lsp/lua-language-server/bin/Linux/lua-language-server Location of Lua Language Server. lsp-clients-lua-language-server-main-location # Default: ~/.emacs.d/.cache/lsp/lua-language-server/main.lua Location of Lua Language Server main.lua. lsp-clients-lua-language-server-args # Default: (-E) Arguments to run the Lua Language server. lsp-clients-lua-language-server-command # Default: nil Command to start Lua Language server. lsp-lua-color-mode # Default: Semantic Color mode. lsp-lua-completion-call-snippet # Default: Disable Shows function call snippets. lsp-lua-completion-display-context # Default: 6 Previewing the relevant code snippet of the suggestion may help you understand the usage of the suggestion. The number set indicates the number of intercepted lines in the code fragment. If it is set to \u20180\u2018, this feature can be disabled. lsp-lua-completion-enable # Default: t Enable completion. lsp-lua-completion-keyword-snippet # Default: Replace Shows keyword syntax snippets. lsp-lua-develop-debugger-port # Default: 11412 Listen port of debugger. lsp-lua-develop-debugger-wait # Default: nil Suspend before debugger connects. lsp-lua-develop-enable # Default: nil Developer mode. Do not enable, performance will be affected. lsp-lua-diagnostics-disable # Default: nil Disabled diagnostic (Use code in hover brackets). \u2018\u2018\u2018json \"Lua.diagnostics.disable\" : [ \"unused-local\", \"lowercase-global\" ] \u2018\u2018\u2018 lsp-lua-diagnostics-enable # Default: t Enable diagnostics. lsp-lua-diagnostics-globals # Default: nil Defined global variables. \u2018\u2018\u2018json \"Lua.diagnostics.globals\" : [ \"GLOBAL1\", \"GLOBAL2\" ] \u2018\u2018\u2018 lsp-lua-diagnostics-severity # Default: nil Modified diagnostic severity. \u2018\u2018\u2018json \"Lua.diagnostics.severity\" : { \"redefined-local\" : \"Warning\", \"emmy-lua\" : \"Hint\" } \u2018\u2018\u2018 lsp-lua-hover-enable # Default: t Enable hover. lsp-lua-hover-view-number # Default: t Hover to view numeric content (only if literal is not decimal). lsp-lua-hover-view-string # Default: t Hover to view the contents of a string (only if the literal contains an escape character). lsp-lua-hover-view-string-max # Default: 1000 The maximum length of a hover to view the contents of a string. lsp-lua-runtime-path # Default: [?.lua ?/init.lua ?/?.lua] \u2018package.path\u2018 lsp-lua-runtime-version # Default: Lua 5.3 Lua runtime version. lsp-lua-signature-help-enable # Default: t Enable signature help. lsp-lua-workspace-ignore-dir # Default: [.vscode] Ignored directories (Use \u2018.gitignore\u2018 grammar). \u2018\u2018\u2018json \"Lua.workspace.ignoreDir\" : [ \"temp/ . \", \"!temp/*.lua\" ] \u2018\u2018\u2018 lsp-lua-workspace-ignore-submodules # Default: t Ignore submodules. lsp-lua-workspace-library # Default: nil Load external library. This feature can load external Lua files, which can be used for definition, automatic completion and other functions. Note that the language server does not monitor changes in external files and needs to restart if the external files are modified. The following example shows loaded files in \u2018C:/lua\u2018 and \u2018../lib\u2018 ,exclude \u2018../lib/temp\u2018. \u2018\u2018\u2018json \"Lua.workspace.library\": { \"C:/lua\": true, \"../lib\": [ \"temp/*\" ] } \u2018\u2018\u2018 lsp-lua-workspace-max-preload # Default: 300 Max preloaded files. lsp-lua-workspace-preload-file-size # Default: 100 Skip files larger than this value (KB) when preloading. lsp-lua-workspace-use-git-ignore # Default: t Ignore files list in \u2018.gitignore\u2018 . lsp-lua-zzzzzz-cat # Default: nil DONT TOUCH ME, LET ME SLEEP >_< lsp-lua-files-associations # Default: nil files.associations lsp-lua-files-exclude # Default: nil files.exclude","title":"Lua (Lua Language Server)"},{"location":"page/lsp-lua-language-server/#lua","text":"","title":"Lua"},{"location":"page/lsp-lua-language-server/#server","text":"For more information about the LSP server, check lua-language-server .","title":"Server"},{"location":"page/lsp-lua-language-server/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-lua-language-server/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-lua-language-server/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-lua-language-server/#lsp-clients-lua-language-server-install-dir","text":"Default: ~/.emacs.d/.cache/lsp/lua-language-server/ Installation directory for Lua Language Server.","title":"lsp-clients-lua-language-server-install-dir"},{"location":"page/lsp-lua-language-server/#lsp-clients-lua-language-server-bin","text":"Default: ~/.emacs.d/.cache/lsp/lua-language-server/bin/Linux/lua-language-server Location of Lua Language Server.","title":"lsp-clients-lua-language-server-bin"},{"location":"page/lsp-lua-language-server/#lsp-clients-lua-language-server-main-location","text":"Default: ~/.emacs.d/.cache/lsp/lua-language-server/main.lua Location of Lua Language Server main.lua.","title":"lsp-clients-lua-language-server-main-location"},{"location":"page/lsp-lua-language-server/#lsp-clients-lua-language-server-args","text":"Default: (-E) Arguments to run the Lua Language server.","title":"lsp-clients-lua-language-server-args"},{"location":"page/lsp-lua-language-server/#lsp-clients-lua-language-server-command","text":"Default: nil Command to start Lua Language server.","title":"lsp-clients-lua-language-server-command"},{"location":"page/lsp-lua-language-server/#lsp-lua-color-mode","text":"Default: Semantic Color mode.","title":"lsp-lua-color-mode"},{"location":"page/lsp-lua-language-server/#lsp-lua-completion-call-snippet","text":"Default: Disable Shows function call snippets.","title":"lsp-lua-completion-call-snippet"},{"location":"page/lsp-lua-language-server/#lsp-lua-completion-display-context","text":"Default: 6 Previewing the relevant code snippet of the suggestion may help you understand the usage of the suggestion. The number set indicates the number of intercepted lines in the code fragment. If it is set to \u20180\u2018, this feature can be disabled.","title":"lsp-lua-completion-display-context"},{"location":"page/lsp-lua-language-server/#lsp-lua-completion-enable","text":"Default: t Enable completion.","title":"lsp-lua-completion-enable"},{"location":"page/lsp-lua-language-server/#lsp-lua-completion-keyword-snippet","text":"Default: Replace Shows keyword syntax snippets.","title":"lsp-lua-completion-keyword-snippet"},{"location":"page/lsp-lua-language-server/#lsp-lua-develop-debugger-port","text":"Default: 11412 Listen port of debugger.","title":"lsp-lua-develop-debugger-port"},{"location":"page/lsp-lua-language-server/#lsp-lua-develop-debugger-wait","text":"Default: nil Suspend before debugger connects.","title":"lsp-lua-develop-debugger-wait"},{"location":"page/lsp-lua-language-server/#lsp-lua-develop-enable","text":"Default: nil Developer mode. Do not enable, performance will be affected.","title":"lsp-lua-develop-enable"},{"location":"page/lsp-lua-language-server/#lsp-lua-diagnostics-disable","text":"Default: nil Disabled diagnostic (Use code in hover brackets). \u2018\u2018\u2018json \"Lua.diagnostics.disable\" : [ \"unused-local\", \"lowercase-global\" ] \u2018\u2018\u2018","title":"lsp-lua-diagnostics-disable"},{"location":"page/lsp-lua-language-server/#lsp-lua-diagnostics-enable","text":"Default: t Enable diagnostics.","title":"lsp-lua-diagnostics-enable"},{"location":"page/lsp-lua-language-server/#lsp-lua-diagnostics-globals","text":"Default: nil Defined global variables. \u2018\u2018\u2018json \"Lua.diagnostics.globals\" : [ \"GLOBAL1\", \"GLOBAL2\" ] \u2018\u2018\u2018","title":"lsp-lua-diagnostics-globals"},{"location":"page/lsp-lua-language-server/#lsp-lua-diagnostics-severity","text":"Default: nil Modified diagnostic severity. \u2018\u2018\u2018json \"Lua.diagnostics.severity\" : { \"redefined-local\" : \"Warning\", \"emmy-lua\" : \"Hint\" } \u2018\u2018\u2018","title":"lsp-lua-diagnostics-severity"},{"location":"page/lsp-lua-language-server/#lsp-lua-hover-enable","text":"Default: t Enable hover.","title":"lsp-lua-hover-enable"},{"location":"page/lsp-lua-language-server/#lsp-lua-hover-view-number","text":"Default: t Hover to view numeric content (only if literal is not decimal).","title":"lsp-lua-hover-view-number"},{"location":"page/lsp-lua-language-server/#lsp-lua-hover-view-string","text":"Default: t Hover to view the contents of a string (only if the literal contains an escape character).","title":"lsp-lua-hover-view-string"},{"location":"page/lsp-lua-language-server/#lsp-lua-hover-view-string-max","text":"Default: 1000 The maximum length of a hover to view the contents of a string.","title":"lsp-lua-hover-view-string-max"},{"location":"page/lsp-lua-language-server/#lsp-lua-runtime-path","text":"Default: [?.lua ?/init.lua ?/?.lua] \u2018package.path\u2018","title":"lsp-lua-runtime-path"},{"location":"page/lsp-lua-language-server/#lsp-lua-runtime-version","text":"Default: Lua 5.3 Lua runtime version.","title":"lsp-lua-runtime-version"},{"location":"page/lsp-lua-language-server/#lsp-lua-signature-help-enable","text":"Default: t Enable signature help.","title":"lsp-lua-signature-help-enable"},{"location":"page/lsp-lua-language-server/#lsp-lua-workspace-ignore-dir","text":"Default: [.vscode] Ignored directories (Use \u2018.gitignore\u2018 grammar). \u2018\u2018\u2018json \"Lua.workspace.ignoreDir\" : [ \"temp/ . \", \"!temp/*.lua\" ] \u2018\u2018\u2018","title":"lsp-lua-workspace-ignore-dir"},{"location":"page/lsp-lua-language-server/#lsp-lua-workspace-ignore-submodules","text":"Default: t Ignore submodules.","title":"lsp-lua-workspace-ignore-submodules"},{"location":"page/lsp-lua-language-server/#lsp-lua-workspace-library","text":"Default: nil Load external library. This feature can load external Lua files, which can be used for definition, automatic completion and other functions. Note that the language server does not monitor changes in external files and needs to restart if the external files are modified. The following example shows loaded files in \u2018C:/lua\u2018 and \u2018../lib\u2018 ,exclude \u2018../lib/temp\u2018. \u2018\u2018\u2018json \"Lua.workspace.library\": { \"C:/lua\": true, \"../lib\": [ \"temp/*\" ] } \u2018\u2018\u2018","title":"lsp-lua-workspace-library"},{"location":"page/lsp-lua-language-server/#lsp-lua-workspace-max-preload","text":"Default: 300 Max preloaded files.","title":"lsp-lua-workspace-max-preload"},{"location":"page/lsp-lua-language-server/#lsp-lua-workspace-preload-file-size","text":"Default: 100 Skip files larger than this value (KB) when preloading.","title":"lsp-lua-workspace-preload-file-size"},{"location":"page/lsp-lua-language-server/#lsp-lua-workspace-use-git-ignore","text":"Default: t Ignore files list in \u2018.gitignore\u2018 .","title":"lsp-lua-workspace-use-git-ignore"},{"location":"page/lsp-lua-language-server/#lsp-lua-zzzzzz-cat","text":"Default: nil DONT TOUCH ME, LET ME SLEEP >_<","title":"lsp-lua-zzzzzz-cat"},{"location":"page/lsp-lua-language-server/#lsp-lua-files-associations","text":"Default: nil files.associations","title":"lsp-lua-files-associations"},{"location":"page/lsp-lua-language-server/#lsp-lua-files-exclude","text":"Default: nil files.exclude","title":"lsp-lua-files-exclude"},{"location":"page/lsp-lua-lsp/","text":"Lua # Server # For more information about the LSP server, check lua-lsp . Installation # luarocks install --server=https://luarocks.org/dev lua-lsp --local For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-clients-luarocks-bin-dir # Default: ~/.luarocks/bin/ LuaRocks bin directory. lsp-clients-lua-lsp-server-install-dir # Default: nil Installation directory for Lua-Lsp Language Server.","title":"Lua (Lua-Lsp)"},{"location":"page/lsp-lua-lsp/#lua","text":"","title":"Lua"},{"location":"page/lsp-lua-lsp/#server","text":"For more information about the LSP server, check lua-lsp .","title":"Server"},{"location":"page/lsp-lua-lsp/#installation","text":"luarocks install --server=https://luarocks.org/dev lua-lsp --local For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-lua-lsp/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-lua-lsp/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-lua-lsp/#lsp-clients-luarocks-bin-dir","text":"Default: ~/.luarocks/bin/ LuaRocks bin directory.","title":"lsp-clients-luarocks-bin-dir"},{"location":"page/lsp-lua-lsp/#lsp-clients-lua-lsp-server-install-dir","text":"Default: nil Installation directory for Lua-Lsp Language Server.","title":"lsp-clients-lua-lsp-server-install-dir"},{"location":"page/lsp-nim/","text":"Nim # Server # For more information about the LSP server, check nimlsp . Installation # nimble install nimlsp Debugger: Not available # Available configurations #","title":"Nim"},{"location":"page/lsp-nim/#nim","text":"","title":"Nim"},{"location":"page/lsp-nim/#server","text":"For more information about the LSP server, check nimlsp .","title":"Server"},{"location":"page/lsp-nim/#installation","text":"nimble install nimlsp","title":"Installation"},{"location":"page/lsp-nim/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-nim/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-nix/","text":"Nix # Server # For more information about the LSP server, check rnix-lsp . Installation # nix-env -i rnix-lsp Debugger: Not available # Available configurations # lsp-nix-server-path # Default: rnix-lsp Executable path for the server.","title":"Nix"},{"location":"page/lsp-nix/#nix","text":"","title":"Nix"},{"location":"page/lsp-nix/#server","text":"For more information about the LSP server, check rnix-lsp .","title":"Server"},{"location":"page/lsp-nix/#installation","text":"nix-env -i rnix-lsp","title":"Installation"},{"location":"page/lsp-nix/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-nix/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-nix/#lsp-nix-server-path","text":"Default: rnix-lsp Executable path for the server.","title":"lsp-nix-server-path"},{"location":"page/lsp-ocaml-lsp-server/","text":"OCaml # Server # For more information about the LSP server, check ocaml-lsp-server . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations #","title":"OCaml (ocaml-lsp)"},{"location":"page/lsp-ocaml-lsp-server/#ocaml","text":"","title":"OCaml"},{"location":"page/lsp-ocaml-lsp-server/#server","text":"For more information about the LSP server, check ocaml-lsp-server .","title":"Server"},{"location":"page/lsp-ocaml-lsp-server/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-ocaml-lsp-server/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-ocaml-lsp-server/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-ocaml/","text":"OCaml # Server # For more information about the LSP server, check ocaml-language-server . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-ocaml-lang-server-command # Default: (ocaml-language-server --stdio) Command to start ocaml-language-server. lsp-ocaml-lsp-server-command # Default: (ocamllsp) Command to start ocaml-language-server.","title":"OCaml (ocaml)"},{"location":"page/lsp-ocaml/#ocaml","text":"","title":"OCaml"},{"location":"page/lsp-ocaml/#server","text":"For more information about the LSP server, check ocaml-language-server .","title":"Server"},{"location":"page/lsp-ocaml/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-ocaml/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-ocaml/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-ocaml/#lsp-ocaml-lang-server-command","text":"Default: (ocaml-language-server --stdio) Command to start ocaml-language-server.","title":"lsp-ocaml-lang-server-command"},{"location":"page/lsp-ocaml/#lsp-ocaml-lsp-server-command","text":"Default: (ocamllsp) Command to start ocaml-language-server.","title":"lsp-ocaml-lsp-server-command"},{"location":"page/lsp-pascal/","text":"Pascal/Object Pascal # Server # For more information about the LSP server, check pascal-language-server . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations #","title":"Pascal/Object Pascal"},{"location":"page/lsp-pascal/#pascalobject-pascal","text":"","title":"Pascal/Object Pascal"},{"location":"page/lsp-pascal/#server","text":"For more information about the LSP server, check pascal-language-server .","title":"Server"},{"location":"page/lsp-pascal/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-pascal/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-pascal/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-perl/","text":"Perl # Server # For more information about the LSP server, check Perl::LanguageServer . Installation # cpan Perl::LanguageServer Debugger: Not available # Available configurations # lsp-perl-language-server-path # Default: perl Path to perl interpreter. lsp-perl-language-server-port # Default: 13603 Choose listen port. lsp-perl-language-server-client-version # Default: 2.1.0 Choose client version. lsp-perl-perl-cmd # Default: nil Path to perl interpreter used in Perl Language Server. Defaults to \u2018perl\u2019 if nil. lsp-perl-perl-inc # Default: nil A vector of paths to add to perl library path. lsp-perl-file-filter # Default: nil A vector of directories filtering perl file. Defaults to \u2018[\".pm\" \".pl\"]\u2019 if nil. lsp-perl-ignore-dirs # Default: nil A vector of directories to ignore. Defaults to \u2018[\".vscode\" \".git\" \".svn\"]\u2019 if nil.","title":"Perl"},{"location":"page/lsp-perl/#perl","text":"","title":"Perl"},{"location":"page/lsp-perl/#server","text":"For more information about the LSP server, check Perl::LanguageServer .","title":"Server"},{"location":"page/lsp-perl/#installation","text":"cpan Perl::LanguageServer","title":"Installation"},{"location":"page/lsp-perl/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-perl/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-perl/#lsp-perl-language-server-path","text":"Default: perl Path to perl interpreter.","title":"lsp-perl-language-server-path"},{"location":"page/lsp-perl/#lsp-perl-language-server-port","text":"Default: 13603 Choose listen port.","title":"lsp-perl-language-server-port"},{"location":"page/lsp-perl/#lsp-perl-language-server-client-version","text":"Default: 2.1.0 Choose client version.","title":"lsp-perl-language-server-client-version"},{"location":"page/lsp-perl/#lsp-perl-perl-cmd","text":"Default: nil Path to perl interpreter used in Perl Language Server. Defaults to \u2018perl\u2019 if nil.","title":"lsp-perl-perl-cmd"},{"location":"page/lsp-perl/#lsp-perl-perl-inc","text":"Default: nil A vector of paths to add to perl library path.","title":"lsp-perl-perl-inc"},{"location":"page/lsp-perl/#lsp-perl-file-filter","text":"Default: nil A vector of directories filtering perl file. Defaults to \u2018[\".pm\" \".pl\"]\u2019 if nil.","title":"lsp-perl-file-filter"},{"location":"page/lsp-perl/#lsp-perl-ignore-dirs","text":"Default: nil A vector of directories to ignore. Defaults to \u2018[\".vscode\" \".git\" \".svn\"]\u2019 if nil.","title":"lsp-perl-ignore-dirs"},{"location":"page/lsp-php/","text":"PHP # Server # For more information about the LSP server, check php-language-server . Installation # composer require felixfbecker/language-server For more instructions on how to install manually, check here . Debugger: Yes # Available configurations # lsp-clients-php-server-command # Default: (php /home/runner/.composer/vendor/felixfbecker/language-server/bin/php-language-server.php) Install directory for php-language-server.","title":"PHP (felixbecker)"},{"location":"page/lsp-php/#php","text":"","title":"PHP"},{"location":"page/lsp-php/#server","text":"For more information about the LSP server, check php-language-server .","title":"Server"},{"location":"page/lsp-php/#installation","text":"composer require felixfbecker/language-server For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-php/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-php/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-php/#lsp-clients-php-server-command","text":"Default: (php /home/runner/.composer/vendor/felixfbecker/language-server/bin/php-language-server.php) Install directory for php-language-server.","title":"lsp-clients-php-server-command"},{"location":"page/lsp-phpactor/","text":"Phpactor # Server # For more information about the LSP server, check phpactor . Installation # composer g require phpactor/phpactor For more instructions on how to install manually, check here . Debugger: yes # Available configurations # lsp-phpactor-path # Default: ~/.composer/vendor/phpactor/phpactor/bin/phpactor Path to the \u2018phpactor\u2019 command. lsp-phpactor-extension-alist # Default: ((Phpstan . phpactor/language-server-phpstan-extension) (Behat . phpactor/behat-extension) (PHPUnit . phpactor/phpunit-extension)) Alist mapping extension names to \u2018composer\u2019 packages. These extensions can be installed using \u2018lsp-phpactor-install-extension\u2019.","title":"PHP (phpactor)"},{"location":"page/lsp-phpactor/#phpactor","text":"","title":"Phpactor"},{"location":"page/lsp-phpactor/#server","text":"For more information about the LSP server, check phpactor .","title":"Server"},{"location":"page/lsp-phpactor/#installation","text":"composer g require phpactor/phpactor For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-phpactor/#debugger-yes","text":"","title":"Debugger: yes"},{"location":"page/lsp-phpactor/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-phpactor/#lsp-phpactor-path","text":"Default: ~/.composer/vendor/phpactor/phpactor/bin/phpactor Path to the \u2018phpactor\u2019 command.","title":"lsp-phpactor-path"},{"location":"page/lsp-phpactor/#lsp-phpactor-extension-alist","text":"Default: ((Phpstan . phpactor/language-server-phpstan-extension) (Behat . phpactor/behat-extension) (PHPUnit . phpactor/phpunit-extension)) Alist mapping extension names to \u2018composer\u2019 packages. These extensions can be installed using \u2018lsp-phpactor-install-extension\u2019.","title":"lsp-phpactor-extension-alist"},{"location":"page/lsp-prolog/","text":"Prolog # Server # For more information about the LSP server, check lsp_server . Installation # swipl -g 'pack_install(lsp_server).' Debugger: Not available # Available configurations #","title":"Prolog"},{"location":"page/lsp-prolog/#prolog","text":"","title":"Prolog"},{"location":"page/lsp-prolog/#server","text":"For more information about the LSP server, check lsp_server .","title":"Server"},{"location":"page/lsp-prolog/#installation","text":"swipl -g 'pack_install(lsp_server).'","title":"Installation"},{"location":"page/lsp-prolog/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-prolog/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-purescript/","text":"PureScript # Server # For more information about the LSP server, check purescript-language-server . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET pursls RET . npm i -g purescript-language-server For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-purescript-server-executable # Default: nil Path to server executable. lsp-purescript-server-args # Default: (--stdio) Arguments to pass to the server.","title":"PureScript"},{"location":"page/lsp-purescript/#purescript","text":"","title":"PureScript"},{"location":"page/lsp-purescript/#server","text":"For more information about the LSP server, check purescript-language-server .","title":"Server"},{"location":"page/lsp-purescript/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET pursls RET . npm i -g purescript-language-server For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-purescript/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-purescript/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-purescript/#lsp-purescript-server-executable","text":"Default: nil Path to server executable.","title":"lsp-purescript-server-executable"},{"location":"page/lsp-purescript/#lsp-purescript-server-args","text":"Default: (--stdio) Arguments to pass to the server.","title":"lsp-purescript-server-args"},{"location":"page/lsp-pwsh/","text":"Powershell # Server # For more information about the LSP server, check PowerShellEditorServices . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET pwsh-ls RET . Automatic Debugger: Yes # Available configurations # lsp-pwsh-help-completion # Default: BlockComment Controls the comment-based help completion behavior triggered by typing \u2019##\u2019. Set the generated help style with \u2019BlockComment\u2019 or \u2019LineComment\u2019. Disable the feature with \u2019Disabled\u2019. lsp-pwsh-script-analysis-enable # Default: t Enables real-time script analysis from PowerShell Script Analyzer. Uses the newest installed version of the PSScriptAnalyzer module or the version bundled with this extension, if it is newer. lsp-pwsh-script-analysis-settings-path # Default: `` Specifies the path to a PowerShell Script Analyzer settings file. To override the default settings for all projects, enter an absolute path, or enter a path relative to your workspace. lsp-pwsh-code-folding-enable # Default: t Enables syntax based code folding. When disabled, the default indentation based code folding is used. lsp-pwsh-code-folding-show-last-line # Default: t Shows the last line of a folded section. Similar to the default VSCode folding style. When disabled, the entire folded region is hidden. lsp-pwsh-code-formatting-preset # Default: Custom Sets the codeformatting options to follow the given indent style. Sets in a way that is compatible with PowerShell syntax. For more information about the brace styles please refer to https://github.com/PoshCode/PowerShellPracticeAndStyle/issues/81. lsp-pwsh-code-formatting-open-brace-on-same-line # Default: t Places open brace on the same line as its associated statement. lsp-pwsh-code-formatting-new-line-after-open-brace # Default: t Adds a newline (line break) after an open brace. lsp-pwsh-code-formatting-new-line-after-close-brace # Default: t Adds a newline (line break) after a closing brace. lsp-pwsh-code-formatting-pipeline-indentation-style # Default: NoIndentation Multi-line pipeline style settings. lsp-pwsh-code-formatting-whitespace-before-open-brace # Default: t Adds a space between a keyword and its associated scriptblock expression. lsp-pwsh-code-formatting-whitespace-before-open-paren # Default: t Adds a space between a keyword (if, elseif, while, switch, etc) and its associated conditional expression. lsp-pwsh-code-formatting-whitespace-around-operator # Default: t Adds spaces before and after an operator (\u2019=\u2019, \u2019+\u2019, \u2019-\u2019, etc.). lsp-pwsh-code-formatting-whitespace-after-separator # Default: t Adds a space after a separator (\u2019,\u2019 and \u2019;\u2019). lsp-pwsh-code-formatting-whitespace-inside-brace # Default: t Adds a space after an opening brace (\u2019{\u2019) and before a closing brace (\u2019}\u2019). lsp-pwsh-code-formatting-whitespace-around-pipe # Default: t Adds a space before and after the pipeline operator (\u2019|\u2019). lsp-pwsh-code-formatting-ignore-one-line-block # Default: t Does not reformat one-line code blocks, such as \"if (...) {...} else {...}\". lsp-pwsh-code-formatting-align-property-value-pairs # Default: t Align assignment statements in a hashtable or a DSC Configuration. lsp-pwsh-code-formatting-use-correct-casing # Default: nil Use correct casing for cmdlets. lsp-pwsh-developer-editor-services-log-level # Default: Normal Sets the log level for the PowerShell Editor Services host executable. Valid values are \u2019Diagnostic\u2019, \u2019Verbose\u2019, \u2019Normal\u2019, \u2019Warning\u2019, and \u2019Error\u2019 lsp-pwsh-developer-editor-services-wait-for-debugger # Default: nil Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding. lsp-pwsh-developer-feature-flags # Default: nil An array of strings that enable experimental features in the PowerShell extension. lsp-pwsh-ext-path # Default: /home/runner/.emacs.d/.cache/lsp/pwsh The path to powershell vscode extension. lsp-pwsh-exe # Default: /usr/bin/pwsh PowerShell executable. lsp-pwsh-dir # Default: /home/runner/.emacs.d/.cache/lsp/pwsh/PowerShellEditorServices Path to PowerShellEditorServices without last slash. lsp-pwsh-github-asset-url # Default: https://github.com/%s/%s/releases/latest/download/%s GitHub latest asset template url.","title":"Powershell"},{"location":"page/lsp-pwsh/#powershell","text":"","title":"Powershell"},{"location":"page/lsp-pwsh/#server","text":"For more information about the LSP server, check PowerShellEditorServices .","title":"Server"},{"location":"page/lsp-pwsh/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET pwsh-ls RET . Automatic","title":"Installation"},{"location":"page/lsp-pwsh/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-pwsh/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-pwsh/#lsp-pwsh-help-completion","text":"Default: BlockComment Controls the comment-based help completion behavior triggered by typing \u2019##\u2019. Set the generated help style with \u2019BlockComment\u2019 or \u2019LineComment\u2019. Disable the feature with \u2019Disabled\u2019.","title":"lsp-pwsh-help-completion"},{"location":"page/lsp-pwsh/#lsp-pwsh-script-analysis-enable","text":"Default: t Enables real-time script analysis from PowerShell Script Analyzer. Uses the newest installed version of the PSScriptAnalyzer module or the version bundled with this extension, if it is newer.","title":"lsp-pwsh-script-analysis-enable"},{"location":"page/lsp-pwsh/#lsp-pwsh-script-analysis-settings-path","text":"Default: `` Specifies the path to a PowerShell Script Analyzer settings file. To override the default settings for all projects, enter an absolute path, or enter a path relative to your workspace.","title":"lsp-pwsh-script-analysis-settings-path"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-folding-enable","text":"Default: t Enables syntax based code folding. When disabled, the default indentation based code folding is used.","title":"lsp-pwsh-code-folding-enable"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-folding-show-last-line","text":"Default: t Shows the last line of a folded section. Similar to the default VSCode folding style. When disabled, the entire folded region is hidden.","title":"lsp-pwsh-code-folding-show-last-line"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-preset","text":"Default: Custom Sets the codeformatting options to follow the given indent style. Sets in a way that is compatible with PowerShell syntax. For more information about the brace styles please refer to https://github.com/PoshCode/PowerShellPracticeAndStyle/issues/81.","title":"lsp-pwsh-code-formatting-preset"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-open-brace-on-same-line","text":"Default: t Places open brace on the same line as its associated statement.","title":"lsp-pwsh-code-formatting-open-brace-on-same-line"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-new-line-after-open-brace","text":"Default: t Adds a newline (line break) after an open brace.","title":"lsp-pwsh-code-formatting-new-line-after-open-brace"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-new-line-after-close-brace","text":"Default: t Adds a newline (line break) after a closing brace.","title":"lsp-pwsh-code-formatting-new-line-after-close-brace"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-pipeline-indentation-style","text":"Default: NoIndentation Multi-line pipeline style settings.","title":"lsp-pwsh-code-formatting-pipeline-indentation-style"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-before-open-brace","text":"Default: t Adds a space between a keyword and its associated scriptblock expression.","title":"lsp-pwsh-code-formatting-whitespace-before-open-brace"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-before-open-paren","text":"Default: t Adds a space between a keyword (if, elseif, while, switch, etc) and its associated conditional expression.","title":"lsp-pwsh-code-formatting-whitespace-before-open-paren"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-around-operator","text":"Default: t Adds spaces before and after an operator (\u2019=\u2019, \u2019+\u2019, \u2019-\u2019, etc.).","title":"lsp-pwsh-code-formatting-whitespace-around-operator"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-after-separator","text":"Default: t Adds a space after a separator (\u2019,\u2019 and \u2019;\u2019).","title":"lsp-pwsh-code-formatting-whitespace-after-separator"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-inside-brace","text":"Default: t Adds a space after an opening brace (\u2019{\u2019) and before a closing brace (\u2019}\u2019).","title":"lsp-pwsh-code-formatting-whitespace-inside-brace"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-around-pipe","text":"Default: t Adds a space before and after the pipeline operator (\u2019|\u2019).","title":"lsp-pwsh-code-formatting-whitespace-around-pipe"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-ignore-one-line-block","text":"Default: t Does not reformat one-line code blocks, such as \"if (...) {...} else {...}\".","title":"lsp-pwsh-code-formatting-ignore-one-line-block"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-align-property-value-pairs","text":"Default: t Align assignment statements in a hashtable or a DSC Configuration.","title":"lsp-pwsh-code-formatting-align-property-value-pairs"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-use-correct-casing","text":"Default: nil Use correct casing for cmdlets.","title":"lsp-pwsh-code-formatting-use-correct-casing"},{"location":"page/lsp-pwsh/#lsp-pwsh-developer-editor-services-log-level","text":"Default: Normal Sets the log level for the PowerShell Editor Services host executable. Valid values are \u2019Diagnostic\u2019, \u2019Verbose\u2019, \u2019Normal\u2019, \u2019Warning\u2019, and \u2019Error\u2019","title":"lsp-pwsh-developer-editor-services-log-level"},{"location":"page/lsp-pwsh/#lsp-pwsh-developer-editor-services-wait-for-debugger","text":"Default: nil Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding.","title":"lsp-pwsh-developer-editor-services-wait-for-debugger"},{"location":"page/lsp-pwsh/#lsp-pwsh-developer-feature-flags","text":"Default: nil An array of strings that enable experimental features in the PowerShell extension.","title":"lsp-pwsh-developer-feature-flags"},{"location":"page/lsp-pwsh/#lsp-pwsh-ext-path","text":"Default: /home/runner/.emacs.d/.cache/lsp/pwsh The path to powershell vscode extension.","title":"lsp-pwsh-ext-path"},{"location":"page/lsp-pwsh/#lsp-pwsh-exe","text":"Default: /usr/bin/pwsh PowerShell executable.","title":"lsp-pwsh-exe"},{"location":"page/lsp-pwsh/#lsp-pwsh-dir","text":"Default: /home/runner/.emacs.d/.cache/lsp/pwsh/PowerShellEditorServices Path to PowerShellEditorServices without last slash.","title":"lsp-pwsh-dir"},{"location":"page/lsp-pwsh/#lsp-pwsh-github-asset-url","text":"Default: https://github.com/%s/%s/releases/latest/download/%s GitHub latest asset template url.","title":"lsp-pwsh-github-asset-url"},{"location":"page/lsp-pyls/","text":"Python # Server # For more information about the LSP server, check pyls . Installation # pip install \u2018python-language-server[all]\u2019 Debugger: Yes # Available configurations # lsp-clients-python-library-directories # Default: (/usr/) List of directories which will be considered to be libraries. lsp-pyls-server-command # Default: (pyls) Command to start pyls. lsp-pyls-configuration-sources # Default: [pycodestyle] List of configuration sources to use. lsp-pyls-plugins-jedi-completion-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-completion-include-params # Default: t Auto-completes methods and classes with tabstops for each parameter. lsp-pyls-plugins-jedi-definition-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-definition-follow-imports # Default: t The goto call will follow imports. lsp-pyls-plugins-jedi-definition-follow-builtin-imports # Default: t If follow_imports is True will decide if it follow builtin imports. lsp-pyls-plugins-jedi-hover-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-references-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-signature-help-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-symbols-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-symbols-all-scopes # Default: t If True lists the names of all scopes instead of only the module namespace. lsp-pyls-plugins-mccabe-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-mccabe-threshold # Default: 15 The minimum threshold that triggers warnings about cyclomatic complexity. lsp-pyls-plugins-preload-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-preload-modules # Default: nil List of modules to import on startup lsp-pyls-plugins-pylint-enabled # Default: nil Enable or disable the plugin. lsp-pyls-plugins-pylint-args # Default: [] Arguments, passed to pylint lsp-pyls-plugins-pycodestyle-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-pycodestyle-exclude # Default: nil Exclude files or directories which match these patterns. lsp-pyls-plugins-pycodestyle-filename # Default: nil When parsing directories, only check filenames matching these patterns. lsp-pyls-plugins-pycodestyle-select # Default: nil Select errors and warnings lsp-pyls-plugins-pycodestyle-ignore # Default: nil Ignore errors and warnings lsp-pyls-plugins-pycodestyle-hang-closing # Default: nil Hang closing bracket instead of matching indentation of opening bracket\u2019s line. lsp-pyls-plugins-pycodestyle-max-line-length # Default: nil Set maximum allowed line length. lsp-pyls-plugins-pydocstyle-enabled # Default: nil Enable or disable the plugin. lsp-pyls-plugins-pydocstyle-convention # Default: nil Choose the basic list of checked errors by specifying an existing convention. lsp-pyls-plugins-pydocstyle-add-ignore # Default: nil Ignore errors and warnings in addition to the specified convention. lsp-pyls-plugins-pydocstyle-add-select # Default: nil Select errors and warnings in addition to the specified convention. lsp-pyls-plugins-pydocstyle-ignore # Default: nil Ignore errors and warnings lsp-pyls-plugins-pydocstyle-select # Default: nil Select errors and warnings lsp-pyls-plugins-pydocstyle-match # Default: (?!test_).*\\.py Check only files that exactly match the given regular expression; default is to match files that don\u2019t start with \u2019test_\u2019 but end with \u2019.py\u2019. lsp-pyls-plugins-pydocstyle-match-dir # Default: [^\\.].* Search only dirs that exactly match the given regular expression; default is to match dirs which do not begin with a dot. lsp-pyls-plugins-pyflakes-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-rope-completion-enabled # Default: nil Enable or disable the plugin. lsp-pyls-plugins-autopep8-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-yapf-enabled # Default: nil Enable or disable the plugin. lsp-pyls-rope-extension-modules # Default: nil Builtin and c-extension modules that are allowed to be imported and inspected by rope. lsp-pyls-rope-rope-folder # Default: nil The name of the folder in which rope stores project configurations and data. Pass \u2018nil\u2018 for not using such a folder at all. lsp-pyls-plugins-flake8-enabled # Default: nil Enable or disable the plugin. lsp-pyls-plugins-flake8-exclude # Default: nil List of glob patterns to exclude from checks. lsp-pyls-plugins-flake8-filename # Default: nil List of glob patterns to include for checks. lsp-pyls-plugins-flake8-hang-closing # Default: nil Toggle whether pycodestyle should enforce matching the indentation of the opening bracket\u2019s line. When you specify this, it will prefer that you hang the closing bracket rather than match the indentation. lsp-pyls-plugins-flake8-ignore # Default: nil A list of codes to ignore. lsp-pyls-plugins-flake8-max-line-length # Default: nil Set the maximum length that any line (with some exceptions) may be. Exceptions include lines that are either strings or comments which are entirely URLs. lsp-pyls-plugins-flake8-select # Default: nil Specify the list of error codes you wish Flake8 to report. Similarly to \u2018lsp-pyls-plugins-flake8-ignore\u2019. You can specify a portion of an error code to get all that start with that string. For example, you can use E, E4, E43, and E431 lsp-pyls-plugins-flake8-config # Default: nil A path to a config file that will be the only config file read and used. This will cause Flake8 to ignore all other config files that exist. NOTE: other parameters as \u2018lsp-pyls-plugins-flake8-max-line-length\u2019 take precedence over parameters referenced in config. lsp-pyls-plugins-jedi-use-pyenv-environment # Default: nil If enabled, pass the environment got by pyenv to jedi lsp-pyls-plugins-jedi-environment # Default: nil Specify the environment that jedi runs on where /bin/python should be the python executable. This option will be prioritized over \u2018lsp-pyls-plugins-jedi-use-pyenv-environment\u2019. lsp-pyls-plugins-jedi-completion-fuzzy # Default: nil If enabled, uses fuzzy completion in jedi. Requires pyls >= 0.32.0 Can hit performance, as well as lsp-mode implements its own fuzzy search on completion items. lsp-pyls-plugins-jedi-completion-include-class-objects # Default: t If enabled, adds class objects to completion in order to avoid snippet with init args. Has no effect if \u2018lsp-pyls-plugins-jedi-completion-include-params\u2019 is disabled. Requires pyls >= 0.33.0 lsp-pyls-rename-backend # Default: jedi Choose renaming backend. Jedi is preferred but only works for python >= 3.6 and pyls >= 0.32.0 Beware that Jedi is lazy and doesn\u2019t scan the whole project. So it will rename only references it can find.","title":"Python (Palantir)"},{"location":"page/lsp-pyls/#python","text":"","title":"Python"},{"location":"page/lsp-pyls/#server","text":"For more information about the LSP server, check pyls .","title":"Server"},{"location":"page/lsp-pyls/#installation","text":"pip install \u2018python-language-server[all]\u2019","title":"Installation"},{"location":"page/lsp-pyls/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-pyls/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-pyls/#lsp-clients-python-library-directories","text":"Default: (/usr/) List of directories which will be considered to be libraries.","title":"lsp-clients-python-library-directories"},{"location":"page/lsp-pyls/#lsp-pyls-server-command","text":"Default: (pyls) Command to start pyls.","title":"lsp-pyls-server-command"},{"location":"page/lsp-pyls/#lsp-pyls-configuration-sources","text":"Default: [pycodestyle] List of configuration sources to use.","title":"lsp-pyls-configuration-sources"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-completion-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-completion-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-completion-include-params","text":"Default: t Auto-completes methods and classes with tabstops for each parameter.","title":"lsp-pyls-plugins-jedi-completion-include-params"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-definition-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-definition-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-definition-follow-imports","text":"Default: t The goto call will follow imports.","title":"lsp-pyls-plugins-jedi-definition-follow-imports"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-definition-follow-builtin-imports","text":"Default: t If follow_imports is True will decide if it follow builtin imports.","title":"lsp-pyls-plugins-jedi-definition-follow-builtin-imports"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-hover-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-hover-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-references-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-references-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-signature-help-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-signature-help-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-symbols-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-symbols-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-symbols-all-scopes","text":"Default: t If True lists the names of all scopes instead of only the module namespace.","title":"lsp-pyls-plugins-jedi-symbols-all-scopes"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-mccabe-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-mccabe-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-mccabe-threshold","text":"Default: 15 The minimum threshold that triggers warnings about cyclomatic complexity.","title":"lsp-pyls-plugins-mccabe-threshold"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-preload-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-preload-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-preload-modules","text":"Default: nil List of modules to import on startup","title":"lsp-pyls-plugins-preload-modules"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pylint-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-pylint-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pylint-args","text":"Default: [] Arguments, passed to pylint","title":"lsp-pyls-plugins-pylint-args"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-pycodestyle-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-exclude","text":"Default: nil Exclude files or directories which match these patterns.","title":"lsp-pyls-plugins-pycodestyle-exclude"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-filename","text":"Default: nil When parsing directories, only check filenames matching these patterns.","title":"lsp-pyls-plugins-pycodestyle-filename"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-select","text":"Default: nil Select errors and warnings","title":"lsp-pyls-plugins-pycodestyle-select"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-ignore","text":"Default: nil Ignore errors and warnings","title":"lsp-pyls-plugins-pycodestyle-ignore"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-hang-closing","text":"Default: nil Hang closing bracket instead of matching indentation of opening bracket\u2019s line.","title":"lsp-pyls-plugins-pycodestyle-hang-closing"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-max-line-length","text":"Default: nil Set maximum allowed line length.","title":"lsp-pyls-plugins-pycodestyle-max-line-length"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-pydocstyle-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-convention","text":"Default: nil Choose the basic list of checked errors by specifying an existing convention.","title":"lsp-pyls-plugins-pydocstyle-convention"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-add-ignore","text":"Default: nil Ignore errors and warnings in addition to the specified convention.","title":"lsp-pyls-plugins-pydocstyle-add-ignore"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-add-select","text":"Default: nil Select errors and warnings in addition to the specified convention.","title":"lsp-pyls-plugins-pydocstyle-add-select"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-ignore","text":"Default: nil Ignore errors and warnings","title":"lsp-pyls-plugins-pydocstyle-ignore"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-select","text":"Default: nil Select errors and warnings","title":"lsp-pyls-plugins-pydocstyle-select"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-match","text":"Default: (?!test_).*\\.py Check only files that exactly match the given regular expression; default is to match files that don\u2019t start with \u2019test_\u2019 but end with \u2019.py\u2019.","title":"lsp-pyls-plugins-pydocstyle-match"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-match-dir","text":"Default: [^\\.].* Search only dirs that exactly match the given regular expression; default is to match dirs which do not begin with a dot.","title":"lsp-pyls-plugins-pydocstyle-match-dir"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pyflakes-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-pyflakes-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-rope-completion-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-rope-completion-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-autopep8-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-autopep8-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-yapf-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-yapf-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-rope-extension-modules","text":"Default: nil Builtin and c-extension modules that are allowed to be imported and inspected by rope.","title":"lsp-pyls-rope-extension-modules"},{"location":"page/lsp-pyls/#lsp-pyls-rope-rope-folder","text":"Default: nil The name of the folder in which rope stores project configurations and data. Pass \u2018nil\u2018 for not using such a folder at all.","title":"lsp-pyls-rope-rope-folder"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-flake8-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-exclude","text":"Default: nil List of glob patterns to exclude from checks.","title":"lsp-pyls-plugins-flake8-exclude"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-filename","text":"Default: nil List of glob patterns to include for checks.","title":"lsp-pyls-plugins-flake8-filename"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-hang-closing","text":"Default: nil Toggle whether pycodestyle should enforce matching the indentation of the opening bracket\u2019s line. When you specify this, it will prefer that you hang the closing bracket rather than match the indentation.","title":"lsp-pyls-plugins-flake8-hang-closing"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-ignore","text":"Default: nil A list of codes to ignore.","title":"lsp-pyls-plugins-flake8-ignore"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-max-line-length","text":"Default: nil Set the maximum length that any line (with some exceptions) may be. Exceptions include lines that are either strings or comments which are entirely URLs.","title":"lsp-pyls-plugins-flake8-max-line-length"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-select","text":"Default: nil Specify the list of error codes you wish Flake8 to report. Similarly to \u2018lsp-pyls-plugins-flake8-ignore\u2019. You can specify a portion of an error code to get all that start with that string. For example, you can use E, E4, E43, and E431","title":"lsp-pyls-plugins-flake8-select"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-config","text":"Default: nil A path to a config file that will be the only config file read and used. This will cause Flake8 to ignore all other config files that exist. NOTE: other parameters as \u2018lsp-pyls-plugins-flake8-max-line-length\u2019 take precedence over parameters referenced in config.","title":"lsp-pyls-plugins-flake8-config"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-use-pyenv-environment","text":"Default: nil If enabled, pass the environment got by pyenv to jedi","title":"lsp-pyls-plugins-jedi-use-pyenv-environment"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-environment","text":"Default: nil Specify the environment that jedi runs on where /bin/python should be the python executable. This option will be prioritized over \u2018lsp-pyls-plugins-jedi-use-pyenv-environment\u2019.","title":"lsp-pyls-plugins-jedi-environment"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-completion-fuzzy","text":"Default: nil If enabled, uses fuzzy completion in jedi. Requires pyls >= 0.32.0 Can hit performance, as well as lsp-mode implements its own fuzzy search on completion items.","title":"lsp-pyls-plugins-jedi-completion-fuzzy"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-completion-include-class-objects","text":"Default: t If enabled, adds class objects to completion in order to avoid snippet with init args. Has no effect if \u2018lsp-pyls-plugins-jedi-completion-include-params\u2019 is disabled. Requires pyls >= 0.33.0","title":"lsp-pyls-plugins-jedi-completion-include-class-objects"},{"location":"page/lsp-pyls/#lsp-pyls-rename-backend","text":"Default: jedi Choose renaming backend. Jedi is preferred but only works for python >= 3.6 and pyls >= 0.32.0 Beware that Jedi is lazy and doesn\u2019t scan the whole project. So it will rename only references it can find.","title":"lsp-pyls-rename-backend"},{"location":"page/lsp-pyright/","text":"Python(Pyright) # Server # For more information about the LSP server, check pyright-langserver . Installation # For more instructions on how to install manually, check here . Debugger: Yes # Available configurations #","title":"Lsp pyright"},{"location":"page/lsp-pyright/#pythonpyright","text":"","title":"Python(Pyright)"},{"location":"page/lsp-pyright/#server","text":"For more information about the LSP server, check pyright-langserver .","title":"Server"},{"location":"page/lsp-pyright/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-pyright/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-pyright/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-python-ms/","text":"Python(Microsoft) # Server # For more information about the LSP server, check Microsoft Python Language Server . Installation # For more instructions on how to install manually, check here . Debugger: Yes # Available configurations #","title":"Lsp python ms"},{"location":"page/lsp-python-ms/#pythonmicrosoft","text":"","title":"Python(Microsoft)"},{"location":"page/lsp-python-ms/#server","text":"For more information about the LSP server, check Microsoft Python Language Server .","title":"Server"},{"location":"page/lsp-python-ms/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-python-ms/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-python-ms/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-r/","text":"R # Server # For more information about the LSP server, check languageserver . Installation # install.packages(\u201clanguageserver\u201d) For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-clients-r-server-command # Default: (R --slave -e languageserver::run()) Command to start the R language server.","title":"R"},{"location":"page/lsp-r/#r","text":"","title":"R"},{"location":"page/lsp-r/#server","text":"For more information about the LSP server, check languageserver .","title":"Server"},{"location":"page/lsp-r/#installation","text":"install.packages(\u201clanguageserver\u201d) For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-r/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-r/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-r/#lsp-clients-r-server-command","text":"Default: (R --slave -e languageserver::run()) Command to start the R language server.","title":"lsp-clients-r-server-command"},{"location":"page/lsp-racket-langserver/","text":"Racket (jeapostrophe) # Server # For more information about the LSP server, check racket-langserver . Installation # raco pkg install racket-langserver Debugger: Not available # Available configurations #","title":"Racket (jeapostrophe)"},{"location":"page/lsp-racket-langserver/#racket-jeapostrophe","text":"","title":"Racket (jeapostrophe)"},{"location":"page/lsp-racket-langserver/#server","text":"For more information about the LSP server, check racket-langserver .","title":"Server"},{"location":"page/lsp-racket-langserver/#installation","text":"raco pkg install racket-langserver","title":"Installation"},{"location":"page/lsp-racket-langserver/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-racket-langserver/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-racket-language-server/","text":"Racket (Theia) # Server # For more information about the LSP server, check racket-language-server . Installation # raco pkg install racket-language-server Debugger: Not available # Available configurations #","title":"Racket (Theia)"},{"location":"page/lsp-racket-language-server/#racket-theia","text":"","title":"Racket (Theia)"},{"location":"page/lsp-racket-language-server/#server","text":"For more information about the LSP server, check racket-language-server .","title":"Server"},{"location":"page/lsp-racket-language-server/#installation","text":"raco pkg install racket-language-server","title":"Installation"},{"location":"page/lsp-racket-language-server/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-racket-language-server/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-robot/","text":"robot framework # Server # For more information about the LSP server, check rf-intellisense . Installation # pip install robotframework --user For more instructions on how to install manually, check here . Debugger: Yes # Available configurations #","title":"Lsp robot"},{"location":"page/lsp-robot/#robot-framework","text":"","title":"robot framework"},{"location":"page/lsp-robot/#server","text":"For more information about the LSP server, check rf-intellisense .","title":"Server"},{"location":"page/lsp-robot/#installation","text":"pip install robotframework --user For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-robot/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-robot/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-rust-analyzer/","text":"Rust # Server # For more information about the LSP server, check rust-analyzer . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations #","title":"Lsp rust analyzer"},{"location":"page/lsp-rust-analyzer/#rust","text":"","title":"Rust"},{"location":"page/lsp-rust-analyzer/#server","text":"For more information about the LSP server, check rust-analyzer .","title":"Server"},{"location":"page/lsp-rust-analyzer/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-rust-analyzer/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-rust-analyzer/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-rust/","text":"Rust # Server # For more information about the LSP server, check rls . Installation # For more instructions on how to install manually, check here . Debugger: Yes # Server note # NOTE: If you are using rustic-mode , you have to change rustic-lsp-server instead of lsp-rust-server , since it also supports eglot as a lightweight alternative to lsp-mode. lsp-rust-server Choose LSP server (default is RLS) lsp-rust-switch-server Switch priorities of lsp servers RLS # Customization # This is an incomplete list of the available options lsp-rust-rls-server-command change command to start RLS lsp-rust-show-hover-context turn off hover tooltips rustfmt # Code formatting with rustfmt can be configured with: lsp-rust-rustfmt-path change default path for rustfmt executable To enable automatic code format on save, add this to your init.el ( rust-mode is assumed to be installed): (add-hook 'before-save-hook (lambda () (when (eq 'rust-mode major-mode) (lsp-format-buffer)))) rust-analyzer # Commands # lsp-rust-analyzer-syntax-tree # Display syntax tree for current buffer lsp-rust-analyzer-status # Display status information for rust-analyzer lsp-rust-analyzer-join-lines # Join selected lines into one, smartly fixing up whitespace and trailing commas before: after: inlay-hints # lsp-rust-analyzer-inlay-hints-mode enables displaying of inlay hints NOTE: the inlay hints interact badly with the lsp-ui sideline, because it doesn't seem to consider the overlays in its width calculation, which often leads to lines wrapping around. Macro expansion # lsp-rust-analyzer-expand-macro expand macro call at point recursively Use your own function for displaying macro expansion by customizing lsp-rust-analyzer-macro-expansion-method Formatted and highlighted result with the default function of rustic. auto-import # Get a list of possible auto import candidates with lsp-execute-code-action Caveats # Rust Analyzer does not support disabling snippets - https://github.com/rust-analyzer/rust-analyzer/issues/2518 extract signature # This unmerged PR contains an example method that allows modifying the signature that is displayed by eldoc. Available configurations # lsp-rust-server # Default: rust-analyzer Choose LSP server. lsp-rust-rls-server-command # Default: (rls) Command to start RLS. lsp-rust-library-directories # Default: (~/.cargo/registry/src ~/.rustup/toolchains) List of directories which will be considered to be libraries. lsp-rust-sysroot # Default: nil If non-nil, use the given path as the sysroot for all rustc invocations instead of trying to detect the sysroot automatically. lsp-rust-target # Default: nil If non-nil, use the given target triple for all rustc invocations. lsp-rust-rustflags # Default: nil Flags added to RUSTFLAGS. lsp-rust-clear-env-rust-log # Default: t Clear the RUST_LOG environment variable before running rustc or cargo. lsp-rust-build-lib # Default: nil If non-nil, checks the project as if you passed the \u2018--lib\u2019 argument to cargo. Mutually exclusive with, and preferred over, \u2018lsp-rust-build-bin\u2019. (Unstable) lsp-rust-build-bin # Default: nil If non-nil, checks the project as if you passed \u2018-- bin \u2019 argument to cargo. Mutually exclusive with \u2018lsp-rust-build-lib\u2019. (Unstable) lsp-rust-cfg-test # Default: nil If non-nil, checks the project as if you were running \u2018cargo test\u2019 rather than cargo build. I.e., compiles (but does not run) test code. lsp-rust-unstable-features # Default: nil Enable unstable features. lsp-rust-wait-to-build # Default: nil Time in milliseconds between receiving a change notification and starting build. If not specified, automatically inferred by the latest build duration. lsp-rust-show-warnings # Default: t Show warnings. lsp-rust-crate-blacklist # Default: [cocoa gleam glium idna libc openssl rustc_serialize serde serde_json typenum unicode_normalization unicode_segmentation winapi] A list of Cargo crates to blacklist. lsp-rust-build-on-save # Default: nil Only index the project when a file is saved and not on change. lsp-rust-features # Default: [] List of Cargo features to enable. lsp-rust-all-features # Default: nil Enable all Cargo features. lsp-rust-no-default-features # Default: nil Do not enable default Cargo features. lsp-rust-racer-completion # Default: t Enables code completion using racer. lsp-rust-clippy-preference # Default: opt-in Controls eagerness of clippy diagnostics when available. Valid values are (case-insensitive): - \"off\": Disable clippy lints. - \"opt-in\": Clippy lints are shown when crates specify \u2018#![warn(clippy)]\u2018. - \"on\": Clippy lints enabled for all crates in workspace. You need to install clippy via rustup if you haven\u2019t already. lsp-rust-jobs # Default: nil Number of Cargo jobs to be run in parallel. lsp-rust-all-targets # Default: t Checks the project as if you were running cargo check --all-targets. I.e., check all targets and integration tests too. lsp-rust-target-dir # Default: nil When specified, it places the generated analysis files at the specified target directory. By default it is placed target/rls directory. lsp-rust-rustfmt-path # Default: nil When specified, RLS will use the Rustfmt pointed at the path instead of the bundled one lsp-rust-build-command # Default: nil EXPERIMENTAL (requires \u2018unstable_features\u2018) If set, executes a given program responsible for rebuilding save-analysis to be loaded by the RLS. The program given should output a list of resulting .json files on stdout. Implies \u2018rust.build_on_save\u2018: true. lsp-rust-full-docs # Default: nil Instructs cargo to enable full documentation extraction during save-analysis while building the crate. lsp-rust-show-hover-context # Default: t Show additional context in hover tooltips when available. This is often the type local variable declaration. lsp-rust-analyzer-server-command # Default: (rust-analyzer) Command to start rust-analyzer. lsp-rust-analyzer-server-args # Default: nil Args to start rust-analyzer with when rust-analyzer is downloaded automatically. lsp-rust-analyzer-server-display-inlay-hints # Default: nil Show inlay hints. lsp-rust-analyzer-max-inlay-hint-length # Default: nil Max inlay hint length. lsp-rust-analyzer-display-parameter-hints # Default: nil Whether to show function parameter name inlay hints at the call site. lsp-rust-analyzer-display-chaining-hints # Default: nil Whether to show inlay type hints for method chains. lsp-rust-analyzer-lru-capacity # Default: nil Number of syntax trees rust-analyzer keeps in memory. lsp-rust-analyzer-cargo-watch-enable # Default: t Enable Cargo watch. lsp-rust-analyzer-cargo-watch-command # Default: check Cargo watch command. lsp-rust-analyzer-cargo-watch-args # Default: [] Cargo watch args. lsp-rust-analyzer-cargo-override-command # Default: [] Advanced option, fully override the command rust-analyzer uses for checking. The command should include \u2018--message=format=json\u2018 or similar option. lsp-rust-analyzer-cargo-all-targets # Default: t Cargo watch all targets or not. lsp-rust-analyzer-use-client-watching # Default: t Use client watching lsp-rust-analyzer-exclude-globs # Default: [] Exclude globs lsp-rust-analyzer-macro-expansion-method # Default: lsp-rust-analyzer-macro-expansion-default Use a different function if you want formatted macro expansion results and syntax highlighting. lsp-rust-analyzer-diagnostics-enable # Default: t Whether to show native rust-analyzer diagnostics. lsp-rust-analyzer-diagnostics-enable-experimental # Default: t Whether to show native rust-analyzer diagnostics that are still experimental (might have more false positives than usual). lsp-rust-analyzer-diagnostics-disabled # Default: [] List of native rust-analyzer diagnostics to disable. lsp-rust-analyzer-cargo-load-out-dirs-from-check # Default: nil Whether to run \u2018cargo check\u2018 on startup to get the correct value for package OUT_DIRs. lsp-rust-analyzer-rustfmt-extra-args # Default: [] Additional arguments to rustfmt. lsp-rust-analyzer-rustfmt-override-command # Default: [] Advanced option, fully override the command rust-analyzer uses for formatting. lsp-rust-analyzer-completion-add-call-parenthesis # Default: t Whether to add parenthesis when completing functions. lsp-rust-analyzer-completion-add-call-argument-snippets # Default: t Whether to add argument snippets when completing functions. lsp-rust-analyzer-completion-postfix-enable # Default: t Whether to show postfix snippets like \u2018dbg\u2018, \u2018if\u2018, \u2018not\u2018, etc. lsp-rust-analyzer-call-info-full # Default: t Whether to show function name and docs in parameter hints. lsp-rust-analyzer-proc-macro-enable # Default: nil Enable Proc macro support; lsp-rust-analyzer-cargo-load-out-dirs-from-check must be enabled. lsp-rust-analyzer-import-merge-behaviour # Default: full The strategy to use when inserting new imports or merging imports. Valid values are: - \"none\": No merging - \"full\": Merge all layers of the import trees - \"last\": Only merge the last layer of the import trees lsp-rust-analyzer-import-prefix # Default: plain The path structure for newly inserted paths to use. Valid values are: - \"plain\": Insert import paths relative to the current module, using up to one \u2018super\u2018 prefix if the parent module contains the requested item. - \"by_self\": Prefix all import paths with \u2018self\u2018 if they don\u2019t begin with \u2018self\u2018, \u2018super\u2018, \u2018crate\u2018 or a crate name - \"by_crate\": Force import paths to be absolute by always starting them with \u2018crate\u2018 or the crate name they refer to. lsp-rust-analyzer-download-url # Default: https://github.com/rust-analyzer/rust-analyzer/releases/download/2020-12-14/rust-analyzer-linux Automatic download url for Rust Analyzer. Force 12/14 release until we fix https://github.com/emacs-lsp/lsp-mode/issues/2436 lsp-rust-analyzer-store-path # Default: ~/.emacs.d/.cache/lsp/rust/rust-analyzer The path to the file in which \u2018rust-analyzer\u2019 will be stored. lsp-rust-analyzer-inlay-type-space-format # Default: %s Format string for spacing around variable inlays (not part of the inlay face). lsp-rust-analyzer-inlay-type-format # Default: : %s Format string for variable inlays (part of the inlay face). lsp-rust-analyzer-inlay-param-space-format # Default: %s Format string for spacing around parameter inlays (not part of the inlay face). lsp-rust-analyzer-inlay-param-format # Default: %s: Format string for parameter inlays (part of the inlay face). lsp-rust-analyzer-inlay-chain-space-format # Default: %s Format string for spacing around chain inlays (not part of the inlay face). lsp-rust-analyzer-inlay-chain-format # Default: : %s Format string for chain inlays (part of the inlay face).","title":"Rust"},{"location":"page/lsp-rust/#rust","text":"","title":"Rust"},{"location":"page/lsp-rust/#server","text":"For more information about the LSP server, check rls .","title":"Server"},{"location":"page/lsp-rust/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-rust/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-rust/#server-note","text":"NOTE: If you are using rustic-mode , you have to change rustic-lsp-server instead of lsp-rust-server , since it also supports eglot as a lightweight alternative to lsp-mode. lsp-rust-server Choose LSP server (default is RLS) lsp-rust-switch-server Switch priorities of lsp servers","title":"Server note"},{"location":"page/lsp-rust/#rls","text":"","title":"RLS"},{"location":"page/lsp-rust/#customization","text":"This is an incomplete list of the available options lsp-rust-rls-server-command change command to start RLS lsp-rust-show-hover-context turn off hover tooltips","title":"Customization"},{"location":"page/lsp-rust/#rustfmt","text":"Code formatting with rustfmt can be configured with: lsp-rust-rustfmt-path change default path for rustfmt executable To enable automatic code format on save, add this to your init.el ( rust-mode is assumed to be installed): (add-hook 'before-save-hook (lambda () (when (eq 'rust-mode major-mode) (lsp-format-buffer))))","title":"rustfmt"},{"location":"page/lsp-rust/#rust-analyzer","text":"","title":"rust-analyzer"},{"location":"page/lsp-rust/#commands","text":"","title":"Commands"},{"location":"page/lsp-rust/#lsp-rust-analyzer-syntax-tree","text":"Display syntax tree for current buffer","title":"lsp-rust-analyzer-syntax-tree"},{"location":"page/lsp-rust/#lsp-rust-analyzer-status","text":"Display status information for rust-analyzer","title":"lsp-rust-analyzer-status"},{"location":"page/lsp-rust/#lsp-rust-analyzer-join-lines","text":"Join selected lines into one, smartly fixing up whitespace and trailing commas before: after:","title":"lsp-rust-analyzer-join-lines"},{"location":"page/lsp-rust/#inlay-hints","text":"lsp-rust-analyzer-inlay-hints-mode enables displaying of inlay hints NOTE: the inlay hints interact badly with the lsp-ui sideline, because it doesn't seem to consider the overlays in its width calculation, which often leads to lines wrapping around.","title":"inlay-hints"},{"location":"page/lsp-rust/#macro-expansion","text":"lsp-rust-analyzer-expand-macro expand macro call at point recursively Use your own function for displaying macro expansion by customizing lsp-rust-analyzer-macro-expansion-method Formatted and highlighted result with the default function of rustic.","title":"Macro expansion"},{"location":"page/lsp-rust/#auto-import","text":"Get a list of possible auto import candidates with lsp-execute-code-action","title":"auto-import"},{"location":"page/lsp-rust/#caveats","text":"Rust Analyzer does not support disabling snippets - https://github.com/rust-analyzer/rust-analyzer/issues/2518","title":"Caveats"},{"location":"page/lsp-rust/#extract-signature","text":"This unmerged PR contains an example method that allows modifying the signature that is displayed by eldoc.","title":"extract signature"},{"location":"page/lsp-rust/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-rust/#lsp-rust-server","text":"Default: rust-analyzer Choose LSP server.","title":"lsp-rust-server"},{"location":"page/lsp-rust/#lsp-rust-rls-server-command","text":"Default: (rls) Command to start RLS.","title":"lsp-rust-rls-server-command"},{"location":"page/lsp-rust/#lsp-rust-library-directories","text":"Default: (~/.cargo/registry/src ~/.rustup/toolchains) List of directories which will be considered to be libraries.","title":"lsp-rust-library-directories"},{"location":"page/lsp-rust/#lsp-rust-sysroot","text":"Default: nil If non-nil, use the given path as the sysroot for all rustc invocations instead of trying to detect the sysroot automatically.","title":"lsp-rust-sysroot"},{"location":"page/lsp-rust/#lsp-rust-target","text":"Default: nil If non-nil, use the given target triple for all rustc invocations.","title":"lsp-rust-target"},{"location":"page/lsp-rust/#lsp-rust-rustflags","text":"Default: nil Flags added to RUSTFLAGS.","title":"lsp-rust-rustflags"},{"location":"page/lsp-rust/#lsp-rust-clear-env-rust-log","text":"Default: t Clear the RUST_LOG environment variable before running rustc or cargo.","title":"lsp-rust-clear-env-rust-log"},{"location":"page/lsp-rust/#lsp-rust-build-lib","text":"Default: nil If non-nil, checks the project as if you passed the \u2018--lib\u2019 argument to cargo. Mutually exclusive with, and preferred over, \u2018lsp-rust-build-bin\u2019. (Unstable)","title":"lsp-rust-build-lib"},{"location":"page/lsp-rust/#lsp-rust-build-bin","text":"Default: nil If non-nil, checks the project as if you passed \u2018-- bin \u2019 argument to cargo. Mutually exclusive with \u2018lsp-rust-build-lib\u2019. (Unstable)","title":"lsp-rust-build-bin"},{"location":"page/lsp-rust/#lsp-rust-cfg-test","text":"Default: nil If non-nil, checks the project as if you were running \u2018cargo test\u2019 rather than cargo build. I.e., compiles (but does not run) test code.","title":"lsp-rust-cfg-test"},{"location":"page/lsp-rust/#lsp-rust-unstable-features","text":"Default: nil Enable unstable features.","title":"lsp-rust-unstable-features"},{"location":"page/lsp-rust/#lsp-rust-wait-to-build","text":"Default: nil Time in milliseconds between receiving a change notification and starting build. If not specified, automatically inferred by the latest build duration.","title":"lsp-rust-wait-to-build"},{"location":"page/lsp-rust/#lsp-rust-show-warnings","text":"Default: t Show warnings.","title":"lsp-rust-show-warnings"},{"location":"page/lsp-rust/#lsp-rust-crate-blacklist","text":"Default: [cocoa gleam glium idna libc openssl rustc_serialize serde serde_json typenum unicode_normalization unicode_segmentation winapi] A list of Cargo crates to blacklist.","title":"lsp-rust-crate-blacklist"},{"location":"page/lsp-rust/#lsp-rust-build-on-save","text":"Default: nil Only index the project when a file is saved and not on change.","title":"lsp-rust-build-on-save"},{"location":"page/lsp-rust/#lsp-rust-features","text":"Default: [] List of Cargo features to enable.","title":"lsp-rust-features"},{"location":"page/lsp-rust/#lsp-rust-all-features","text":"Default: nil Enable all Cargo features.","title":"lsp-rust-all-features"},{"location":"page/lsp-rust/#lsp-rust-no-default-features","text":"Default: nil Do not enable default Cargo features.","title":"lsp-rust-no-default-features"},{"location":"page/lsp-rust/#lsp-rust-racer-completion","text":"Default: t Enables code completion using racer.","title":"lsp-rust-racer-completion"},{"location":"page/lsp-rust/#lsp-rust-clippy-preference","text":"Default: opt-in Controls eagerness of clippy diagnostics when available. Valid values are (case-insensitive): - \"off\": Disable clippy lints. - \"opt-in\": Clippy lints are shown when crates specify \u2018#![warn(clippy)]\u2018. - \"on\": Clippy lints enabled for all crates in workspace. You need to install clippy via rustup if you haven\u2019t already.","title":"lsp-rust-clippy-preference"},{"location":"page/lsp-rust/#lsp-rust-jobs","text":"Default: nil Number of Cargo jobs to be run in parallel.","title":"lsp-rust-jobs"},{"location":"page/lsp-rust/#lsp-rust-all-targets","text":"Default: t Checks the project as if you were running cargo check --all-targets. I.e., check all targets and integration tests too.","title":"lsp-rust-all-targets"},{"location":"page/lsp-rust/#lsp-rust-target-dir","text":"Default: nil When specified, it places the generated analysis files at the specified target directory. By default it is placed target/rls directory.","title":"lsp-rust-target-dir"},{"location":"page/lsp-rust/#lsp-rust-rustfmt-path","text":"Default: nil When specified, RLS will use the Rustfmt pointed at the path instead of the bundled one","title":"lsp-rust-rustfmt-path"},{"location":"page/lsp-rust/#lsp-rust-build-command","text":"Default: nil EXPERIMENTAL (requires \u2018unstable_features\u2018) If set, executes a given program responsible for rebuilding save-analysis to be loaded by the RLS. The program given should output a list of resulting .json files on stdout. Implies \u2018rust.build_on_save\u2018: true.","title":"lsp-rust-build-command"},{"location":"page/lsp-rust/#lsp-rust-full-docs","text":"Default: nil Instructs cargo to enable full documentation extraction during save-analysis while building the crate.","title":"lsp-rust-full-docs"},{"location":"page/lsp-rust/#lsp-rust-show-hover-context","text":"Default: t Show additional context in hover tooltips when available. This is often the type local variable declaration.","title":"lsp-rust-show-hover-context"},{"location":"page/lsp-rust/#lsp-rust-analyzer-server-command","text":"Default: (rust-analyzer) Command to start rust-analyzer.","title":"lsp-rust-analyzer-server-command"},{"location":"page/lsp-rust/#lsp-rust-analyzer-server-args","text":"Default: nil Args to start rust-analyzer with when rust-analyzer is downloaded automatically.","title":"lsp-rust-analyzer-server-args"},{"location":"page/lsp-rust/#lsp-rust-analyzer-server-display-inlay-hints","text":"Default: nil Show inlay hints.","title":"lsp-rust-analyzer-server-display-inlay-hints"},{"location":"page/lsp-rust/#lsp-rust-analyzer-max-inlay-hint-length","text":"Default: nil Max inlay hint length.","title":"lsp-rust-analyzer-max-inlay-hint-length"},{"location":"page/lsp-rust/#lsp-rust-analyzer-display-parameter-hints","text":"Default: nil Whether to show function parameter name inlay hints at the call site.","title":"lsp-rust-analyzer-display-parameter-hints"},{"location":"page/lsp-rust/#lsp-rust-analyzer-display-chaining-hints","text":"Default: nil Whether to show inlay type hints for method chains.","title":"lsp-rust-analyzer-display-chaining-hints"},{"location":"page/lsp-rust/#lsp-rust-analyzer-lru-capacity","text":"Default: nil Number of syntax trees rust-analyzer keeps in memory.","title":"lsp-rust-analyzer-lru-capacity"},{"location":"page/lsp-rust/#lsp-rust-analyzer-cargo-watch-enable","text":"Default: t Enable Cargo watch.","title":"lsp-rust-analyzer-cargo-watch-enable"},{"location":"page/lsp-rust/#lsp-rust-analyzer-cargo-watch-command","text":"Default: check Cargo watch command.","title":"lsp-rust-analyzer-cargo-watch-command"},{"location":"page/lsp-rust/#lsp-rust-analyzer-cargo-watch-args","text":"Default: [] Cargo watch args.","title":"lsp-rust-analyzer-cargo-watch-args"},{"location":"page/lsp-rust/#lsp-rust-analyzer-cargo-override-command","text":"Default: [] Advanced option, fully override the command rust-analyzer uses for checking. The command should include \u2018--message=format=json\u2018 or similar option.","title":"lsp-rust-analyzer-cargo-override-command"},{"location":"page/lsp-rust/#lsp-rust-analyzer-cargo-all-targets","text":"Default: t Cargo watch all targets or not.","title":"lsp-rust-analyzer-cargo-all-targets"},{"location":"page/lsp-rust/#lsp-rust-analyzer-use-client-watching","text":"Default: t Use client watching","title":"lsp-rust-analyzer-use-client-watching"},{"location":"page/lsp-rust/#lsp-rust-analyzer-exclude-globs","text":"Default: [] Exclude globs","title":"lsp-rust-analyzer-exclude-globs"},{"location":"page/lsp-rust/#lsp-rust-analyzer-macro-expansion-method","text":"Default: lsp-rust-analyzer-macro-expansion-default Use a different function if you want formatted macro expansion results and syntax highlighting.","title":"lsp-rust-analyzer-macro-expansion-method"},{"location":"page/lsp-rust/#lsp-rust-analyzer-diagnostics-enable","text":"Default: t Whether to show native rust-analyzer diagnostics.","title":"lsp-rust-analyzer-diagnostics-enable"},{"location":"page/lsp-rust/#lsp-rust-analyzer-diagnostics-enable-experimental","text":"Default: t Whether to show native rust-analyzer diagnostics that are still experimental (might have more false positives than usual).","title":"lsp-rust-analyzer-diagnostics-enable-experimental"},{"location":"page/lsp-rust/#lsp-rust-analyzer-diagnostics-disabled","text":"Default: [] List of native rust-analyzer diagnostics to disable.","title":"lsp-rust-analyzer-diagnostics-disabled"},{"location":"page/lsp-rust/#lsp-rust-analyzer-cargo-load-out-dirs-from-check","text":"Default: nil Whether to run \u2018cargo check\u2018 on startup to get the correct value for package OUT_DIRs.","title":"lsp-rust-analyzer-cargo-load-out-dirs-from-check"},{"location":"page/lsp-rust/#lsp-rust-analyzer-rustfmt-extra-args","text":"Default: [] Additional arguments to rustfmt.","title":"lsp-rust-analyzer-rustfmt-extra-args"},{"location":"page/lsp-rust/#lsp-rust-analyzer-rustfmt-override-command","text":"Default: [] Advanced option, fully override the command rust-analyzer uses for formatting.","title":"lsp-rust-analyzer-rustfmt-override-command"},{"location":"page/lsp-rust/#lsp-rust-analyzer-completion-add-call-parenthesis","text":"Default: t Whether to add parenthesis when completing functions.","title":"lsp-rust-analyzer-completion-add-call-parenthesis"},{"location":"page/lsp-rust/#lsp-rust-analyzer-completion-add-call-argument-snippets","text":"Default: t Whether to add argument snippets when completing functions.","title":"lsp-rust-analyzer-completion-add-call-argument-snippets"},{"location":"page/lsp-rust/#lsp-rust-analyzer-completion-postfix-enable","text":"Default: t Whether to show postfix snippets like \u2018dbg\u2018, \u2018if\u2018, \u2018not\u2018, etc.","title":"lsp-rust-analyzer-completion-postfix-enable"},{"location":"page/lsp-rust/#lsp-rust-analyzer-call-info-full","text":"Default: t Whether to show function name and docs in parameter hints.","title":"lsp-rust-analyzer-call-info-full"},{"location":"page/lsp-rust/#lsp-rust-analyzer-proc-macro-enable","text":"Default: nil Enable Proc macro support; lsp-rust-analyzer-cargo-load-out-dirs-from-check must be enabled.","title":"lsp-rust-analyzer-proc-macro-enable"},{"location":"page/lsp-rust/#lsp-rust-analyzer-import-merge-behaviour","text":"Default: full The strategy to use when inserting new imports or merging imports. Valid values are: - \"none\": No merging - \"full\": Merge all layers of the import trees - \"last\": Only merge the last layer of the import trees","title":"lsp-rust-analyzer-import-merge-behaviour"},{"location":"page/lsp-rust/#lsp-rust-analyzer-import-prefix","text":"Default: plain The path structure for newly inserted paths to use. Valid values are: - \"plain\": Insert import paths relative to the current module, using up to one \u2018super\u2018 prefix if the parent module contains the requested item. - \"by_self\": Prefix all import paths with \u2018self\u2018 if they don\u2019t begin with \u2018self\u2018, \u2018super\u2018, \u2018crate\u2018 or a crate name - \"by_crate\": Force import paths to be absolute by always starting them with \u2018crate\u2018 or the crate name they refer to.","title":"lsp-rust-analyzer-import-prefix"},{"location":"page/lsp-rust/#lsp-rust-analyzer-download-url","text":"Default: https://github.com/rust-analyzer/rust-analyzer/releases/download/2020-12-14/rust-analyzer-linux Automatic download url for Rust Analyzer. Force 12/14 release until we fix https://github.com/emacs-lsp/lsp-mode/issues/2436","title":"lsp-rust-analyzer-download-url"},{"location":"page/lsp-rust/#lsp-rust-analyzer-store-path","text":"Default: ~/.emacs.d/.cache/lsp/rust/rust-analyzer The path to the file in which \u2018rust-analyzer\u2019 will be stored.","title":"lsp-rust-analyzer-store-path"},{"location":"page/lsp-rust/#lsp-rust-analyzer-inlay-type-space-format","text":"Default: %s Format string for spacing around variable inlays (not part of the inlay face).","title":"lsp-rust-analyzer-inlay-type-space-format"},{"location":"page/lsp-rust/#lsp-rust-analyzer-inlay-type-format","text":"Default: : %s Format string for variable inlays (part of the inlay face).","title":"lsp-rust-analyzer-inlay-type-format"},{"location":"page/lsp-rust/#lsp-rust-analyzer-inlay-param-space-format","text":"Default: %s Format string for spacing around parameter inlays (not part of the inlay face).","title":"lsp-rust-analyzer-inlay-param-space-format"},{"location":"page/lsp-rust/#lsp-rust-analyzer-inlay-param-format","text":"Default: %s: Format string for parameter inlays (part of the inlay face).","title":"lsp-rust-analyzer-inlay-param-format"},{"location":"page/lsp-rust/#lsp-rust-analyzer-inlay-chain-space-format","text":"Default: %s Format string for spacing around chain inlays (not part of the inlay face).","title":"lsp-rust-analyzer-inlay-chain-space-format"},{"location":"page/lsp-rust/#lsp-rust-analyzer-inlay-chain-format","text":"Default: : %s Format string for chain inlays (part of the inlay face).","title":"lsp-rust-analyzer-inlay-chain-format"},{"location":"page/lsp-serenata/","text":"PHP (Serenata) # Server # For more information about the LSP server, check Serenata . Installation # For more instructions on how to install manually, check here . Debugger: Yes # Available configurations # lsp-serenata-server-path # Default: serenata.phar Path to the Serenata Language Server phar file. It can be downloaded from https://gitlab.com/Serenata/Serenata/-/releases. lsp-serenata-uris # Default: [] A list of folders to index for your project. This does not have to include the root of the project itself, in case you have need of an exotic configuration where the root of the project is at some location but your actual PHP code is somewhere else. Note that if you are running Serenata in a container, you will have to ensure that these URI\u2019s are mapped inside it. Avoid using file paths containing spaces. This is currently broken due to apparent PHP quirks. By default, the value is taken from the lsp workspace location. lsp-serenata-php-version # Default: 7.3 Allows you to specify the PHP version your project is written in. At the moment this directive is still ignored, but it will influence functionality such as refactoring in the future, where older PHP versions may not support scalar type hints, which may then be omitted from places such as getters and setters. lsp-serenata-file-extensions # Default: [php] List of file extensions (without dot) to process. Files that do not match this whitelist will be ignored during indexing. Usually you\u2019ll want to set this to at least include php, as it is the most common PHP extension. phpt is not included by default as it is often used to contain test code that is not directly part of the code. Note that for existing projects, removing extensions will not not automatically prune files having them from the index if they are already present. Adding new ones will cause the files having them to be picked up on the next project initialization. lsp-serenata-index-database-uri # Default: file:///home/runner/.emacs.d/index.sqlite The location to store the index database. Note that, as the index database uses SQLite and WAL mode, additional files (usually two) may be generated and used in the same folder. Note also that Serenata relies on the Doctrine DBAL library as well as the SQLite backends in PHP, which may not support non-file URI\u2019s, which may prevent you from using these. lsp-serenata-exclude-path-expressions # Default: [/.+Test.php$/] One or more expressions of paths to ignore. This uses Symfony\u2019s Finder in the background, so this means you can configure anything here that can also be passed to the name function, which includes plain strings, globs, as well as regular expressions. Note that for existing projects, modifying these will not not automatically prune them from the index if they are already present.","title":"PHP (Serenata)"},{"location":"page/lsp-serenata/#php-serenata","text":"","title":"PHP (Serenata)"},{"location":"page/lsp-serenata/#server","text":"For more information about the LSP server, check Serenata .","title":"Server"},{"location":"page/lsp-serenata/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-serenata/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-serenata/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-serenata/#lsp-serenata-server-path","text":"Default: serenata.phar Path to the Serenata Language Server phar file. It can be downloaded from https://gitlab.com/Serenata/Serenata/-/releases.","title":"lsp-serenata-server-path"},{"location":"page/lsp-serenata/#lsp-serenata-uris","text":"Default: [] A list of folders to index for your project. This does not have to include the root of the project itself, in case you have need of an exotic configuration where the root of the project is at some location but your actual PHP code is somewhere else. Note that if you are running Serenata in a container, you will have to ensure that these URI\u2019s are mapped inside it. Avoid using file paths containing spaces. This is currently broken due to apparent PHP quirks. By default, the value is taken from the lsp workspace location.","title":"lsp-serenata-uris"},{"location":"page/lsp-serenata/#lsp-serenata-php-version","text":"Default: 7.3 Allows you to specify the PHP version your project is written in. At the moment this directive is still ignored, but it will influence functionality such as refactoring in the future, where older PHP versions may not support scalar type hints, which may then be omitted from places such as getters and setters.","title":"lsp-serenata-php-version"},{"location":"page/lsp-serenata/#lsp-serenata-file-extensions","text":"Default: [php] List of file extensions (without dot) to process. Files that do not match this whitelist will be ignored during indexing. Usually you\u2019ll want to set this to at least include php, as it is the most common PHP extension. phpt is not included by default as it is often used to contain test code that is not directly part of the code. Note that for existing projects, removing extensions will not not automatically prune files having them from the index if they are already present. Adding new ones will cause the files having them to be picked up on the next project initialization.","title":"lsp-serenata-file-extensions"},{"location":"page/lsp-serenata/#lsp-serenata-index-database-uri","text":"Default: file:///home/runner/.emacs.d/index.sqlite The location to store the index database. Note that, as the index database uses SQLite and WAL mode, additional files (usually two) may be generated and used in the same folder. Note also that Serenata relies on the Doctrine DBAL library as well as the SQLite backends in PHP, which may not support non-file URI\u2019s, which may prevent you from using these.","title":"lsp-serenata-index-database-uri"},{"location":"page/lsp-serenata/#lsp-serenata-exclude-path-expressions","text":"Default: [/.+Test.php$/] One or more expressions of paths to ignore. This uses Symfony\u2019s Finder in the background, so this means you can configure anything here that can also be passed to the name function, which includes plain strings, globs, as well as regular expressions. Note that for existing projects, modifying these will not not automatically prune them from the index if they are already present.","title":"lsp-serenata-exclude-path-expressions"},{"location":"page/lsp-solargraph/","text":"Ruby # Server # For more information about the LSP server, check solargraph . Installation # gem install solargraph Debugger: Yes # Available configurations # lsp-solargraph-completion # Default: t Enable completion lsp-solargraph-hover # Default: t Enable hover lsp-solargraph-diagnostics # Default: t Enable diagnostics lsp-solargraph-autoformat # Default: nil Enable automatic formatting while typing (WARNING: experimental) lsp-solargraph-formatting # Default: t Enable document formatting lsp-solargraph-symbols # Default: t Enable symbols lsp-solargraph-definitions # Default: t Enable definitions (go to, etc.) lsp-solargraph-rename # Default: t Enable symbol renaming lsp-solargraph-references # Default: t Enable finding references lsp-solargraph-folding # Default: t Enable folding ranges lsp-solargraph-log-level # Default: warn Level of debug info to log. \u2018warn\u2018 is least and \u2018debug\u2018 is most. lsp-solargraph-use-bundler # Default: nil Run solargraph under bundler lsp-solargraph-multi-root # Default: t If non nil, \u2018solargraph\u2019 will be started in multi-root mode. lsp-solargraph-library-directories # Default: (~/.rbenv/ /usr/lib/ruby/ ~/.rvm/ ~/.gem/) List of directories which will be considered to be libraries.","title":"Ruby"},{"location":"page/lsp-solargraph/#ruby","text":"","title":"Ruby"},{"location":"page/lsp-solargraph/#server","text":"For more information about the LSP server, check solargraph .","title":"Server"},{"location":"page/lsp-solargraph/#installation","text":"gem install solargraph","title":"Installation"},{"location":"page/lsp-solargraph/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-solargraph/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-solargraph/#lsp-solargraph-completion","text":"Default: t Enable completion","title":"lsp-solargraph-completion"},{"location":"page/lsp-solargraph/#lsp-solargraph-hover","text":"Default: t Enable hover","title":"lsp-solargraph-hover"},{"location":"page/lsp-solargraph/#lsp-solargraph-diagnostics","text":"Default: t Enable diagnostics","title":"lsp-solargraph-diagnostics"},{"location":"page/lsp-solargraph/#lsp-solargraph-autoformat","text":"Default: nil Enable automatic formatting while typing (WARNING: experimental)","title":"lsp-solargraph-autoformat"},{"location":"page/lsp-solargraph/#lsp-solargraph-formatting","text":"Default: t Enable document formatting","title":"lsp-solargraph-formatting"},{"location":"page/lsp-solargraph/#lsp-solargraph-symbols","text":"Default: t Enable symbols","title":"lsp-solargraph-symbols"},{"location":"page/lsp-solargraph/#lsp-solargraph-definitions","text":"Default: t Enable definitions (go to, etc.)","title":"lsp-solargraph-definitions"},{"location":"page/lsp-solargraph/#lsp-solargraph-rename","text":"Default: t Enable symbol renaming","title":"lsp-solargraph-rename"},{"location":"page/lsp-solargraph/#lsp-solargraph-references","text":"Default: t Enable finding references","title":"lsp-solargraph-references"},{"location":"page/lsp-solargraph/#lsp-solargraph-folding","text":"Default: t Enable folding ranges","title":"lsp-solargraph-folding"},{"location":"page/lsp-solargraph/#lsp-solargraph-log-level","text":"Default: warn Level of debug info to log. \u2018warn\u2018 is least and \u2018debug\u2018 is most.","title":"lsp-solargraph-log-level"},{"location":"page/lsp-solargraph/#lsp-solargraph-use-bundler","text":"Default: nil Run solargraph under bundler","title":"lsp-solargraph-use-bundler"},{"location":"page/lsp-solargraph/#lsp-solargraph-multi-root","text":"Default: t If non nil, \u2018solargraph\u2019 will be started in multi-root mode.","title":"lsp-solargraph-multi-root"},{"location":"page/lsp-solargraph/#lsp-solargraph-library-directories","text":"Default: (~/.rbenv/ /usr/lib/ruby/ ~/.rvm/ ~/.gem/) List of directories which will be considered to be libraries.","title":"lsp-solargraph-library-directories"},{"location":"page/lsp-sorbet/","text":"Ruby (Sorbet) # Server # For more information about the LSP server, check sorbet . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-sorbet-use-bundler # Default: nil Run sorbet under bundler","title":"Lsp sorbet"},{"location":"page/lsp-sorbet/#ruby-sorbet","text":"","title":"Ruby (Sorbet)"},{"location":"page/lsp-sorbet/#server","text":"For more information about the LSP server, check sorbet .","title":"Server"},{"location":"page/lsp-sorbet/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-sorbet/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-sorbet/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-sorbet/#lsp-sorbet-use-bundler","text":"Default: nil Run sorbet under bundler","title":"lsp-sorbet-use-bundler"},{"location":"page/lsp-sqls/","text":"SQL (sqls) # Server # For more information about the LSP server, check sqls . Installation # go get github.com/lighttiger2505/sqls Debugger: Not available # Available configurations # lsp-sqls-server # Default: sqls Path to the \u2018sqls\u2018 binary. lsp-sqls-workspace-config-path # Default: workspace If non-nil then setup workspace configuration with json file path.","title":"SQL (sqls)"},{"location":"page/lsp-sqls/#sql-sqls","text":"","title":"SQL (sqls)"},{"location":"page/lsp-sqls/#server","text":"For more information about the LSP server, check sqls .","title":"Server"},{"location":"page/lsp-sqls/#installation","text":"go get github.com/lighttiger2505/sqls","title":"Installation"},{"location":"page/lsp-sqls/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-sqls/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-sqls/#lsp-sqls-server","text":"Default: sqls Path to the \u2018sqls\u2018 binary.","title":"lsp-sqls-server"},{"location":"page/lsp-sqls/#lsp-sqls-workspace-config-path","text":"Default: workspace If non-nil then setup workspace configuration with json file path.","title":"lsp-sqls-workspace-config-path"},{"location":"page/lsp-steep/","text":"Ruby (Steep) # Server # For more information about the LSP server, check steep . Installation # gem install steep Debugger: Not available # Available configurations # lsp-steep-log-level # Default: warn Log level of Steep. lsp-steep-use-bundler # Default: t Run Steep using Bunder.","title":"Lsp steep"},{"location":"page/lsp-steep/#ruby-steep","text":"","title":"Ruby (Steep)"},{"location":"page/lsp-steep/#server","text":"For more information about the LSP server, check steep .","title":"Server"},{"location":"page/lsp-steep/#installation","text":"gem install steep","title":"Installation"},{"location":"page/lsp-steep/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-steep/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-steep/#lsp-steep-log-level","text":"Default: warn Log level of Steep.","title":"lsp-steep-log-level"},{"location":"page/lsp-steep/#lsp-steep-use-bundler","text":"Default: t Run Steep using Bunder.","title":"lsp-steep-use-bundler"},{"location":"page/lsp-svelte/","text":"Svelte # Server # For more information about the LSP server, check svelteserver . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET svelte-ls RET . npm i -g svelte-language-server Debugger: Not available # Available configurations # lsp-svelte-plugin-typescript-enable # Default: t Enable the TypeScript plugin lsp-svelte-plugin-typescript-diagnostics-enable # Default: t Enable diagnostic messages for TypeScript lsp-svelte-plugin-typescript-hover-enable # Default: t Enable hover info for TypeScript lsp-svelte-plugin-typescript-document-symbols-enable # Default: t Enable document symbols for TypeScript lsp-svelte-plugin-typescript-completions-enable # Default: t Enable completions for TypeScript lsp-svelte-plugin-typescript-find-references-enable # Default: t Enable find-references for TypeScript lsp-svelte-plugin-typescript-definitions-enable # Default: t Enable go to definition for TypeScript lsp-svelte-plugin-typescript-code-actions-enable # Default: t Enable code actions for TypeScript lsp-svelte-plugin-typescript-selection-range-enable # Default: t Enable selection range for TypeScript lsp-svelte-plugin-typescript-signature-help-enable # Default: t Enable signature help (parameter hints) for TypeScript lsp-svelte-plugin-typescript-rename-enable # Default: t Enable rename functionality for JS/TS variables inside Svelte files lsp-svelte-plugin-css-enable # Default: t Enable the CSS plugin lsp-svelte-plugin-css-globals # Default: `` Which css files should be checked for global variables (\u2018--global-var: value;\u2018). These variables are added to the css completions. String of comma-separated file paths or globs relative to workspace root. lsp-svelte-plugin-css-diagnostics-enable # Default: t Enable diagnostic messages for CSS lsp-svelte-plugin-css-hover-enable # Default: t Enable hover info for CSS lsp-svelte-plugin-css-completions-enable # Default: t Enable auto completions for CSS lsp-svelte-plugin-css-completions-emmet # Default: t Enable emmet auto completions for CSS lsp-svelte-plugin-css-document-colors-enable # Default: t Enable document colors for CSS lsp-svelte-plugin-css-color-presentations-enable # Default: t Enable color picker for CSS lsp-svelte-plugin-css-document-symbols-enable # Default: t Enable document symbols for CSS lsp-svelte-plugin-css-selection-range-enable # Default: t Enable selection range for CSS lsp-svelte-plugin-html-enable # Default: t Enable the HTML plugin lsp-svelte-plugin-html-hover-enable # Default: t Enable hover info for HTML lsp-svelte-plugin-html-completions-enable # Default: t Enable auto completions for HTML lsp-svelte-plugin-html-completions-emmet # Default: t Enable emmet auto completions for HTML lsp-svelte-plugin-html-tag-complete-enable # Default: t Enable HTML tag auto closing lsp-svelte-plugin-html-document-symbols-enable # Default: t Enable document symbols for HTML lsp-svelte-plugin-svelte-enable # Default: t Enable the Svelte plugin lsp-svelte-plugin-svelte-diagnostics-enable # Default: t Enable diagnostic messages for Svelte lsp-svelte-plugin-svelte-compiler-warnings # Default: nil Svelte compiler warning codes to ignore or to treat as errors. Example: \u2019((css-unused-selector . ignore) (unused-export-let . error)) lsp-svelte-plugin-svelte-format-enable # Default: t Enable formatting for Svelte (includes css & js) lsp-svelte-plugin-svelte-completions-enable # Default: t Enable auto completions for Svelte lsp-svelte-plugin-svelte-hover-enable # Default: t Enable hover information for Svelte lsp-svelte-plugin-svelte-code-actions-enable # Default: t Enable Code Actions for Svelte lsp-svelte-plugin-svelte-selection-range-enable # Default: t Enable selection range for Svelte lsp-svelte-plugin-svelte-rename-enable # Default: t Enable rename/move Svelte files functionality","title":"Svelte"},{"location":"page/lsp-svelte/#svelte","text":"","title":"Svelte"},{"location":"page/lsp-svelte/#server","text":"For more information about the LSP server, check svelteserver .","title":"Server"},{"location":"page/lsp-svelte/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET svelte-ls RET . npm i -g svelte-language-server","title":"Installation"},{"location":"page/lsp-svelte/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-svelte/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-enable","text":"Default: t Enable the TypeScript plugin","title":"lsp-svelte-plugin-typescript-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-diagnostics-enable","text":"Default: t Enable diagnostic messages for TypeScript","title":"lsp-svelte-plugin-typescript-diagnostics-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-hover-enable","text":"Default: t Enable hover info for TypeScript","title":"lsp-svelte-plugin-typescript-hover-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-document-symbols-enable","text":"Default: t Enable document symbols for TypeScript","title":"lsp-svelte-plugin-typescript-document-symbols-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-completions-enable","text":"Default: t Enable completions for TypeScript","title":"lsp-svelte-plugin-typescript-completions-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-find-references-enable","text":"Default: t Enable find-references for TypeScript","title":"lsp-svelte-plugin-typescript-find-references-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-definitions-enable","text":"Default: t Enable go to definition for TypeScript","title":"lsp-svelte-plugin-typescript-definitions-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-code-actions-enable","text":"Default: t Enable code actions for TypeScript","title":"lsp-svelte-plugin-typescript-code-actions-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-selection-range-enable","text":"Default: t Enable selection range for TypeScript","title":"lsp-svelte-plugin-typescript-selection-range-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-signature-help-enable","text":"Default: t Enable signature help (parameter hints) for TypeScript","title":"lsp-svelte-plugin-typescript-signature-help-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-typescript-rename-enable","text":"Default: t Enable rename functionality for JS/TS variables inside Svelte files","title":"lsp-svelte-plugin-typescript-rename-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-enable","text":"Default: t Enable the CSS plugin","title":"lsp-svelte-plugin-css-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-globals","text":"Default: `` Which css files should be checked for global variables (\u2018--global-var: value;\u2018). These variables are added to the css completions. String of comma-separated file paths or globs relative to workspace root.","title":"lsp-svelte-plugin-css-globals"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-diagnostics-enable","text":"Default: t Enable diagnostic messages for CSS","title":"lsp-svelte-plugin-css-diagnostics-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-hover-enable","text":"Default: t Enable hover info for CSS","title":"lsp-svelte-plugin-css-hover-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-completions-enable","text":"Default: t Enable auto completions for CSS","title":"lsp-svelte-plugin-css-completions-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-completions-emmet","text":"Default: t Enable emmet auto completions for CSS","title":"lsp-svelte-plugin-css-completions-emmet"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-document-colors-enable","text":"Default: t Enable document colors for CSS","title":"lsp-svelte-plugin-css-document-colors-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-color-presentations-enable","text":"Default: t Enable color picker for CSS","title":"lsp-svelte-plugin-css-color-presentations-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-document-symbols-enable","text":"Default: t Enable document symbols for CSS","title":"lsp-svelte-plugin-css-document-symbols-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-css-selection-range-enable","text":"Default: t Enable selection range for CSS","title":"lsp-svelte-plugin-css-selection-range-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-html-enable","text":"Default: t Enable the HTML plugin","title":"lsp-svelte-plugin-html-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-html-hover-enable","text":"Default: t Enable hover info for HTML","title":"lsp-svelte-plugin-html-hover-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-html-completions-enable","text":"Default: t Enable auto completions for HTML","title":"lsp-svelte-plugin-html-completions-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-html-completions-emmet","text":"Default: t Enable emmet auto completions for HTML","title":"lsp-svelte-plugin-html-completions-emmet"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-html-tag-complete-enable","text":"Default: t Enable HTML tag auto closing","title":"lsp-svelte-plugin-html-tag-complete-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-html-document-symbols-enable","text":"Default: t Enable document symbols for HTML","title":"lsp-svelte-plugin-html-document-symbols-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-svelte-enable","text":"Default: t Enable the Svelte plugin","title":"lsp-svelte-plugin-svelte-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-svelte-diagnostics-enable","text":"Default: t Enable diagnostic messages for Svelte","title":"lsp-svelte-plugin-svelte-diagnostics-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-svelte-compiler-warnings","text":"Default: nil Svelte compiler warning codes to ignore or to treat as errors. Example: \u2019((css-unused-selector . ignore) (unused-export-let . error))","title":"lsp-svelte-plugin-svelte-compiler-warnings"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-svelte-format-enable","text":"Default: t Enable formatting for Svelte (includes css & js)","title":"lsp-svelte-plugin-svelte-format-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-svelte-completions-enable","text":"Default: t Enable auto completions for Svelte","title":"lsp-svelte-plugin-svelte-completions-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-svelte-hover-enable","text":"Default: t Enable hover information for Svelte","title":"lsp-svelte-plugin-svelte-hover-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-svelte-code-actions-enable","text":"Default: t Enable Code Actions for Svelte","title":"lsp-svelte-plugin-svelte-code-actions-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-svelte-selection-range-enable","text":"Default: t Enable selection range for Svelte","title":"lsp-svelte-plugin-svelte-selection-range-enable"},{"location":"page/lsp-svelte/#lsp-svelte-plugin-svelte-rename-enable","text":"Default: t Enable rename/move Svelte files functionality","title":"lsp-svelte-plugin-svelte-rename-enable"},{"location":"page/lsp-terraform/","text":"Terraform # Server # For more information about the LSP server, check terraform-lsp . Installation # Git clone outside of $GOPATH; go install Debugger: Not available # Available configurations # lsp-terraform-server # Default: terraform-lsp Path to the \u2018terraform-lsp\u2019 binary. lsp-terraform-enable-logging # Default: nil If non-nil, enable \u2018terraform-ls\u2019\u2019s native logging.","title":"Terraform"},{"location":"page/lsp-terraform/#terraform","text":"","title":"Terraform"},{"location":"page/lsp-terraform/#server","text":"For more information about the LSP server, check terraform-lsp .","title":"Server"},{"location":"page/lsp-terraform/#installation","text":"Git clone outside of $GOPATH; go install","title":"Installation"},{"location":"page/lsp-terraform/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-terraform/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-terraform/#lsp-terraform-server","text":"Default: terraform-lsp Path to the \u2018terraform-lsp\u2019 binary.","title":"lsp-terraform-server"},{"location":"page/lsp-terraform/#lsp-terraform-enable-logging","text":"Default: nil If non-nil, enable \u2018terraform-ls\u2019\u2019s native logging.","title":"lsp-terraform-enable-logging"},{"location":"page/lsp-tex/","text":"TeX, LaTeX, etc. # Server # For more information about the LSP server, check Digestif . Installation # luarocks --server http://luarocks.org/dev install digestif Debugger: Not available # Available configurations # lsp-tex-server # Default: texlab Choose LSP tex server. lsp-clients-digestif-executable # Default: digestif Command to start the Digestif language server. lsp-clients-texlab-executable # Default: texlab Command to start the texlab language server.","title":"TeX, LaTeX, etc (digestif)"},{"location":"page/lsp-tex/#tex-latex-etc","text":"","title":"TeX, LaTeX, etc."},{"location":"page/lsp-tex/#server","text":"For more information about the LSP server, check Digestif .","title":"Server"},{"location":"page/lsp-tex/#installation","text":"luarocks --server http://luarocks.org/dev install digestif","title":"Installation"},{"location":"page/lsp-tex/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-tex/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-tex/#lsp-tex-server","text":"Default: texlab Choose LSP tex server.","title":"lsp-tex-server"},{"location":"page/lsp-tex/#lsp-clients-digestif-executable","text":"Default: digestif Command to start the Digestif language server.","title":"lsp-clients-digestif-executable"},{"location":"page/lsp-tex/#lsp-clients-texlab-executable","text":"Default: texlab Command to start the texlab language server.","title":"lsp-clients-texlab-executable"},{"location":"page/lsp-texlab/","text":"TeX, LaTeX, etc. # Server # For more information about the LSP server, check texlab . Installation # cargo install --git https://github.com/latex-lsp/texlab.git Debugger: Not available # Available configurations #","title":"TeX, LaTeX, etc (texlab)"},{"location":"page/lsp-texlab/#tex-latex-etc","text":"","title":"TeX, LaTeX, etc."},{"location":"page/lsp-texlab/#server","text":"For more information about the LSP server, check texlab .","title":"Server"},{"location":"page/lsp-texlab/#installation","text":"cargo install --git https://github.com/latex-lsp/texlab.git","title":"Installation"},{"location":"page/lsp-texlab/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-texlab/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-typescript-javascript/","text":"JavaScript/TypeScript (sourcegraph) # Server # For more information about the LSP server, check javascript-typescript-stdio . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET js-ts RET . npm i -g javascript-typescript-langserver Debugger: Yes (Firefox/Chrome) # Available configurations # lsp-clients-typescript-javascript-server-args # Default: nil Extra arguments for the typescript-language-server language server.","title":"JavaScript/TypeScript (sourcegraph)"},{"location":"page/lsp-typescript-javascript/#javascripttypescript-sourcegraph","text":"","title":"JavaScript/TypeScript (sourcegraph)"},{"location":"page/lsp-typescript-javascript/#server","text":"For more information about the LSP server, check javascript-typescript-stdio .","title":"Server"},{"location":"page/lsp-typescript-javascript/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET js-ts RET . npm i -g javascript-typescript-langserver","title":"Installation"},{"location":"page/lsp-typescript-javascript/#debugger-yes-firefoxchrome","text":"","title":"Debugger: Yes (Firefox/Chrome)"},{"location":"page/lsp-typescript-javascript/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-typescript-javascript/#lsp-clients-typescript-javascript-server-args","text":"Default: nil Extra arguments for the typescript-language-server language server.","title":"lsp-clients-typescript-javascript-server-args"},{"location":"page/lsp-typescript/","text":"JavaScript/TypeScript (theia-ide) # Server # For more information about the LSP server, check typescript-language-server (recommended) . Installation # npm i -g typescript-language-server; npm i -g typescript Debugger: Yes (Firefox/Chrome) # Available configurations # lsp-clients-typescript-server-args # Default: (--stdio) Extra arguments for the typescript-language-server language server. lsp-clients-typescript-log-verbosity # Default: info The server log verbosity. lsp-clients-typescript-plugins # Default: [] The list of plugins to load. It should be a vector of plist with keys \u2018:location\u2019 and \u2018:name\u2019 where \u2018:name\u2019 is the name of the package and \u2018:location\u2019 is the directory containing the package. Example: (vector (list :name \"@vsintellicode/typescript-intellicode-plugin\" :location \" .vscode/extensions/visualstudioexptteam.vscodeintellicode-1.1.9/\"))","title":"JavaScript/TypeScript (theia-ide)"},{"location":"page/lsp-typescript/#javascripttypescript-theia-ide","text":"","title":"JavaScript/TypeScript (theia-ide)"},{"location":"page/lsp-typescript/#server","text":"For more information about the LSP server, check typescript-language-server (recommended) .","title":"Server"},{"location":"page/lsp-typescript/#installation","text":"npm i -g typescript-language-server; npm i -g typescript","title":"Installation"},{"location":"page/lsp-typescript/#debugger-yes-firefoxchrome","text":"","title":"Debugger: Yes (Firefox/Chrome)"},{"location":"page/lsp-typescript/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-typescript/#lsp-clients-typescript-server-args","text":"Default: (--stdio) Extra arguments for the typescript-language-server language server.","title":"lsp-clients-typescript-server-args"},{"location":"page/lsp-typescript/#lsp-clients-typescript-log-verbosity","text":"Default: info The server log verbosity.","title":"lsp-clients-typescript-log-verbosity"},{"location":"page/lsp-typescript/#lsp-clients-typescript-plugins","text":"Default: [] The list of plugins to load. It should be a vector of plist with keys \u2018:location\u2019 and \u2018:name\u2019 where \u2018:name\u2019 is the name of the package and \u2018:location\u2019 is the directory containing the package. Example: (vector (list :name \"@vsintellicode/typescript-intellicode-plugin\" :location \" .vscode/extensions/visualstudioexptteam.vscodeintellicode-1.1.9/\"))","title":"lsp-clients-typescript-plugins"},{"location":"page/lsp-vala/","text":"Vala # Server # For more information about the LSP server, check vala-language-server . Installation # meson build && ninja -C build install Debugger: Not available # Available configurations # lsp-clients-vala-ls-executable # Default: vala-language-server Path to the \u2018vala-language-server\u2019 binary.","title":"Lsp vala"},{"location":"page/lsp-vala/#vala","text":"","title":"Vala"},{"location":"page/lsp-vala/#server","text":"For more information about the LSP server, check vala-language-server .","title":"Server"},{"location":"page/lsp-vala/#installation","text":"meson build && ninja -C build install","title":"Installation"},{"location":"page/lsp-vala/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-vala/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-vala/#lsp-clients-vala-ls-executable","text":"Default: vala-language-server Path to the \u2018vala-language-server\u2019 binary.","title":"lsp-clients-vala-ls-executable"},{"location":"page/lsp-verilog/","text":"Verilog/SystemVerilog # Server # For more information about the LSP server, check hdl_checker . Installation # pip install hdl-checker --upgrade Debugger: Not available # Available configurations # lsp-clients-verilog-executable # Default: (hdl_checker --lsp) Command to start the hdl_checker language server.","title":"Verilog/SystemVerilog"},{"location":"page/lsp-verilog/#verilogsystemverilog","text":"","title":"Verilog/SystemVerilog"},{"location":"page/lsp-verilog/#server","text":"For more information about the LSP server, check hdl_checker .","title":"Server"},{"location":"page/lsp-verilog/#installation","text":"pip install hdl-checker --upgrade","title":"Installation"},{"location":"page/lsp-verilog/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-verilog/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-verilog/#lsp-clients-verilog-executable","text":"Default: (hdl_checker --lsp) Command to start the hdl_checker language server.","title":"lsp-clients-verilog-executable"},{"location":"page/lsp-vetur/","text":"Vue # Server # For more information about the LSP server, check vue-language-server . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET vls RET . npm install -g vls Debugger: Yes (Firefox/Chrome) # Available configurations # lsp-vetur-use-workspace-dependencies # Default: nil Use dependencies from workspace. Currently only for TypeScript. lsp-vetur-completion-auto-import # Default: t Include completion for module export and auto import them lsp-vetur-completion-use-scaffold-snippets # Default: t Enable/disable Vetur\u2019s built-in scaffolding snippets lsp-vetur-completion-tag-casing # Default: kebab Casing conversion for tag completion lsp-vetur-grammar-custom-blocks # Default: ((docs . md) (i18n . json)) Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks. lsp-vetur-validation-template # Default: t Validate vue-html in using eslint-plugin-vue lsp-vetur-language-features-code-actions # Default: t Enable/disable code actions. lsp-vetur-validation-style # Default: t Validate css/scss/less/postcss in","title":"Vue"},{"location":"page/lsp-vetur/#vue","text":"","title":"Vue"},{"location":"page/lsp-vetur/#server","text":"For more information about the LSP server, check vue-language-server .","title":"Server"},{"location":"page/lsp-vetur/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET vls RET . npm install -g vls","title":"Installation"},{"location":"page/lsp-vetur/#debugger-yes-firefoxchrome","text":"","title":"Debugger: Yes (Firefox/Chrome)"},{"location":"page/lsp-vetur/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-vetur/#lsp-vetur-use-workspace-dependencies","text":"Default: nil Use dependencies from workspace. Currently only for TypeScript.","title":"lsp-vetur-use-workspace-dependencies"},{"location":"page/lsp-vetur/#lsp-vetur-completion-auto-import","text":"Default: t Include completion for module export and auto import them","title":"lsp-vetur-completion-auto-import"},{"location":"page/lsp-vetur/#lsp-vetur-completion-use-scaffold-snippets","text":"Default: t Enable/disable Vetur\u2019s built-in scaffolding snippets","title":"lsp-vetur-completion-use-scaffold-snippets"},{"location":"page/lsp-vetur/#lsp-vetur-completion-tag-casing","text":"Default: kebab Casing conversion for tag completion","title":"lsp-vetur-completion-tag-casing"},{"location":"page/lsp-vetur/#lsp-vetur-grammar-custom-blocks","text":"Default: ((docs . md) (i18n . json)) Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.","title":"lsp-vetur-grammar-custom-blocks"},{"location":"page/lsp-vetur/#lsp-vetur-validation-template","text":"Default: t Validate vue-html in using eslint-plugin-vue","title":"lsp-vetur-validation-template"},{"location":"page/lsp-vetur/#lsp-vetur-language-features-code-actions","text":"Default: t Enable/disable code actions.","title":"lsp-vetur-language-features-code-actions"},{"location":"page/lsp-vetur/#lsp-vetur-validation-style","text":"Default: t Validate css/scss/less/postcss in","title":"lsp-vetur-validation-style"},{"location":"page/lsp-vhdl/","text":"VHDL # Server # For more information about the LSP server, check VHDL Tool . Installation # For more instructions on how to install manually, check here . Debugger: Not available # Available configurations # lsp-vhdl-server # Default: vhdl-tool Select which server to use: VHDL-tool: A syntax checking, type checking and linting tool (http://vhdltool.com). HDL Checker: A wrapper for third party tools such as GHDL, ModelSim, Vivado Simulator (https://github.com/suoto/hdl_checker). VHDL LS: A complete VHDL language server protocol implementation with diagnostics, navigate to symbol, find all references etc. (https://github.com/kraigher/rust_hdl). lsp-vhdl-server-path # Default: nil Path to binary server file.","title":"VHDL"},{"location":"page/lsp-vhdl/#vhdl","text":"","title":"VHDL"},{"location":"page/lsp-vhdl/#server","text":"For more information about the LSP server, check VHDL Tool .","title":"Server"},{"location":"page/lsp-vhdl/#installation","text":"For more instructions on how to install manually, check here .","title":"Installation"},{"location":"page/lsp-vhdl/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-vhdl/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-vhdl/#lsp-vhdl-server","text":"Default: vhdl-tool Select which server to use: VHDL-tool: A syntax checking, type checking and linting tool (http://vhdltool.com). HDL Checker: A wrapper for third party tools such as GHDL, ModelSim, Vivado Simulator (https://github.com/suoto/hdl_checker). VHDL LS: A complete VHDL language server protocol implementation with diagnostics, navigate to symbol, find all references etc. (https://github.com/kraigher/rust_hdl).","title":"lsp-vhdl-server"},{"location":"page/lsp-vhdl/#lsp-vhdl-server-path","text":"Default: nil Path to binary server file.","title":"lsp-vhdl-server-path"},{"location":"page/lsp-vim/","text":"Vimscript # Server # For more information about the LSP server, check vim-language-server . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET vimls RET . npm install -g vim-language-server Debugger: n/a # Available configurations # lsp-clients-vim-executable # Default: (vim-language-server --stdio) Command to start the vim language server. lsp-clients-vim-initialization-options # Default: ((iskeyword . vim iskeyword option) (vimruntime . /usr/bin/vim) (runtimepath . /usr/bin/vim) (diagnostic (enable . t)) (indexes (runtimepath . t) (gap . 100) (count . 3)) (suggest (fromVimruntime . t) (fromRuntimepath . :json-false))) Initialization options for vim language server.","title":"Vimscript"},{"location":"page/lsp-vim/#vimscript","text":"","title":"Vimscript"},{"location":"page/lsp-vim/#server","text":"For more information about the LSP server, check vim-language-server .","title":"Server"},{"location":"page/lsp-vim/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET vimls RET . npm install -g vim-language-server","title":"Installation"},{"location":"page/lsp-vim/#debugger-na","text":"","title":"Debugger: n/a"},{"location":"page/lsp-vim/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-vim/#lsp-clients-vim-executable","text":"Default: (vim-language-server --stdio) Command to start the vim language server.","title":"lsp-clients-vim-executable"},{"location":"page/lsp-vim/#lsp-clients-vim-initialization-options","text":"Default: ((iskeyword . vim iskeyword option) (vimruntime . /usr/bin/vim) (runtimepath . /usr/bin/vim) (diagnostic (enable . t)) (indexes (runtimepath . t) (gap . 100) (count . 3)) (suggest (fromVimruntime . t) (fromRuntimepath . :json-false))) Initialization options for vim language server.","title":"lsp-clients-vim-initialization-options"},{"location":"page/lsp-xml/","text":"XML # Server # For more information about the LSP server, check lsp4xml . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET xmlls RET . Automatic by lsp-mode Debugger: Not available # Available configurations # lsp-xml-trace-server # Default: off Traces the communication between VS Code and the XML language server. lsp-xml-catalogs # Default: nil Array of XML Catalogs lsp-xml-logs-client # Default: t Should the server log to client output lsp-xml-format-split-attributes # Default: nil Split multiple attributes each onto a new line lsp-xml-format-join-cdata-lines # Default: nil Join lines in a CDATA tag\u2019s content lsp-xml-format-join-comment-lines # Default: nil Join comment content on format lsp-xml-format-space-before-empty-close-tag # Default: t Insert space before end of self closing tag. Example: -> lsp-xml-format-join-content-lines # Default: nil Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed. lsp-xml-format-preserve-empty-content # Default: nil Preserve empty content/whitespace in a tag. lsp-xml-format-enabled # Default: t Enable/disable ability to format document lsp-xml-format-quotations # Default: doubleQuotes Which type of quotes to use for attribute values when formatting. lsp-xml-file-associations # Default: nil Allows XML schemas to be associated to file name patterns. Example: [{ \"systemId\":\"path/to/file.xsd\",\"pattern\": \"file1.xml\" },{ \"systemId\": \"http://www.w3.org/2001/XMLSchema.xsd\",\"pattern\": \"* / .xsd\" }] lsp-xml-completion-auto-close-tags # Default: t Enable/disable autoclosing of XML tags. IMPORTANT: Turn off editor.autoClosingTags for this to work lsp-xml-server-vmargs # Default: [-noverify -Xmx64M -XX:+UseG1GC -XX:+UseStringDeduplication] Specifies extra VM arguments used to launch the XML Language Server. Eg. use \u2018-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication\u2018 to bypass class verification, increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector lsp-xml-server-work-dir # Default: /home/runner/.lsp4xml Set a custom folder path for cached XML Schemas. An absolute path is expected, although the ~ prefix (for the user home directory) is supported. lsp-xml-validation-no-grammar # Default: hint The message severity when a document has no associated grammar. lsp-xml-validation-enabled # Default: t Enable/disable all validation. lsp-xml-validation-resolve-external-entities # Default: nil Enable/disable resolution (downloading) of external entities from the internet. lsp-xml-validation-schema # Default: t Enable/disable schema based validation. Ignored if \"xml.validation.enabled\": false. lsp-xml-jar-file # Default: ~/.emacs.d/.cache/lsp/xmlls/org.eclipse.lemminx-0.13.1-uber.jar Xml server jar command. lsp-xml-jar-download-url # Default: https://repo.eclipse.org/content/repositories/lemminx-releases/org/eclipse/lemminx/org.eclipse.lemminx/0.13.1/org.eclipse.lemminx-0.13.1-uber.jar Automatic download url for lsp-xml. lsp-xml-server-command # Default: (java -jar /home/runner/.emacs.d/.cache/lsp/xmlls/org.eclipse.lemminx-0.13.1-uber.jar) Xml server command.","title":"XML"},{"location":"page/lsp-xml/#xml","text":"","title":"XML"},{"location":"page/lsp-xml/#server","text":"For more information about the LSP server, check lsp4xml .","title":"Server"},{"location":"page/lsp-xml/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET xmlls RET . Automatic by lsp-mode","title":"Installation"},{"location":"page/lsp-xml/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-xml/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-xml/#lsp-xml-trace-server","text":"Default: off Traces the communication between VS Code and the XML language server.","title":"lsp-xml-trace-server"},{"location":"page/lsp-xml/#lsp-xml-catalogs","text":"Default: nil Array of XML Catalogs","title":"lsp-xml-catalogs"},{"location":"page/lsp-xml/#lsp-xml-logs-client","text":"Default: t Should the server log to client output","title":"lsp-xml-logs-client"},{"location":"page/lsp-xml/#lsp-xml-format-split-attributes","text":"Default: nil Split multiple attributes each onto a new line","title":"lsp-xml-format-split-attributes"},{"location":"page/lsp-xml/#lsp-xml-format-join-cdata-lines","text":"Default: nil Join lines in a CDATA tag\u2019s content","title":"lsp-xml-format-join-cdata-lines"},{"location":"page/lsp-xml/#lsp-xml-format-join-comment-lines","text":"Default: nil Join comment content on format","title":"lsp-xml-format-join-comment-lines"},{"location":"page/lsp-xml/#lsp-xml-format-space-before-empty-close-tag","text":"Default: t Insert space before end of self closing tag. Example: ->","title":"lsp-xml-format-space-before-empty-close-tag"},{"location":"page/lsp-xml/#lsp-xml-format-join-content-lines","text":"Default: nil Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed.","title":"lsp-xml-format-join-content-lines"},{"location":"page/lsp-xml/#lsp-xml-format-preserve-empty-content","text":"Default: nil Preserve empty content/whitespace in a tag.","title":"lsp-xml-format-preserve-empty-content"},{"location":"page/lsp-xml/#lsp-xml-format-enabled","text":"Default: t Enable/disable ability to format document","title":"lsp-xml-format-enabled"},{"location":"page/lsp-xml/#lsp-xml-format-quotations","text":"Default: doubleQuotes Which type of quotes to use for attribute values when formatting.","title":"lsp-xml-format-quotations"},{"location":"page/lsp-xml/#lsp-xml-file-associations","text":"Default: nil Allows XML schemas to be associated to file name patterns. Example: [{ \"systemId\":\"path/to/file.xsd\",\"pattern\": \"file1.xml\" },{ \"systemId\": \"http://www.w3.org/2001/XMLSchema.xsd\",\"pattern\": \"* / .xsd\" }]","title":"lsp-xml-file-associations"},{"location":"page/lsp-xml/#lsp-xml-completion-auto-close-tags","text":"Default: t Enable/disable autoclosing of XML tags. IMPORTANT: Turn off editor.autoClosingTags for this to work","title":"lsp-xml-completion-auto-close-tags"},{"location":"page/lsp-xml/#lsp-xml-server-vmargs","text":"Default: [-noverify -Xmx64M -XX:+UseG1GC -XX:+UseStringDeduplication] Specifies extra VM arguments used to launch the XML Language Server. Eg. use \u2018-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication\u2018 to bypass class verification, increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector","title":"lsp-xml-server-vmargs"},{"location":"page/lsp-xml/#lsp-xml-server-work-dir","text":"Default: /home/runner/.lsp4xml Set a custom folder path for cached XML Schemas. An absolute path is expected, although the ~ prefix (for the user home directory) is supported.","title":"lsp-xml-server-work-dir"},{"location":"page/lsp-xml/#lsp-xml-validation-no-grammar","text":"Default: hint The message severity when a document has no associated grammar.","title":"lsp-xml-validation-no-grammar"},{"location":"page/lsp-xml/#lsp-xml-validation-enabled","text":"Default: t Enable/disable all validation.","title":"lsp-xml-validation-enabled"},{"location":"page/lsp-xml/#lsp-xml-validation-resolve-external-entities","text":"Default: nil Enable/disable resolution (downloading) of external entities from the internet.","title":"lsp-xml-validation-resolve-external-entities"},{"location":"page/lsp-xml/#lsp-xml-validation-schema","text":"Default: t Enable/disable schema based validation. Ignored if \"xml.validation.enabled\": false.","title":"lsp-xml-validation-schema"},{"location":"page/lsp-xml/#lsp-xml-jar-file","text":"Default: ~/.emacs.d/.cache/lsp/xmlls/org.eclipse.lemminx-0.13.1-uber.jar Xml server jar command.","title":"lsp-xml-jar-file"},{"location":"page/lsp-xml/#lsp-xml-jar-download-url","text":"Default: https://repo.eclipse.org/content/repositories/lemminx-releases/org/eclipse/lemminx/org.eclipse.lemminx/0.13.1/org.eclipse.lemminx-0.13.1-uber.jar Automatic download url for lsp-xml.","title":"lsp-xml-jar-download-url"},{"location":"page/lsp-xml/#lsp-xml-server-command","text":"Default: (java -jar /home/runner/.emacs.d/.cache/lsp/xmlls/org.eclipse.lemminx-0.13.1-uber.jar) Xml server command.","title":"lsp-xml-server-command"},{"location":"page/lsp-yaml/","text":"YAML # Server # For more information about the LSP server, check yaml . Installation # This Server supports automatic install. Install this language server with M-x lsp-install-server RET yamlls RET . npm install -g yaml-language-server Debugger: Not available # Available configurations # lsp-yaml-format-enable # Default: t Enable/disable default YAML formatter. lsp-yaml-single-quote # Default: nil Use single quote instead of double quotes. lsp-yaml-bracket-spacing # Default: t Print spaces between brackets in objects. lsp-yaml-prose-wrap # Default: preserve Options for prose-wrap. Always: wrap prose if it exceeds the print width. Never: never wrap the prose. Preserve: wrap prose as-is. lsp-yaml-print-width # Default: 80 Specify the line length that the printer will wrap on. lsp-yaml-validate # Default: t Enable/disable validation feature. lsp-yaml-hover # Default: t Enable/disable hover feature. lsp-yaml-completion # Default: t Enable/disable completion feature. lsp-yaml-schemas # Default: nil Associate schemas to YAML files in a glob pattern. lsp-yaml-schema-store-enable # Default: t Enable/disable JSON Schema store. When set to true, available YAML schemas will be automatically pulled from the store. lsp-yaml-custom-tags # Default: nil Custom tags for the parser to use. lsp-yaml-schema-store-uri # Default: https://www.schemastore.org/api/json/catalog.json URI of schema store that would be fetched to get the list of schemas. lsp-yaml-schema-store-local-db # Default: ~/.emacs.d/.cache/lsp/lsp-yaml-schemas.json Cached databse of schema store. lsp-yaml-server-command # Default: (yaml-language-server --stdio) Command to start yaml-languageserver.","title":"YAML"},{"location":"page/lsp-yaml/#yaml","text":"","title":"YAML"},{"location":"page/lsp-yaml/#server","text":"For more information about the LSP server, check yaml .","title":"Server"},{"location":"page/lsp-yaml/#installation","text":"This Server supports automatic install. Install this language server with M-x lsp-install-server RET yamlls RET . npm install -g yaml-language-server","title":"Installation"},{"location":"page/lsp-yaml/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-yaml/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-yaml/#lsp-yaml-format-enable","text":"Default: t Enable/disable default YAML formatter.","title":"lsp-yaml-format-enable"},{"location":"page/lsp-yaml/#lsp-yaml-single-quote","text":"Default: nil Use single quote instead of double quotes.","title":"lsp-yaml-single-quote"},{"location":"page/lsp-yaml/#lsp-yaml-bracket-spacing","text":"Default: t Print spaces between brackets in objects.","title":"lsp-yaml-bracket-spacing"},{"location":"page/lsp-yaml/#lsp-yaml-prose-wrap","text":"Default: preserve Options for prose-wrap. Always: wrap prose if it exceeds the print width. Never: never wrap the prose. Preserve: wrap prose as-is.","title":"lsp-yaml-prose-wrap"},{"location":"page/lsp-yaml/#lsp-yaml-print-width","text":"Default: 80 Specify the line length that the printer will wrap on.","title":"lsp-yaml-print-width"},{"location":"page/lsp-yaml/#lsp-yaml-validate","text":"Default: t Enable/disable validation feature.","title":"lsp-yaml-validate"},{"location":"page/lsp-yaml/#lsp-yaml-hover","text":"Default: t Enable/disable hover feature.","title":"lsp-yaml-hover"},{"location":"page/lsp-yaml/#lsp-yaml-completion","text":"Default: t Enable/disable completion feature.","title":"lsp-yaml-completion"},{"location":"page/lsp-yaml/#lsp-yaml-schemas","text":"Default: nil Associate schemas to YAML files in a glob pattern.","title":"lsp-yaml-schemas"},{"location":"page/lsp-yaml/#lsp-yaml-schema-store-enable","text":"Default: t Enable/disable JSON Schema store. When set to true, available YAML schemas will be automatically pulled from the store.","title":"lsp-yaml-schema-store-enable"},{"location":"page/lsp-yaml/#lsp-yaml-custom-tags","text":"Default: nil Custom tags for the parser to use.","title":"lsp-yaml-custom-tags"},{"location":"page/lsp-yaml/#lsp-yaml-schema-store-uri","text":"Default: https://www.schemastore.org/api/json/catalog.json URI of schema store that would be fetched to get the list of schemas.","title":"lsp-yaml-schema-store-uri"},{"location":"page/lsp-yaml/#lsp-yaml-schema-store-local-db","text":"Default: ~/.emacs.d/.cache/lsp/lsp-yaml-schemas.json Cached databse of schema store.","title":"lsp-yaml-schema-store-local-db"},{"location":"page/lsp-yaml/#lsp-yaml-server-command","text":"Default: (yaml-language-server --stdio) Command to start yaml-languageserver.","title":"lsp-yaml-server-command"},{"location":"page/main-features/","text":"Main features # Completion at point # If LSP server supports completion, lsp-mode use symbols returned by the server to present the user when completion is triggered via completion-at-point . For better performance and results, use company-capf by installing company-mode . You can check above the recommended settings for company-mode : ( setq company-minimum-prefix-length 1 company-idle-delay 0.0 ) ;; default is 0.2 Code navigation # lsp-find-definition lsp-find-references Code lens # In case the LSP server supports code lens: Project errors on modeline # To see all error statistics in the modeline you can enable lsp-modeline-diagnostics-mode or (setq lsp-modeline-diagnostics-enable t) . This is especially useful for languages that compilation might be broken due to errors in other files(e.g. Java/Haskell). ( with-eval-after-load 'lsp-mode ;; :global/:workspace/:file ( setq lsp-modeline-diagnostics-scope :workspace )) Tip: To find out the global errors you might use lsp-treemacs-errors-list . Code actions on modeline # For a UI feedback of the available code actions, you can enable lsp-modeline-code-actions-mode which shows available code actions on modeline: With lsp-modeline-code-actions-segments you can customize what to show on the modeline as you want: lsp-modeline-code-actions-segments result '(count icon) (Default) '(name icon) '(icon) '(count icon name) Breadcrumb on headerline # For a UI feedback on headerline of the document symbols at point, current file or project name, you can enable lsp-headerline-breadcrumb-mode which shows a breadcrumb on top of window. You can customize the breadcrumb segments via lsp-headerline-breadcrumb-segments variable, some examples: lsp-headerline-breadcrumb-segments result '(path-up-to-project file symbols) (Default) '(project file symbols) '(symbols) If lsp-headerline-breadcrumb-segments contains 'symbols , you can optionally label the corresponding entries in the headerline display by setting lsp-headerline-breadcrumb-enable-symbol-numbers to t . Symbol highlights # In case LSP server supports hover feature: Formatting # In general the formatter settings are language server specific(e. g. JDT LS uses eclipse formatter file and lsp-java-format-settings-url to configure it while clangd uses clangd-format and lsp-dart uses the built-in dartfmt from Dart SDK ). The only settings that are controlled on lsp-mode level are indent size and whether the server should use tabs or spaces. Use c-basic-offset for cc-mode derived moves(e. g. java, C++) to control the tab size. Use tab-width for any other mode to do the same. Use indent-tabs-mode for selecting tab/spaces. Debugger # lsp-mode integrates with dap-mode with implements the DAP(Debugger Adapter Protocol), for more information check the dap-mode documentation . Integrations # lsp-mode supports many integrations for improve the user experience like treemacs , Helm , Ivy and others. For all available integrations, check the Extensions section on the left navigation.","title":"Main features"},{"location":"page/main-features/#main-features","text":"","title":"Main features"},{"location":"page/main-features/#completion-at-point","text":"If LSP server supports completion, lsp-mode use symbols returned by the server to present the user when completion is triggered via completion-at-point . For better performance and results, use company-capf by installing company-mode . You can check above the recommended settings for company-mode : ( setq company-minimum-prefix-length 1 company-idle-delay 0.0 ) ;; default is 0.2","title":"Completion at point"},{"location":"page/main-features/#code-navigation","text":"lsp-find-definition lsp-find-references","title":"Code navigation"},{"location":"page/main-features/#code-lens","text":"In case the LSP server supports code lens:","title":"Code lens"},{"location":"page/main-features/#project-errors-on-modeline","text":"To see all error statistics in the modeline you can enable lsp-modeline-diagnostics-mode or (setq lsp-modeline-diagnostics-enable t) . This is especially useful for languages that compilation might be broken due to errors in other files(e.g. Java/Haskell). ( with-eval-after-load 'lsp-mode ;; :global/:workspace/:file ( setq lsp-modeline-diagnostics-scope :workspace )) Tip: To find out the global errors you might use lsp-treemacs-errors-list .","title":"Project errors on modeline"},{"location":"page/main-features/#code-actions-on-modeline","text":"For a UI feedback of the available code actions, you can enable lsp-modeline-code-actions-mode which shows available code actions on modeline: With lsp-modeline-code-actions-segments you can customize what to show on the modeline as you want: lsp-modeline-code-actions-segments result '(count icon) (Default) '(name icon) '(icon) '(count icon name)","title":"Code actions on modeline"},{"location":"page/main-features/#breadcrumb-on-headerline","text":"For a UI feedback on headerline of the document symbols at point, current file or project name, you can enable lsp-headerline-breadcrumb-mode which shows a breadcrumb on top of window. You can customize the breadcrumb segments via lsp-headerline-breadcrumb-segments variable, some examples: lsp-headerline-breadcrumb-segments result '(path-up-to-project file symbols) (Default) '(project file symbols) '(symbols) If lsp-headerline-breadcrumb-segments contains 'symbols , you can optionally label the corresponding entries in the headerline display by setting lsp-headerline-breadcrumb-enable-symbol-numbers to t .","title":"Breadcrumb on headerline"},{"location":"page/main-features/#symbol-highlights","text":"In case LSP server supports hover feature:","title":"Symbol highlights"},{"location":"page/main-features/#formatting","text":"In general the formatter settings are language server specific(e. g. JDT LS uses eclipse formatter file and lsp-java-format-settings-url to configure it while clangd uses clangd-format and lsp-dart uses the built-in dartfmt from Dart SDK ). The only settings that are controlled on lsp-mode level are indent size and whether the server should use tabs or spaces. Use c-basic-offset for cc-mode derived moves(e. g. java, C++) to control the tab size. Use tab-width for any other mode to do the same. Use indent-tabs-mode for selecting tab/spaces.","title":"Formatting"},{"location":"page/main-features/#debugger","text":"lsp-mode integrates with dap-mode with implements the DAP(Debugger Adapter Protocol), for more information check the dap-mode documentation .","title":"Debugger"},{"location":"page/main-features/#integrations","text":"lsp-mode supports many integrations for improve the user experience like treemacs , Helm , Ivy and others. For all available integrations, check the Extensions section on the left navigation.","title":"Integrations"},{"location":"page/performance/","text":"Performance # Tuning # Use M-x lsp-doctor to validate if your lsp-mode is properly configured. In the section below, you could find description for each of the checks: When configured properly lsp-mode 's performance is on par with mainstream LSP clients (e. g. VScode , Theia , etc). Here are steps to achieve optimal results. Use Emacs 27+ with native json support. (Note: this requires that you have libjansson installed, and that emacs was compiled with `\u2013with-json` passed to `./configure`.) You can check your installation for native json support by running M-: (functionp 'json-serialize) RET . Benchmarks show that Emacs 27 is ~15 times faster than Emacs when using Elisp json parser implementation. Adjust gc-cons-threshold . The default setting is too low for lsp-mode 's needs due to the fact that client/server communication generates a lot of memory/garbage. You have two options: Set it to big number(100mb) like most of the popular starter kits like Spacemacs/Doom/Prelude, etc do: ( setq gc-cons-threshold 100000000 ) Follow the method recommended by Gnu Emacs Maintainer Eli Zaretskii: \"My suggestion is to repeatedly multiply gc-cons-threshold by 2 until you stop seeing significant improvements in responsiveness, and in any case not to increase by a factor larger than 100 or somesuch. If even a 100-fold increase doesn't help, there's some deeper problem with the Lisp code which produces so much garbage, or maybe GC is not the reason for slowdown.\" Source: https://www.reddit.com/r/emacs/comments/brc05y/is_lspmode_too_slow_to_use_for_anyone_else/eofulix/ Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range. ( setq read-process-output-max ( * 1024 1024 )) ;; 1mb Make sure that you are using company-capf as the completion provider with: ( setq lsp-completion-provider :capf ) Note: - to verify which company backend implementation you are using do M-x company-diag when performing auto-completion. Optional: Disable lsp-ui . Normally, lsp-ui is very fast but in some systems (especially when using Windows ) lsp-ui overlays and popups might slow down emacs. Optional: fine-tune lsp-idle-delay . This variable determines how often lsp-mode will refresh the highlights, lenses, links, etc while you type. ( setq lsp-idle-delay 0.500 ) gccemacs # gccemacs is a bleeding-edge version of Emacs that compiles elisp to native code, resulting in more than 200% speedup. For everyone looking for optimal performance, gccemacs is the way to go. Ignore watch folders/files # If the server supports watch files, by default lsp-mode tries to watch all files and folders of the project ignoring the regexp from lsp-file-watch-ignored . If you don't want some file or folder to be watched for performance reasons, you can add a regexp to that variable excluding the file or folder. Also you can disable the file watch feature with: ( setq lsp-enable-file-watchers nil ) Check if logging is switched off. # Make sure lsp-log-io is nil . You might have forgotten it after a debugging session, for example. It can cause a great performance hit. ( setq lsp-log-io nil ) ; if set to true can cause a performance hit Sometimes you might need to check logging for specific LSP server configuration as well, i.e. for lsp-eslint it is: lsp-eslint-trace-server . Reporting performance problems # If you have tried all of the non-optional steps from the list and emacs is still not very responsive please open a PR with the following information: Collect lsp-log data after setting lsp-print-performance to t . ( setq lsp-print-performance t ) Include emacs performance report. Use the following step to collect it: M-x profiler-start and select CPU Reproduce the slow behavior. M-x profiler-stop In the profiler report expand all nodes by doing C-u TAB . Note: - lsp-mode is just a frontend and the performance depends on server as well. Some servers (e. g. Palantir's Python Language Server) might be slow when performing auto-completion.","title":"Performance"},{"location":"page/performance/#performance","text":"","title":"Performance"},{"location":"page/performance/#tuning","text":"Use M-x lsp-doctor to validate if your lsp-mode is properly configured. In the section below, you could find description for each of the checks: When configured properly lsp-mode 's performance is on par with mainstream LSP clients (e. g. VScode , Theia , etc). Here are steps to achieve optimal results. Use Emacs 27+ with native json support. (Note: this requires that you have libjansson installed, and that emacs was compiled with `\u2013with-json` passed to `./configure`.) You can check your installation for native json support by running M-: (functionp 'json-serialize) RET . Benchmarks show that Emacs 27 is ~15 times faster than Emacs when using Elisp json parser implementation. Adjust gc-cons-threshold . The default setting is too low for lsp-mode 's needs due to the fact that client/server communication generates a lot of memory/garbage. You have two options: Set it to big number(100mb) like most of the popular starter kits like Spacemacs/Doom/Prelude, etc do: ( setq gc-cons-threshold 100000000 ) Follow the method recommended by Gnu Emacs Maintainer Eli Zaretskii: \"My suggestion is to repeatedly multiply gc-cons-threshold by 2 until you stop seeing significant improvements in responsiveness, and in any case not to increase by a factor larger than 100 or somesuch. If even a 100-fold increase doesn't help, there's some deeper problem with the Lisp code which produces so much garbage, or maybe GC is not the reason for slowdown.\" Source: https://www.reddit.com/r/emacs/comments/brc05y/is_lspmode_too_slow_to_use_for_anyone_else/eofulix/ Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range. ( setq read-process-output-max ( * 1024 1024 )) ;; 1mb Make sure that you are using company-capf as the completion provider with: ( setq lsp-completion-provider :capf ) Note: - to verify which company backend implementation you are using do M-x company-diag when performing auto-completion. Optional: Disable lsp-ui . Normally, lsp-ui is very fast but in some systems (especially when using Windows ) lsp-ui overlays and popups might slow down emacs. Optional: fine-tune lsp-idle-delay . This variable determines how often lsp-mode will refresh the highlights, lenses, links, etc while you type. ( setq lsp-idle-delay 0.500 )","title":"Tuning"},{"location":"page/performance/#gccemacs","text":"gccemacs is a bleeding-edge version of Emacs that compiles elisp to native code, resulting in more than 200% speedup. For everyone looking for optimal performance, gccemacs is the way to go.","title":"gccemacs"},{"location":"page/performance/#ignore-watch-foldersfiles","text":"If the server supports watch files, by default lsp-mode tries to watch all files and folders of the project ignoring the regexp from lsp-file-watch-ignored . If you don't want some file or folder to be watched for performance reasons, you can add a regexp to that variable excluding the file or folder. Also you can disable the file watch feature with: ( setq lsp-enable-file-watchers nil )","title":"Ignore watch folders/files"},{"location":"page/performance/#check-if-logging-is-switched-off","text":"Make sure lsp-log-io is nil . You might have forgotten it after a debugging session, for example. It can cause a great performance hit. ( setq lsp-log-io nil ) ; if set to true can cause a performance hit Sometimes you might need to check logging for specific LSP server configuration as well, i.e. for lsp-eslint it is: lsp-eslint-trace-server .","title":"Check if logging is switched off."},{"location":"page/performance/#reporting-performance-problems","text":"If you have tried all of the non-optional steps from the list and emacs is still not very responsive please open a PR with the following information: Collect lsp-log data after setting lsp-print-performance to t . ( setq lsp-print-performance t ) Include emacs performance report. Use the following step to collect it: M-x profiler-start and select CPU Reproduce the slow behavior. M-x profiler-stop In the profiler report expand all nodes by doing C-u TAB . Note: - lsp-mode is just a frontend and the performance depends on server as well. Some servers (e. g. Palantir's Python Language Server) might be slow when performing auto-completion.","title":"Reporting performance problems"},{"location":"page/remote/","text":"Remote # TRAMP # LSP mode has support for tramp buffers with the following requirements: The language server has to be present on the remote server. Having multi folder language server (like Eclipse JDT LS ) cannot have local and remote workspace folders. How does it work? # lsp-mode detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as :remote? t. Then lsp-mode starts the client through tramp. Sample configuration # Here it is example how you can configure python language server to work when using TRAMP . Note that if you are trying to convert existing language server configuration you should copy all of it's properties(e. g. :request-handlers , activation-fn , etc). Also, when you are doing that you should make sure that none of the custom language server settings are not pointing to local path because those settings will be sent to the remote server. ( lsp-register-client ( make-lsp-client :new-connection ( lsp-tramp-connection \"<binary name (e. g. pyls, rls)>\" ) :major-modes ' ( python-mode ) :remote? t :server-id 'pyls-remote )) Note: when you do not have root privileges on the remote machine to put the language server on the path you may alter the remote path by changing tramp-remote-path . Dealing with stderr # With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the lsp-mode parser. As a workaround, lsp-mode is redirecting stderr to /tmp/<process-name>-<id>~stderr . Docker # Refer to lsp-docker README which provides a guide on how you can run lsp-mode in docker container.","title":"Remote"},{"location":"page/remote/#remote","text":"","title":"Remote"},{"location":"page/remote/#tramp","text":"LSP mode has support for tramp buffers with the following requirements: The language server has to be present on the remote server. Having multi folder language server (like Eclipse JDT LS ) cannot have local and remote workspace folders.","title":"TRAMP"},{"location":"page/remote/#how-does-it-work","text":"lsp-mode detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as :remote? t. Then lsp-mode starts the client through tramp.","title":"How does it work?"},{"location":"page/remote/#sample-configuration","text":"Here it is example how you can configure python language server to work when using TRAMP . Note that if you are trying to convert existing language server configuration you should copy all of it's properties(e. g. :request-handlers , activation-fn , etc). Also, when you are doing that you should make sure that none of the custom language server settings are not pointing to local path because those settings will be sent to the remote server. ( lsp-register-client ( make-lsp-client :new-connection ( lsp-tramp-connection \"<binary name (e. g. pyls, rls)>\" ) :major-modes ' ( python-mode ) :remote? t :server-id 'pyls-remote )) Note: when you do not have root privileges on the remote machine to put the language server on the path you may alter the remote path by changing tramp-remote-path .","title":"Sample configuration"},{"location":"page/remote/#dealing-with-stderr","text":"With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the lsp-mode parser. As a workaround, lsp-mode is redirecting stderr to /tmp/<process-name>-<id>~stderr .","title":"Dealing with stderr"},{"location":"page/remote/#docker","text":"Refer to lsp-docker README which provides a guide on how you can run lsp-mode in docker container.","title":"Docker"},{"location":"page/settings/","text":"Settings # These are lsp-mode specific custom settings: lsp-log-io - If non-nil, print all messages to and from the language server to *lsp-log* . lsp-print-performance - If non-nil, print performance info. to *lsp-log* . lsp-report-if-no-buffer - If non nil the errors will be reported even when the file is not open. lsp-keep-workspace-alive - If non nil keep workspace alive when the last workspace buffer is closed. lsp-enable-snippet - Enable/disable snippet completion support. lsp-auto-guess-root - Automatically guess the project root using projectile/project. Do not use this setting unless you are familiar with lsp-mode internals and you are sure that all of your projects are following projectile=/=project.el conventions. lsp-restart - Defines how server exited event must be handled. lsp-session-file - File where session information is stored. lsp-auto-configure - Auto configure lsp-mode . When set to t , lsp-mode will auto-configure lsp-ui , dap-mode and other settings that makes sense to enable by default. lsp-document-sync-method - How to sync the document with the language server. lsp-auto-execute-action - Auto-execute single action. lsp-eldoc-render-all - Display all of the info returned by document/onHover . If this is nil, eldoc will show only the symbol information. lsp-enable-completion-at-point - Enable completion-at-point integration. lsp-enable-xref - Enable xref integration. lsp-diagnostics-provider - Specifies which package to use for diagnostics. Choose from :auto , :flycheck , :flymake and :none . Default is :auto which means use :flycheck if present and fallback to :flymake . lsp-enable-indentation - Indent regions using the file formatting functionality provided by the language server. lsp-enable-on-type-formatting - Enable textDocument/onTypeFormatting integration. lsp-before-save-edits - If non-nil, lsp-mode will apply edits suggested by the language server before saving a document. lsp-imenu-show-container-name - Display the symbol's container name in an imenu entry. lsp-imenu-container-name-separator - Separator string to use to separate the container name from the symbol while displaying imenu entries. lsp-imenu-sort-methods - How to sort the imenu items. The value is a list of kind , name or position . Priorities are determined by the index of the element. lsp-response-timeout - Number of seconds to wait for a response from the language server before timing out. lsp-enable-file-watchers - If non-nil lsp-mode will watch the files in the workspace if the server has requested that. lsp-server-trace - Request trace mode on the language server. lsp-semantic-tokens-enable - Enable semantic tokens highlighting support lsp-enable-imenu - If non-nil, automatically enable imenu integration when server provides textDocument/documentSymbol . lsp-signature-auto-activate - Auto activate signature when trigger conditions are meet. lsp-signature-render-documentation - Include signature documentation in signature help. lsp-enable-text-document-color - Enable textDocument/documentColor when server supports it. lsp-headerline-breadcrumb-enable - Enable lsp-headerline-breadcrumb-mode .","title":"Settings"},{"location":"page/settings/#settings","text":"These are lsp-mode specific custom settings: lsp-log-io - If non-nil, print all messages to and from the language server to *lsp-log* . lsp-print-performance - If non-nil, print performance info. to *lsp-log* . lsp-report-if-no-buffer - If non nil the errors will be reported even when the file is not open. lsp-keep-workspace-alive - If non nil keep workspace alive when the last workspace buffer is closed. lsp-enable-snippet - Enable/disable snippet completion support. lsp-auto-guess-root - Automatically guess the project root using projectile/project. Do not use this setting unless you are familiar with lsp-mode internals and you are sure that all of your projects are following projectile=/=project.el conventions. lsp-restart - Defines how server exited event must be handled. lsp-session-file - File where session information is stored. lsp-auto-configure - Auto configure lsp-mode . When set to t , lsp-mode will auto-configure lsp-ui , dap-mode and other settings that makes sense to enable by default. lsp-document-sync-method - How to sync the document with the language server. lsp-auto-execute-action - Auto-execute single action. lsp-eldoc-render-all - Display all of the info returned by document/onHover . If this is nil, eldoc will show only the symbol information. lsp-enable-completion-at-point - Enable completion-at-point integration. lsp-enable-xref - Enable xref integration. lsp-diagnostics-provider - Specifies which package to use for diagnostics. Choose from :auto , :flycheck , :flymake and :none . Default is :auto which means use :flycheck if present and fallback to :flymake . lsp-enable-indentation - Indent regions using the file formatting functionality provided by the language server. lsp-enable-on-type-formatting - Enable textDocument/onTypeFormatting integration. lsp-before-save-edits - If non-nil, lsp-mode will apply edits suggested by the language server before saving a document. lsp-imenu-show-container-name - Display the symbol's container name in an imenu entry. lsp-imenu-container-name-separator - Separator string to use to separate the container name from the symbol while displaying imenu entries. lsp-imenu-sort-methods - How to sort the imenu items. The value is a list of kind , name or position . Priorities are determined by the index of the element. lsp-response-timeout - Number of seconds to wait for a response from the language server before timing out. lsp-enable-file-watchers - If non-nil lsp-mode will watch the files in the workspace if the server has requested that. lsp-server-trace - Request trace mode on the language server. lsp-semantic-tokens-enable - Enable semantic tokens highlighting support lsp-enable-imenu - If non-nil, automatically enable imenu integration when server provides textDocument/documentSymbol . lsp-signature-auto-activate - Auto activate signature when trigger conditions are meet. lsp-signature-render-documentation - Include signature documentation in signature help. lsp-enable-text-document-color - Enable textDocument/documentColor when server supports it. lsp-headerline-breadcrumb-enable - Enable lsp-headerline-breadcrumb-mode .","title":"Settings"},{"location":"page/troubleshooting/","text":"Troubleshooting # Check *lsp-log* buffer and verify that lsp-mode is able to find the server. If lsp-mode is unable to find the binary but it is on the path it is probably caused by the fact that emacs is running with different path. You may check the current path by executing M-: (getenv \"PATH\") . If this is the case, you have several options to fix the issue. make sure that emacs is using the proper path by running emacs from terminal. Modify the path using setpath . Look for lsp-mode variable to customize server path. Usually, you may find the variable by doing: M-x customize-group RET lsp-LANGUAGE-SERVER-ID . Set lsp-log-io to t to inspect communication between client and the server. Use lsp-workspace-show-log to switch to the corresponding log buffer. lsp-describe-session will show the current projects roots + the started servers and allows inspecting the server capabilities: - If you manage your Emacs packages with the built-in package.el , we recommend the following procedure to update your packages: Delete your LSP-related packages Restart Emacs Install the new versions of the packages.","title":"Troubleshooting"},{"location":"page/troubleshooting/#troubleshooting","text":"Check *lsp-log* buffer and verify that lsp-mode is able to find the server. If lsp-mode is unable to find the binary but it is on the path it is probably caused by the fact that emacs is running with different path. You may check the current path by executing M-: (getenv \"PATH\") . If this is the case, you have several options to fix the issue. make sure that emacs is using the proper path by running emacs from terminal. Modify the path using setpath . Look for lsp-mode variable to customize server path. Usually, you may find the variable by doing: M-x customize-group RET lsp-LANGUAGE-SERVER-ID . Set lsp-log-io to t to inspect communication between client and the server. Use lsp-workspace-show-log to switch to the corresponding log buffer. lsp-describe-session will show the current projects roots + the started servers and allows inspecting the server capabilities: - If you manage your Emacs packages with the built-in package.el , we recommend the following procedure to update your packages: Delete your LSP-related packages Restart Emacs Install the new versions of the packages.","title":"Troubleshooting"},{"location":"template/lsp-client-var/","text":"{{name}} # Default: {{default}} {{documentation}}","title":"Lsp client var"},{"location":"template/lsp-client-var/#name","text":"Default: {{default}} {{documentation}}","title":"{{name}}"},{"location":"template/lsp-client/","text":"{{full-name}} # Server # For more information about the LSP server, check {{server-name}} . Installation # {{lsp-install-server}} {{installation}}{{installation-url}} Debugger: {{debugger}} # {{manual-documentation}} Available configurations #","title":"Lsp client"},{"location":"template/lsp-client/#full-name","text":"","title":"{{full-name}}"},{"location":"template/lsp-client/#server","text":"For more information about the LSP server, check {{server-name}} .","title":"Server"},{"location":"template/lsp-client/#installation","text":"{{lsp-install-server}} {{installation}}{{installation-url}}","title":"Installation"},{"location":"template/lsp-client/#debugger-debugger","text":"{{manual-documentation}}","title":"Debugger: {{debugger}}"},{"location":"template/lsp-client/#available-configurations","text":"","title":"Available configurations"},{"location":"tutorials/CPP-guide/","text":"Configuring Emacs a C/C++ IDE # In this guide, I will show you how to configure lsp-mode and dap-mode for C/C++ development, using GNU Emacs as an example code base. At the end of this tutorial, Emacs should provide you with all the language-aware editor features you'd expect from a modern C++ IDE, such as Code completion... environment. The guide is mainly focused on lsp-mode / dap-mode and the features that they have. We will use GNU Emacs as a project in order to illustrate each of the steps to get C/C++ project up and running. Some of the main features that we can expect from a C++ IDE: Code completion Real-time syntax checking Code navigation (references/definitions/implementations/symbol search) Visual IDE debugger Document outline, breadcrumb and modeline widgets For all lsp-mode features, check here . Obtaining a language server # lsp-mode is a client-server application with Emacs acting as the client. In order for it to work, you have to install a separate language server that understands the specifics of your target language. As of late 2020, there are 2 production-ready language servers for C/C++ and Objective-C , ccls and clangd , with ccls 's precursor cquery being deprecated. used by Emacs as provider for language specific features (completion, diagnostics, navigation, etc). For some of the language servers lsp-mode ships with automatic installation scripts but there is no such script for installing C/C++ language server due to their overall complexity. For this guide we will be using clangd but most of the steps here apply to ccls as well. lsp-mode is pre-configured and it will be able to find the language server automatically when it is installed on the host machine and it is present on the path. In case clangd is not present on the path clangd can be installed following their Getting Started instructions. Note: for Debian based system use https://apt.llvm.org/ Project setup # To understand your source code, clangd needs to know the compiler flags that are used to build the project. (This is just a fact of life in C++, source files are not self-contained). By default, clangd will assume your code is built as clang some_file.cc , and you\u2019ll probably get spurious errors about missing #included files, etc. There are a couple of ways to fix this. You may read about them in installation or in https://sarcasm.github.io/notes/dev/compilation-database.html. In order to generate compile_commands.json for Emacs itself I have found that Bear works fine. sudo apt-get install bear Setup Emacs sources and dependencies: sudo apt-get install -y build-essential git autoconf texinfo libgnutls28-dev libxml2-dev libncurses5-dev libjansson-dev git clone git://git.sv.gnu.org/emacs.git cd emacs ./autogen.sh CFLAGS = \"-ggdb3 -O0\" CXXFLAGS = \"-ggdb3 -O0\" LDFLAGS = \"-ggdb3\" ./configure --with-modules --with-json bear make -j $( nproc ) Prefixing make -j$(nproc) with bear will generate the compile_commands.json which later will be used by clangd . CFLAGS=\"-ggdb3 -O0\" CXXFLAGS=\"-ggdb3 -O0\" LDFLAGS=\"-ggdb3\" will compile Emacs with debug symbols. lsp-mode configuration # Here is a bare-bones lsp-mode / dap-mode configuration template to get you started with your own lsp-mode config, or to try out in a separate one-off session. Please note that Emacs configuration frameworks such as Spacemacs or Doom Emacs often ship with lsp-mode settings of their own; should you be using such a framework, and find that lsp-mode doesn't behave as intended, please make sure to follow this tutorial from a clean starting point. in your config or you could run in separate session. ( require 'package ) ( add-to-list 'package-archives ' ( \"melpa\" . \"http://melpa.org/packages/\" ) t ) ( package-initialize ) ( setq package-selected-packages ' ( lsp-mode yasnippet lsp-treemacs helm-lsp projectile hydra flycheck company avy which-key helm-xref dap-mode )) ( when ( cl-find-if-not #' package-installed-p package-selected-packages ) ( package-refresh-contents ) ( mapc #' package-install package-selected-packages )) ;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details ( helm-mode ) ( require 'helm-xref ) ( define-key global-map [ remap find-file ] #' helm-find-files ) ( define-key global-map [ remap execute-extended-command ] #' helm-M-x ) ( define-key global-map [ remap switch-to-buffer ] #' helm-mini ) ( which-key-mode ) ( add-hook 'c-mode-hook 'lsp ) ( add-hook 'cpp-mode-hook 'lsp ) ( setq gc-cons-threshold ( * 100 1024 1024 ) read-process-output-max ( * 1024 1024 ) treemacs-space-between-root-nodes nil company-idle-delay 0.0 company-minimum-prefix-length 1 lsp-idle-delay 0.1 ;; clangd is fast ;; be more ide-ish lsp-headerline-breadcrumb-enable t ) ( with-eval-after-load 'lsp-mode ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration ) ( require 'dap-cpptools ) ( yas-global-mode )) Feature overview # And now it is time to start hacking on Emacs core! emacs ~/Sources/emacs/src/editfns.c Now, if everything was successful you will be asked to select a project root. Note: the project root is needed by the language server in order to know where to start the project discovery from. Typically, this is the git repository root but since exceptions to this rule have caused us a lot of trouble in the past (monorepos come to mind), lsp-mode by default asks the user to manually confirm the project root the first time a project is opened. mono-repos it might be not. lsp-mode by default will ask the user to confirm the project root (automatic root selection has caused a lot of trouble for us in the past). Completion # By default, lsp-mode uses company-mode as its completion frontend. When present, company-mode will be auto-configured and it will just work. keybindings/ which-key integration # lsp-mode has smart (almost) complete mnemonic keybindings which auto-enable itself when a certain feature is supported by the server and when the corresponding Emacs package is installed. In addition to that, lsp-mode ships with which-key integration for better discoverability. By default, lsp-mode 's keybindings are available under s-l (Super-l), e. g. s-l h h will show documentation at point. You may change the default prefix by setting lsp-keymap-prefix . Mouse support # Yeah, lsp-mode supports mouse! Refactoring/Code actions # lsp-rename ( s-l r r ) - rename symbol/function at point. lsp-execute-code-action ( s-l a a ) - clangd is able to auto-correct some of the errors. Navigation # lsp-mode has integration with xref core package and in addition it has xref-find-definitions ( M-. and s-l g g ) - find definition(s) at point xref-find-references ( s-l g r ) - find references to the symbol at point helm-imenu - browse the symbols in current document helm-lsp-workspace-symbol - find symbol in current project helm-lsp-global-workspaces-symbol - find symbol in all projects lsp-treemacs-type-hierarchy - show type hierarchy Note: if you prefer ivy over helm you may check out lsp-ivy . lsp-treemacs # lsp-treemacs is a package providing integration with treemacs and an alternative tree-view visualization. Refer to the project's readme for further information. Help/Documentation # lsp-mode automatically enables eldoc-mode which will show hover information in the minibuffer. lsp-mode is showing only the one line signature info so if you want to see the full documentation at point you can use lsp-describe-thing-at-point . In addition to that you can also see signature help after pressing C-M-SPC or after pressing trigger char like ( . If there is more than one applicable signature due to function overloading, you may browse between the available candidates using M-n/M-p . may browse them via M-n/M-p Diagnostics # For on-the-fly errors lsp-mode is using flycheck ( flymake is also supported). It is configured automatically. In addition to standard flycheck features lsp-mode provides a project-wide error list via lsp-treemacs-errors-list . Debugging # Just like lsp-mode provides editing features through the editor-independent Language Server Protocol , its sister package dap-mode provides debugging features through the editor-independent Debug Adapter Protocol and language-specific debugging servers called debug adapters . front-end of the sister Debug Adapter Protocol . It is again client server like Language Sever Protocol . dap-mode provides all of the traditional debugger features - breakpoints(conditions, hit count, etc), threads, locals, Installation # dap-mode provides installation commands for most of the debug adapters. In this tutorial we will use the vscode-cpptools debug adapter. To install the adapter do M-x dap-cpptools-setup . Note: you should have gdb on path. Creating debug configuration # dap-mode introduces the notion of debug configuration and debug template. The debug configuration is the settings that are needed by the debug adapter to start the program to debug. Debug template is a template for such configuration which will be populated by the user or by dap-mode . There are two ways to manage debug configuration - using emacs lisp via dap-debug-edit-template and dap-register-debug-template . The second way is using launch.json . Put it in project root and dap-mode will pick it up. { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Debug Emacs\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${workspaceFolder}/src/emacs\" , \"args\" : [ \"-q\" ], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" } ] } At this point, dap-mode does not provide the list of all available properties for each configuration. The full list can be found in package.json in /.emacs.d/.extension/vscode/cpptools/extension/package.json when dap-mode is using VScode package or debug adapter docs when not. Debugging # Start debugging via M-x dap-debug and select Debug Emacs from the list. . After pressing RET a fresh instance of Emacs will pop up. Then do M-x helm-lsp-workspace-symbol and type message3 . Go to that function and place a breakpoint. You could do that by clicking in the fringe or by doing M-x dap-breakpoint-toggle . Switch to the debugged instance and do M-: (message \"Hello, I am debugging Emacs core!\") RET .","title":"Configuring Emacs a C/C++ IDE"},{"location":"tutorials/CPP-guide/#configuring-emacs-a-cc-ide","text":"In this guide, I will show you how to configure lsp-mode and dap-mode for C/C++ development, using GNU Emacs as an example code base. At the end of this tutorial, Emacs should provide you with all the language-aware editor features you'd expect from a modern C++ IDE, such as Code completion... environment. The guide is mainly focused on lsp-mode / dap-mode and the features that they have. We will use GNU Emacs as a project in order to illustrate each of the steps to get C/C++ project up and running. Some of the main features that we can expect from a C++ IDE: Code completion Real-time syntax checking Code navigation (references/definitions/implementations/symbol search) Visual IDE debugger Document outline, breadcrumb and modeline widgets For all lsp-mode features, check here .","title":"Configuring Emacs a C/C++ IDE"},{"location":"tutorials/CPP-guide/#obtaining-a-language-server","text":"lsp-mode is a client-server application with Emacs acting as the client. In order for it to work, you have to install a separate language server that understands the specifics of your target language. As of late 2020, there are 2 production-ready language servers for C/C++ and Objective-C , ccls and clangd , with ccls 's precursor cquery being deprecated. used by Emacs as provider for language specific features (completion, diagnostics, navigation, etc). For some of the language servers lsp-mode ships with automatic installation scripts but there is no such script for installing C/C++ language server due to their overall complexity. For this guide we will be using clangd but most of the steps here apply to ccls as well. lsp-mode is pre-configured and it will be able to find the language server automatically when it is installed on the host machine and it is present on the path. In case clangd is not present on the path clangd can be installed following their Getting Started instructions. Note: for Debian based system use https://apt.llvm.org/","title":"Obtaining a language server"},{"location":"tutorials/CPP-guide/#project-setup","text":"To understand your source code, clangd needs to know the compiler flags that are used to build the project. (This is just a fact of life in C++, source files are not self-contained). By default, clangd will assume your code is built as clang some_file.cc , and you\u2019ll probably get spurious errors about missing #included files, etc. There are a couple of ways to fix this. You may read about them in installation or in https://sarcasm.github.io/notes/dev/compilation-database.html. In order to generate compile_commands.json for Emacs itself I have found that Bear works fine. sudo apt-get install bear Setup Emacs sources and dependencies: sudo apt-get install -y build-essential git autoconf texinfo libgnutls28-dev libxml2-dev libncurses5-dev libjansson-dev git clone git://git.sv.gnu.org/emacs.git cd emacs ./autogen.sh CFLAGS = \"-ggdb3 -O0\" CXXFLAGS = \"-ggdb3 -O0\" LDFLAGS = \"-ggdb3\" ./configure --with-modules --with-json bear make -j $( nproc ) Prefixing make -j$(nproc) with bear will generate the compile_commands.json which later will be used by clangd . CFLAGS=\"-ggdb3 -O0\" CXXFLAGS=\"-ggdb3 -O0\" LDFLAGS=\"-ggdb3\" will compile Emacs with debug symbols.","title":"Project setup"},{"location":"tutorials/CPP-guide/#lsp-mode-configuration","text":"Here is a bare-bones lsp-mode / dap-mode configuration template to get you started with your own lsp-mode config, or to try out in a separate one-off session. Please note that Emacs configuration frameworks such as Spacemacs or Doom Emacs often ship with lsp-mode settings of their own; should you be using such a framework, and find that lsp-mode doesn't behave as intended, please make sure to follow this tutorial from a clean starting point. in your config or you could run in separate session. ( require 'package ) ( add-to-list 'package-archives ' ( \"melpa\" . \"http://melpa.org/packages/\" ) t ) ( package-initialize ) ( setq package-selected-packages ' ( lsp-mode yasnippet lsp-treemacs helm-lsp projectile hydra flycheck company avy which-key helm-xref dap-mode )) ( when ( cl-find-if-not #' package-installed-p package-selected-packages ) ( package-refresh-contents ) ( mapc #' package-install package-selected-packages )) ;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details ( helm-mode ) ( require 'helm-xref ) ( define-key global-map [ remap find-file ] #' helm-find-files ) ( define-key global-map [ remap execute-extended-command ] #' helm-M-x ) ( define-key global-map [ remap switch-to-buffer ] #' helm-mini ) ( which-key-mode ) ( add-hook 'c-mode-hook 'lsp ) ( add-hook 'cpp-mode-hook 'lsp ) ( setq gc-cons-threshold ( * 100 1024 1024 ) read-process-output-max ( * 1024 1024 ) treemacs-space-between-root-nodes nil company-idle-delay 0.0 company-minimum-prefix-length 1 lsp-idle-delay 0.1 ;; clangd is fast ;; be more ide-ish lsp-headerline-breadcrumb-enable t ) ( with-eval-after-load 'lsp-mode ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration ) ( require 'dap-cpptools ) ( yas-global-mode ))","title":"lsp-mode configuration"},{"location":"tutorials/CPP-guide/#feature-overview","text":"And now it is time to start hacking on Emacs core! emacs ~/Sources/emacs/src/editfns.c Now, if everything was successful you will be asked to select a project root. Note: the project root is needed by the language server in order to know where to start the project discovery from. Typically, this is the git repository root but since exceptions to this rule have caused us a lot of trouble in the past (monorepos come to mind), lsp-mode by default asks the user to manually confirm the project root the first time a project is opened. mono-repos it might be not. lsp-mode by default will ask the user to confirm the project root (automatic root selection has caused a lot of trouble for us in the past).","title":"Feature overview"},{"location":"tutorials/CPP-guide/#completion","text":"By default, lsp-mode uses company-mode as its completion frontend. When present, company-mode will be auto-configured and it will just work.","title":"Completion"},{"location":"tutorials/CPP-guide/#keybindingswhich-key-integration","text":"lsp-mode has smart (almost) complete mnemonic keybindings which auto-enable itself when a certain feature is supported by the server and when the corresponding Emacs package is installed. In addition to that, lsp-mode ships with which-key integration for better discoverability. By default, lsp-mode 's keybindings are available under s-l (Super-l), e. g. s-l h h will show documentation at point. You may change the default prefix by setting lsp-keymap-prefix .","title":"keybindings/which-key integration"},{"location":"tutorials/CPP-guide/#mouse-support","text":"Yeah, lsp-mode supports mouse!","title":"Mouse support"},{"location":"tutorials/CPP-guide/#refactoringcode-actions","text":"lsp-rename ( s-l r r ) - rename symbol/function at point. lsp-execute-code-action ( s-l a a ) - clangd is able to auto-correct some of the errors.","title":"Refactoring/Code actions"},{"location":"tutorials/CPP-guide/#navigation","text":"lsp-mode has integration with xref core package and in addition it has xref-find-definitions ( M-. and s-l g g ) - find definition(s) at point xref-find-references ( s-l g r ) - find references to the symbol at point helm-imenu - browse the symbols in current document helm-lsp-workspace-symbol - find symbol in current project helm-lsp-global-workspaces-symbol - find symbol in all projects lsp-treemacs-type-hierarchy - show type hierarchy Note: if you prefer ivy over helm you may check out lsp-ivy .","title":"Navigation"},{"location":"tutorials/CPP-guide/#lsp-treemacs","text":"lsp-treemacs is a package providing integration with treemacs and an alternative tree-view visualization. Refer to the project's readme for further information.","title":"lsp-treemacs"},{"location":"tutorials/CPP-guide/#helpdocumentation","text":"lsp-mode automatically enables eldoc-mode which will show hover information in the minibuffer. lsp-mode is showing only the one line signature info so if you want to see the full documentation at point you can use lsp-describe-thing-at-point . In addition to that you can also see signature help after pressing C-M-SPC or after pressing trigger char like ( . If there is more than one applicable signature due to function overloading, you may browse between the available candidates using M-n/M-p . may browse them via M-n/M-p","title":"Help/Documentation"},{"location":"tutorials/CPP-guide/#diagnostics","text":"For on-the-fly errors lsp-mode is using flycheck ( flymake is also supported). It is configured automatically. In addition to standard flycheck features lsp-mode provides a project-wide error list via lsp-treemacs-errors-list .","title":"Diagnostics"},{"location":"tutorials/CPP-guide/#debugging","text":"Just like lsp-mode provides editing features through the editor-independent Language Server Protocol , its sister package dap-mode provides debugging features through the editor-independent Debug Adapter Protocol and language-specific debugging servers called debug adapters . front-end of the sister Debug Adapter Protocol . It is again client server like Language Sever Protocol . dap-mode provides all of the traditional debugger features - breakpoints(conditions, hit count, etc), threads, locals,","title":"Debugging"},{"location":"tutorials/CPP-guide/#installation","text":"dap-mode provides installation commands for most of the debug adapters. In this tutorial we will use the vscode-cpptools debug adapter. To install the adapter do M-x dap-cpptools-setup . Note: you should have gdb on path.","title":"Installation"},{"location":"tutorials/CPP-guide/#creating-debug-configuration","text":"dap-mode introduces the notion of debug configuration and debug template. The debug configuration is the settings that are needed by the debug adapter to start the program to debug. Debug template is a template for such configuration which will be populated by the user or by dap-mode . There are two ways to manage debug configuration - using emacs lisp via dap-debug-edit-template and dap-register-debug-template . The second way is using launch.json . Put it in project root and dap-mode will pick it up. { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Debug Emacs\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${workspaceFolder}/src/emacs\" , \"args\" : [ \"-q\" ], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" } ] } At this point, dap-mode does not provide the list of all available properties for each configuration. The full list can be found in package.json in /.emacs.d/.extension/vscode/cpptools/extension/package.json when dap-mode is using VScode package or debug adapter docs when not.","title":"Creating debug configuration"},{"location":"tutorials/CPP-guide/#debugging_1","text":"Start debugging via M-x dap-debug and select Debug Emacs from the list. . After pressing RET a fresh instance of Emacs will pop up. Then do M-x helm-lsp-workspace-symbol and type message3 . Go to that function and place a breakpoint. You could do that by clicking in the fringe or by doing M-x dap-breakpoint-toggle . Switch to the debugged instance and do M-: (message \"Hello, I am debugging Emacs core!\") RET .","title":"Debugging"},{"location":"tutorials/how-to-turn-off/","text":"A guide on disabling/enabling lsp-mode features # Early in the project, we decided to auto-configure/enable all of the stable features by default in order to improve discoverability and simplify the setup for the beginners. This decision was considered good by the majority of the users coming from IDEs but still in Emacs community there are a lot of people looking for a minimal distraction-free experience especially traditional long time users. Although the turn off defcustom settings are documented in corresponding README and available via customize-group it turned out that it is not very easy to find them when you want to turn a particular feature off which led to a lot of frustration. Hopefully, this article will help solving that issue: 1. Symbol highlighting ( setq lsp-enable-symbol-highlighting nil ) 2. lsp-ui-doc - on hover dialogs. * disable via (setq lsp-ui-doc-enable nil) * disable cursor hover (keep mouse hover) ( setq lsp-ui-doc-show-with-cursor nil ) * disable mouse hover (keep cursor hover) ( setq lsp-ui-doc-show-with-mouse nil ) 3. Lenses ( setq lsp-lens-enable nil ) 4. Headerline ( setq lsp-headerline-breadcrumb-enable nil ) 5. Sideline code actions * disable whole sideline via ( setq lsp-ui-sideline-enable nil ) * hide code actions ( setq lsp-ui-sideline-show-code-actions nil ) 6. Sideline hover symbols * disable whole sideline via ( setq lsp-ui-sideline-enable nil ) * hide only hover symbols ( setq lsp-ui-sideline-show-hover nil ) 7. Modeline code actions ( setq lsp-modeline-code-actions-enable nil ) 8. Flycheck (or flymake if no flycheck is present) ( setq lsp-diagnostics-provider :none ) 9. Sideline diagnostics * disable whole sideline via ( setq lsp-ui-sideline-enable nil ) * hide only errors ( setq lsp-ui-sideline-show-diagnostics nil ) 10. Eldoc ( setq lsp-eldoc-enable-hover nil ) 11. Modeline diagnostics statistics ( setq lsp-modeline-diagnostics-enable nil ) 12. Signature help ( setq lsp-signature-auto-activate nil ) ;; you could manually requiest them via `lsp-signature-activate` 13. Signature help documentation (keep the signatures) ( setq lsp-signature-render-documentation nil ) 14. Completion ( company-mode ) ( setq lsp-completion-provider :none ) 15. Completion item detail ( setq lsp-completion-show-detail nil ) 16. Completion item kind ( setq lsp-completion-show-kind nil )","title":"A guide on disabling/enabling lsp-mode features"},{"location":"tutorials/how-to-turn-off/#a-guide-on-disablingenabling-lsp-mode-features","text":"Early in the project, we decided to auto-configure/enable all of the stable features by default in order to improve discoverability and simplify the setup for the beginners. This decision was considered good by the majority of the users coming from IDEs but still in Emacs community there are a lot of people looking for a minimal distraction-free experience especially traditional long time users. Although the turn off defcustom settings are documented in corresponding README and available via customize-group it turned out that it is not very easy to find them when you want to turn a particular feature off which led to a lot of frustration. Hopefully, this article will help solving that issue: 1. Symbol highlighting ( setq lsp-enable-symbol-highlighting nil ) 2. lsp-ui-doc - on hover dialogs. * disable via (setq lsp-ui-doc-enable nil) * disable cursor hover (keep mouse hover) ( setq lsp-ui-doc-show-with-cursor nil ) * disable mouse hover (keep cursor hover) ( setq lsp-ui-doc-show-with-mouse nil ) 3. Lenses ( setq lsp-lens-enable nil ) 4. Headerline ( setq lsp-headerline-breadcrumb-enable nil ) 5. Sideline code actions * disable whole sideline via ( setq lsp-ui-sideline-enable nil ) * hide code actions ( setq lsp-ui-sideline-show-code-actions nil ) 6. Sideline hover symbols * disable whole sideline via ( setq lsp-ui-sideline-enable nil ) * hide only hover symbols ( setq lsp-ui-sideline-show-hover nil ) 7. Modeline code actions ( setq lsp-modeline-code-actions-enable nil ) 8. Flycheck (or flymake if no flycheck is present) ( setq lsp-diagnostics-provider :none ) 9. Sideline diagnostics * disable whole sideline via ( setq lsp-ui-sideline-enable nil ) * hide only errors ( setq lsp-ui-sideline-show-diagnostics nil ) 10. Eldoc ( setq lsp-eldoc-enable-hover nil ) 11. Modeline diagnostics statistics ( setq lsp-modeline-diagnostics-enable nil ) 12. Signature help ( setq lsp-signature-auto-activate nil ) ;; you could manually requiest them via `lsp-signature-activate` 13. Signature help documentation (keep the signatures) ( setq lsp-signature-render-documentation nil ) 14. Completion ( company-mode ) ( setq lsp-completion-provider :none ) 15. Completion item detail ( setq lsp-completion-show-detail nil ) 16. Completion item kind ( setq lsp-completion-show-kind nil )","title":"A guide on disabling/enabling lsp-mode features"},{"location":"tutorials/reactjs-tutorial/","text":"Using React in Emacs # React is a popular JavaScript library developed by Facebook for building web application user interfaces. The Emacs editor supports React.js IntelliSense and code navigation out of the box. Welcome to React # We'll be using the create-react-app generator for this tutorial. To use the generator as well as to run the React application server, you'll need the Node.js JavaScript runtime and npm (Node.js package manager) installed. npm is included with Node.js, which you can download and install from Node.js downloads . Tip : To test that you have Node.js and npm correctly installed on your machine, you can type node --version and npm --version in a terminal or command prompt. You can now create a new React application by typing: npx create-react-app my-app where my-app is the name of the folder for your React application. It may take a few minutes to create it and to install its dependencies. Note : If you've previously installed create-react-app globally via npm install -g create-react-app , we recommend you uninstall the package using npm uninstall -g create-react-app to ensure that npx always uses the latest version. Let's quickly run our React application by navigating to the new folder and typing npm start to start the web server and to open the application in a browser: cd my-app npm start Note: in order to avoid this issue , you have to add a jsconfig.json in the top of the folder: { \"compilerOptions\" : { \"module\" : \"commonjs\" , \"target\" : \"es2016\" , \"jsx\" : \"preserve\" , \"allowJs\" : true , \"allowSyntheticDefaultImports\" : true , \"allowNonTsExtensions\" : true } } You should see the React logo and a link to \"Learn React\" on http://localhost:3000 in your browser. We'll leave the web server running while we look at the application with Emacs. Emacs configuration # Here is a minimal configuration to run this tutorial: ( package-initialize ) ( add-to-list 'package-archives ' ( \"melpa\" . \"http://melpa.org/packages/\" ) t ) ( setq package-selected-packages ' ( lsp-mode yasnippet lsp-treemacs helm-lsp projectile hydra flycheck company avy which-key helm-xref dap-mode zenburn-theme json-mode )) ( when ( cl-find-if-not #' package-installed-p package-selected-packages ) ( package-refresh-contents ) ( mapc #' package-install package-selected-packages )) ( load-theme 'zenburn t ) ( helm-mode ) ( require 'helm-xref ) ( define-key global-map [ remap find-file ] #' helm-find-files ) ( define-key global-map [ remap execute-extended-command ] #' helm-M-x ) ( define-key global-map [ remap switch-to-buffer ] #' helm-mini ) ( which-key-mode ) ( add-hook 'prog-mode-hook #' lsp ) ( setq gc-cons-threshold ( * 100 1024 1024 ) read-process-output-max ( * 1024 1024 ) company-idle-delay 0.0 company-minimum-prefix-length 1 create-lockfiles nil ;; lock files will kill `npm start' lsp-headerline-breadcrumb-enable t ) ( with-eval-after-load 'lsp-mode ( require 'dap-chrome ) ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration ) ( yas-global-mode )) To open your React application in Emacs, open another terminal or command prompt window, navigate to the my-app folder and type: emacs my-app/src/index.js Tip : For optimal experience use either Emacs 27.1 or gccemacs . Installing the typescript language server # Emacs supports automatic language server installation, so the first time you run M-x lsp in a JavaScript file opened in it, you will be prompted for a language server to install. Select ts-ls . Importing the project # Then you have to select project root. Press i . Syntax highlighting and bracket matching # You'll notice that Emacs has syntax highlighting for the various source code elements and, if you put the cursor on a parenthesis, the matching bracket is also selected. IntelliSense # As you start typing in index.js , you'll see smart suggestions or completions. After you select a suggestion and type . , you see the types and methods on the object through IntelliSense . Emacs uses the TypeScript language service for its JavaScript code intelligence and it has a feature called Automatic Type Acquisition (ATA). ATA pulls down the npm Type Declaration files ( *.d.ts ) for the npm modules referenced in the package.json . If you select a method, you'll also get parameter help: Go to Definition, Peek definition # Through the TypeScript language service, Emacs can also provide type definition information in the editor through Go to Definition ( M-. ) or Peek Definition ( M-x lsp-ui-peek-find-definitions ). Put the cursor over the App , right click and select Go to definition . Note : Peek definition requires installing lsp-ui package which is not part of the default installation. Hello World! # Let's update the sample application to \"Hello World!\". Add the link to declare a new H1 header and replace the <App /> tag in ReactDOM.render with element . import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import reportWebVitals from './reportWebVitals' ; var element = React . createElement ( 'h1' , { className : 'greeting' }, 'Hello, world!' ); ReactDOM . render ( element , document . getElementById ( 'root' )); reportWebVitals (); Once you save the index.js file, the running instance of the server will update the web page and you'll see \"Hello World!\". Debugging React # To debug the client side React code, we'll need to install the Debugger for Chrome extension. Note: This tutorial assumes you have the Chrome browser installed. There are also debugger extensions for the Edge and Firefox browsers. Press M-x and type dap-chrome-setup . Set a breakpoint # To set a breakpoint in index.js , click on the gutter to the left of the line numbers. This will set a breakpoint which will be visible as a red circle. Configure the Chrome debugger # We need to initially configure the debugger . To do so, create a launch.json file in the .vscode/ subfolder of the project root with a configuration to launch the website: { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"type\" : \"chrome\" , \"request\" : \"launch\" , \"name\" : \"Launch Chrome against localhost\" , \"url\" : \"http://localhost:3000\" , \"webRoot\" : \"${workspaceFolder}\" } ] } Ensure that your development server is running ( npm start ). Then type M-x dap-debug or use Debug -> Start menu. The source code where the breakpoint is set runs on startup before the debugger was attached, so we won't hit the breakpoint until we refresh the web page. Refresh the page and you should hit your breakpoint. You can step through your source code using M-x dap-next , inspect variables such as element , and see the call stack of the client side React application. The Debugger for Chrome extension README has lots of information on other configurations, working with sourcemaps, and troubleshooting. You can review it their README Live editing and debugging # If you are using webpack together with your React app, you can have a more efficient workflow by taking advantage of webpack's HMR mechanism which enables you to have live editing and debugging directly from Emacs. You can learn more in this Live edit and debug your React apps directly from Emacs(TO BE PORTED TO EMACS) blog post and the webpack Hot Module Replacement documentation(TO BE PORTED TO EMACS) . Linting # Linters analyze your source code and can warn about potential problems before running your application. The JavaScript language service included with Emacs has syntax error checking support by default, which you can see in action in the Errors List panel ( M-x lsp-treemacs-errors-list ). Try making a small error in your React source code and you'll see a red squiggle and an error in the Errors List panel. Linters can provide more sophisticated analysis, enforcing coding conventions and detecting anti-patterns. A popular JavaScript linter is ESLint . ESLint, when combined with the ESLint Emacs extension , provides a great in-product linting experience. First, install the ESLint command-line tool: npm install -g eslint Then install the ESLint language server by doing M-x lsp-install-server RET eslint RET . Once the ESLint extension is installed, you'll want to create an ESLint configuration file, .eslintrc.js . You can create one using M-x lsp-eslint-create-default-configuration . The command will prompt you to answer a series of questions in a separate window. Accept the defaults, and it will create a .eslintrc.js file in your project root that looks something like this: module . exports = { \"env\" : { \"browser\" : true , \"es2020\" : true }, \"extends\" : [ \"eslint:recommended\" , \"plugin:react/recommended\" ], \"parserOptions\" : { \"ecmaFeatures\" : { \"jsx\" : true }, \"ecmaVersion\" : 11 , \"sourceType\" : \"module\" }, \"plugins\" : [ \"react\" ], \"rules\" : { } }; ESLint will now analyze open files and shows a warning in index.js about 'App' being defined but never used. You can modify the ESLint rules in the .eslintrc.js file. Let's add an error rule for extra semi-colons: \"rules\" : { \"no-extra-semi\" : \"error\" } Now when you mistakenly have multiple semicolons on a line, you'll see an error (red squiggle) in the editor and error entry in the Problems panel. Popular Starter Kits # In this tutorial, we used the create-react-app generator to create a simple React application. There are lots of great samples and starter kits available to help build your first React application. TypeScript React # If you're curious about TypeScript and React, you can also create a TypeScript version of the create-react-app application. See the details at TypeScript-React-Starter on the TypeScript Quick Start site.","title":"React JavaScript Tutorial in Emacs"},{"location":"tutorials/reactjs-tutorial/#using-react-in-emacs","text":"React is a popular JavaScript library developed by Facebook for building web application user interfaces. The Emacs editor supports React.js IntelliSense and code navigation out of the box.","title":"Using React in Emacs"},{"location":"tutorials/reactjs-tutorial/#welcome-to-react","text":"We'll be using the create-react-app generator for this tutorial. To use the generator as well as to run the React application server, you'll need the Node.js JavaScript runtime and npm (Node.js package manager) installed. npm is included with Node.js, which you can download and install from Node.js downloads . Tip : To test that you have Node.js and npm correctly installed on your machine, you can type node --version and npm --version in a terminal or command prompt. You can now create a new React application by typing: npx create-react-app my-app where my-app is the name of the folder for your React application. It may take a few minutes to create it and to install its dependencies. Note : If you've previously installed create-react-app globally via npm install -g create-react-app , we recommend you uninstall the package using npm uninstall -g create-react-app to ensure that npx always uses the latest version. Let's quickly run our React application by navigating to the new folder and typing npm start to start the web server and to open the application in a browser: cd my-app npm start Note: in order to avoid this issue , you have to add a jsconfig.json in the top of the folder: { \"compilerOptions\" : { \"module\" : \"commonjs\" , \"target\" : \"es2016\" , \"jsx\" : \"preserve\" , \"allowJs\" : true , \"allowSyntheticDefaultImports\" : true , \"allowNonTsExtensions\" : true } } You should see the React logo and a link to \"Learn React\" on http://localhost:3000 in your browser. We'll leave the web server running while we look at the application with Emacs.","title":"Welcome to React"},{"location":"tutorials/reactjs-tutorial/#emacs-configuration","text":"Here is a minimal configuration to run this tutorial: ( package-initialize ) ( add-to-list 'package-archives ' ( \"melpa\" . \"http://melpa.org/packages/\" ) t ) ( setq package-selected-packages ' ( lsp-mode yasnippet lsp-treemacs helm-lsp projectile hydra flycheck company avy which-key helm-xref dap-mode zenburn-theme json-mode )) ( when ( cl-find-if-not #' package-installed-p package-selected-packages ) ( package-refresh-contents ) ( mapc #' package-install package-selected-packages )) ( load-theme 'zenburn t ) ( helm-mode ) ( require 'helm-xref ) ( define-key global-map [ remap find-file ] #' helm-find-files ) ( define-key global-map [ remap execute-extended-command ] #' helm-M-x ) ( define-key global-map [ remap switch-to-buffer ] #' helm-mini ) ( which-key-mode ) ( add-hook 'prog-mode-hook #' lsp ) ( setq gc-cons-threshold ( * 100 1024 1024 ) read-process-output-max ( * 1024 1024 ) company-idle-delay 0.0 company-minimum-prefix-length 1 create-lockfiles nil ;; lock files will kill `npm start' lsp-headerline-breadcrumb-enable t ) ( with-eval-after-load 'lsp-mode ( require 'dap-chrome ) ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration ) ( yas-global-mode )) To open your React application in Emacs, open another terminal or command prompt window, navigate to the my-app folder and type: emacs my-app/src/index.js Tip : For optimal experience use either Emacs 27.1 or gccemacs .","title":"Emacs configuration"},{"location":"tutorials/reactjs-tutorial/#installing-the-typescript-language-server","text":"Emacs supports automatic language server installation, so the first time you run M-x lsp in a JavaScript file opened in it, you will be prompted for a language server to install. Select ts-ls .","title":"Installing the typescript language server"},{"location":"tutorials/reactjs-tutorial/#importing-the-project","text":"Then you have to select project root. Press i .","title":"Importing the project"},{"location":"tutorials/reactjs-tutorial/#syntax-highlighting-and-bracket-matching","text":"You'll notice that Emacs has syntax highlighting for the various source code elements and, if you put the cursor on a parenthesis, the matching bracket is also selected.","title":"Syntax highlighting and bracket matching"},{"location":"tutorials/reactjs-tutorial/#intellisense","text":"As you start typing in index.js , you'll see smart suggestions or completions. After you select a suggestion and type . , you see the types and methods on the object through IntelliSense . Emacs uses the TypeScript language service for its JavaScript code intelligence and it has a feature called Automatic Type Acquisition (ATA). ATA pulls down the npm Type Declaration files ( *.d.ts ) for the npm modules referenced in the package.json . If you select a method, you'll also get parameter help:","title":"IntelliSense"},{"location":"tutorials/reactjs-tutorial/#go-to-definition-peek-definition","text":"Through the TypeScript language service, Emacs can also provide type definition information in the editor through Go to Definition ( M-. ) or Peek Definition ( M-x lsp-ui-peek-find-definitions ). Put the cursor over the App , right click and select Go to definition . Note : Peek definition requires installing lsp-ui package which is not part of the default installation.","title":"Go to Definition, Peek definition"},{"location":"tutorials/reactjs-tutorial/#hello-world","text":"Let's update the sample application to \"Hello World!\". Add the link to declare a new H1 header and replace the <App /> tag in ReactDOM.render with element . import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import reportWebVitals from './reportWebVitals' ; var element = React . createElement ( 'h1' , { className : 'greeting' }, 'Hello, world!' ); ReactDOM . render ( element , document . getElementById ( 'root' )); reportWebVitals (); Once you save the index.js file, the running instance of the server will update the web page and you'll see \"Hello World!\".","title":"Hello World!"},{"location":"tutorials/reactjs-tutorial/#debugging-react","text":"To debug the client side React code, we'll need to install the Debugger for Chrome extension. Note: This tutorial assumes you have the Chrome browser installed. There are also debugger extensions for the Edge and Firefox browsers. Press M-x and type dap-chrome-setup .","title":"Debugging React"},{"location":"tutorials/reactjs-tutorial/#set-a-breakpoint","text":"To set a breakpoint in index.js , click on the gutter to the left of the line numbers. This will set a breakpoint which will be visible as a red circle.","title":"Set a breakpoint"},{"location":"tutorials/reactjs-tutorial/#configure-the-chrome-debugger","text":"We need to initially configure the debugger . To do so, create a launch.json file in the .vscode/ subfolder of the project root with a configuration to launch the website: { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"type\" : \"chrome\" , \"request\" : \"launch\" , \"name\" : \"Launch Chrome against localhost\" , \"url\" : \"http://localhost:3000\" , \"webRoot\" : \"${workspaceFolder}\" } ] } Ensure that your development server is running ( npm start ). Then type M-x dap-debug or use Debug -> Start menu. The source code where the breakpoint is set runs on startup before the debugger was attached, so we won't hit the breakpoint until we refresh the web page. Refresh the page and you should hit your breakpoint. You can step through your source code using M-x dap-next , inspect variables such as element , and see the call stack of the client side React application. The Debugger for Chrome extension README has lots of information on other configurations, working with sourcemaps, and troubleshooting. You can review it their README","title":"Configure the Chrome debugger"},{"location":"tutorials/reactjs-tutorial/#live-editing-and-debugging","text":"If you are using webpack together with your React app, you can have a more efficient workflow by taking advantage of webpack's HMR mechanism which enables you to have live editing and debugging directly from Emacs. You can learn more in this Live edit and debug your React apps directly from Emacs(TO BE PORTED TO EMACS) blog post and the webpack Hot Module Replacement documentation(TO BE PORTED TO EMACS) .","title":"Live editing and debugging"},{"location":"tutorials/reactjs-tutorial/#linting","text":"Linters analyze your source code and can warn about potential problems before running your application. The JavaScript language service included with Emacs has syntax error checking support by default, which you can see in action in the Errors List panel ( M-x lsp-treemacs-errors-list ). Try making a small error in your React source code and you'll see a red squiggle and an error in the Errors List panel. Linters can provide more sophisticated analysis, enforcing coding conventions and detecting anti-patterns. A popular JavaScript linter is ESLint . ESLint, when combined with the ESLint Emacs extension , provides a great in-product linting experience. First, install the ESLint command-line tool: npm install -g eslint Then install the ESLint language server by doing M-x lsp-install-server RET eslint RET . Once the ESLint extension is installed, you'll want to create an ESLint configuration file, .eslintrc.js . You can create one using M-x lsp-eslint-create-default-configuration . The command will prompt you to answer a series of questions in a separate window. Accept the defaults, and it will create a .eslintrc.js file in your project root that looks something like this: module . exports = { \"env\" : { \"browser\" : true , \"es2020\" : true }, \"extends\" : [ \"eslint:recommended\" , \"plugin:react/recommended\" ], \"parserOptions\" : { \"ecmaFeatures\" : { \"jsx\" : true }, \"ecmaVersion\" : 11 , \"sourceType\" : \"module\" }, \"plugins\" : [ \"react\" ], \"rules\" : { } }; ESLint will now analyze open files and shows a warning in index.js about 'App' being defined but never used. You can modify the ESLint rules in the .eslintrc.js file. Let's add an error rule for extra semi-colons: \"rules\" : { \"no-extra-semi\" : \"error\" } Now when you mistakenly have multiple semicolons on a line, you'll see an error (red squiggle) in the editor and error entry in the Problems panel.","title":"Linting"},{"location":"tutorials/reactjs-tutorial/#popular-starter-kits","text":"In this tutorial, we used the create-react-app generator to create a simple React application. There are lots of great samples and starter kits available to help build your first React application.","title":"Popular Starter Kits"},{"location":"tutorials/reactjs-tutorial/#typescript-react","text":"If you're curious about TypeScript and React, you can also create a TypeScript version of the create-react-app application. See the details at TypeScript-React-Starter on the TypeScript Quick Start site.","title":"TypeScript React"}]}